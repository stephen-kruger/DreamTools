<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AugmentWebviewStateStore">
    <option name="stateMap">
      <map>
        <entry key="CHAT_STATE" value="{&quot;currentConversationId&quot;:&quot;8636e70c-6bd3-41c8-87b3-8150d28fd718&quot;,&quot;conversations&quot;:{&quot;bea88bb8-e1f0-4a4b-b49a-e07bdae8279a&quot;:{&quot;id&quot;:&quot;bea88bb8-e1f0-4a4b-b49a-e07bdae8279a&quot;,&quot;createdAtIso&quot;:&quot;2025-07-05T04:09:35.549Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-07-05T04:09:35.549Z&quot;,&quot;chatHistory&quot;:[],&quot;feedbackStates&quot;:{},&quot;toolUseStates&quot;:{},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;mentioned_items&quot;:[],&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:false,&quot;extraData&quot;:{&quot;hasDirtyEdits&quot;:false},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;4af803c3-b201-4015-980a-fe70ea9478cf&quot;},&quot;8636e70c-6bd3-41c8-87b3-8150d28fd718&quot;:{&quot;id&quot;:&quot;8636e70c-6bd3-41c8-87b3-8150d28fd718&quot;,&quot;createdAtIso&quot;:&quot;2025-07-05T04:09:35.623Z&quot;,&quot;lastInteractedAtIso&quot;:&quot;2025-07-05T04:22:30.905Z&quot;,&quot;chatHistory&quot;:[{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;87486fc6-69fe-48b7-bff5-f86f85a67ca6&quot;,&quot;request_message&quot;:&quot;I am trying to create my Google Play signing key in dreamtools_private_key_path, but when I upload it I get an error \&quot;The private key was not properly encrypted, or is not a type of key we support\&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;text&quot;,&quot;text&quot;:&quot;I am trying to create my Google Play signing key in dreamtools_private_key_path, but when I upload it I get an error \&quot;The private key was not properly encrypted, or is not a type of key we support\&quot;&quot;}]}]},&quot;mentioned_items&quot;:[],&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01Rv6AgSDbPg5GkjgfdJ6cho&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;signing/create_keys.sh\&quot;, \&quot;type\&quot;: \&quot;file\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I'll help you troubleshoot the Google Play signing key issue. Let me first examine the current `create_keys.sh` file to understand how the key is being generated, and then we can identify what might be causing the encryption or format issue.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;text_node&quot;:{&quot;content&quot;:&quot;I am trying to create my Google Play signing key in dreamtools_private_key_path, but when I upload it I get an error \&quot;The private key was not properly encrypted, or is not a type of key we support\&quot;&quot;}},{&quot;id&quot;:1,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-05T04:11:48.837Z&quot;,&quot;response_text&quot;:&quot;I'll help you troubleshoot the Google Play signing key issue. Let me first examine the current `create_keys.sh` file to understand how the key is being generated, and then we can identify what might be causing the encryption or format issue.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;b902aa63-bc49-4a50-b7c7-c657e5d900dd&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01GoTMjJYM2XVGJFhqMLh81a&quot;,&quot;tool_name&quot;:&quot;view&quot;,&quot;input_json&quot;:&quot;{\&quot;path\&quot;: \&quot;signing\&quot;, \&quot;type\&quot;: \&quot;directory\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now let me check if there are any existing key files and examine the directory structure:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the result of running `cat -n` on signing/create_keys.sh:\n     1\t# Download encryption public key from Google Play Store as encryption_public_key.pem\n     2\trm dreamtools.keystore\n     3\t\n     4\t\n     5\t# this is to generate dreamtools_keystore.jks\n     6\tkeytool -genkeypair -v -keystore dreamtools_keystore.jks -keyalg rsa -keysize 2048 -validity 10000 -alias dreamtools\n     7\tkeytool -keystore dreamtools_keystore.jks -genkey -alias dreamtools -keyalg rsa\n     8\t\n     9\t# this is to generate dreamtools_private_key_path.pem\n    10\tjava -jar pepk.jar --keystore=dreamtools_keystore.jks --alias=dreamtools --output=dreamtools_private_key_path --rsa-aes-encryption --encryption-key-path=./encryption_public_key.pem\n    11\t\n    12\t# this is to export and encrypt our private key encrypted_private_key.pem\n    13\t\n    14\t#java -jar pepk.jar --keystore=dreamtools_keystore.jks --alias=dreamtools --output=drunzip dreeamtools.zip --include-cert --rsa-aes-encryption --encryption-key-path=./encryption_public_key.pem\nTotal lines in file: 14\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01Rv6AgSDbPg5GkjgfdJ6cho&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-05T04:11:53.273Z&quot;,&quot;response_text&quot;:&quot;Now let me check if there are any existing key files and examine the directory structure:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;fc5a00a7-a8ed-47f1-bcf4-710eff2e3e1b&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01GBJMTZo8C9rRbnAzvJhfGo&quot;,&quot;tool_name&quot;:&quot;launch-process&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;file dreamtools_private_key_path\&quot;, \&quot;cwd\&quot;: \&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing\&quot;, \&quot;wait\&quot;: true, \&quot;max_wait_seconds\&quot;: 10}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me examine the generated private key file to understand its format:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here's the files and directories up to 2 levels deep in signing, excluding hidden items:\nsigning/create_keys.sh\nsigning/dreamtools_keystore.jks\nsigning/dreamtools_private_key_path\nsigning/encryption_public_key.pem\nsigning/pepk.jar\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01GoTMjJYM2XVGJFhqMLh81a&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false}}],&quot;timestamp&quot;:&quot;2025-07-05T04:11:57.110Z&quot;,&quot;response_text&quot;:&quot;Let me examine the generated private key file to understand its format:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;73f3de2e-81e6-436c-9a30-e650d1f8f03c&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_013PCf1PZy5m4S9VUiKGJNSJ&quot;,&quot;tool_name&quot;:&quot;launch-process&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;hexdump -C dreamtools_private_key_path | head -5\&quot;, \&quot;cwd\&quot;: \&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing\&quot;, \&quot;wait\&quot;: true, \&quot;max_wait_seconds\&quot;: 10}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me check the first few bytes of the file to see its format:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here are the results from executing the command.\n&lt;return-code&gt;\n0\n&lt;/return-code&gt;\n&lt;stdout&gt;\ndreamtools_private_key_path: data\n\n&lt;/stdout&gt;\n&lt;stderr&gt;\n\n&lt;/stderr&gt;&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01GBJMTZo8C9rRbnAzvJhfGo&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:2,&quot;currentWorkingDirectory&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing&quot;}}}],&quot;timestamp&quot;:&quot;2025-07-05T04:12:02.534Z&quot;,&quot;response_text&quot;:&quot;Let me check the first few bytes of the file to see its format:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;d5f7b3bb-5b00-4683-ba25-e35d5822c001&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01VySycNFejZQrv7PdvGPatX&quot;,&quot;tool_name&quot;:&quot;web-search&quot;,&quot;input_json&quot;:&quot;{\&quot;query\&quot;: \&quot;Google Play Console private key upload format requirements 2024\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;I can see the issue! The file `dreamtools_private_key_path` is a binary encrypted file generated by the PEPK (Play Encrypt Private Key) tool, but Google Play Console expects a different format. Let me check what Google Play Console actually expects and fix the key generation process.\n\nLet me search for information about the correct format for Google Play signing keys:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here are the results from executing the command.\n        &lt;return-code&gt;\n        0\n        &lt;/return-code&gt;\n        &lt;stdout&gt;\n        00000000  60 39 b2 dd 44 fa dd 7b  73 a4 78 c1 4a 8d c8 dd  |`9..D..{s.x.J...|\n00000010  cc 02 6f b9 14 dd ea 7f  b1 40 6b 13 d3 29 80 89  |..o......@k..)..|\n00000020  f6 ab a1 43 a7 48 6d 2e  8b 5e eb 24 2c 51 11 5f  |...C.Hm..^.$,Q._|\n00000030  6d a6 87 ea 1c 2a ee 06  aa a9 70 17 f6 5c 8e e8  |m....*....p..\\..|\n00000040  4e 6b a0 e3 6c b9 21 20  e8 85 68 30 08 90 bc 16  |Nk..l.! ..h0....|\n\n        &lt;/stdout&gt;\n        &lt;stderr&gt;\n        \n        &lt;/stderr&gt;&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_013PCf1PZy5m4S9VUiKGJNSJ&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:3,&quot;currentWorkingDirectory&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing&quot;}}}],&quot;timestamp&quot;:&quot;2025-07-05T04:19:18.451Z&quot;,&quot;response_text&quot;:&quot;I can see the issue! The file `dreamtools_private_key_path` is a binary encrypted file generated by the PEPK (Play Encrypt Private Key) tool, but Google Play Console expects a different format. Let me check what Google Play Console actually expects and fix the key generation process.\n\nLet me search for information about the correct format for Google Play signing keys:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;6a0173e4-fc15-4e46-ad62-970a483016c2&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01WCgdmoJbmU9XdhKvt4EBkp&quot;,&quot;tool_name&quot;:&quot;web-search&quot;,&quot;input_json&quot;:&quot;{\&quot;query\&quot;: \&quot;PEPK tool Google Play private key upload \\\&quot;not properly encrypted\\\&quot; error\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me get more specific information about the PEPK tool and the correct upload process:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;- [android - How to generate an upload key for Google App Signing ...](https://stackoverflow.com/questions/44090926/how-to-generate-an-upload-key-for-google-app-signing)\n  May 20, 2017 ... I created an app entry on the Play console. Then I activated Google Play App Signing; I uploaded my signed APK with a normal keystore file. And ...\n\n- [I am unable to upload my updated app bundle because i get the App ...](https://support.google.com/googleplay/android-developer/thread/241757169/i-am-unable-to-upload-my-updated-app-bundle-because-i-get-the-app-bundle-signed-with-a-wrong-key?hl=en)\n  Oct 31, 2023 ... What private key is it expecting? How to get it? We are now unable to upload our new bundle to update the app and the deadline is already here.\n\n- [How to convert a .p12 certificate to use with Google Play App ...](https://github.com/airsdk/Adobe-Runtime-Support/discussions/3405)\n  pem: This is simply the public key file I download from Google console, right? ... file generated that I would then upload to Google Play Console. So, a ...\n\n- [Create and delete service account keys - Google Cloud](https://cloud.google.com/iam/docs/keys-create-delete)\n  Set up authentication. Select the tab for how you plan to use the samples on this page: Console More.\n\n- [Build an AAB file ready for uploading to the Google Play Console ...](https://github.com/MonoGame/MonoGame/discussions/8134)\n  I uploaded some apps before in the pre AAB Format time, so when simple APKs where a thing :) Now I know there is a tool for that now \&quot;bundletool\&quot; I think which ...&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01VySycNFejZQrv7PdvGPatX&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:3,&quot;currentWorkingDirectory&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing&quot;}}}],&quot;timestamp&quot;:&quot;2025-07-05T04:19:26.163Z&quot;,&quot;response_text&quot;:&quot;Let me get more specific information about the PEPK tool and the correct upload process:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;6a4b34aa-6034-4070-84dd-3d481179dadc&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01KQ9k1CXZDjqzQsfsyXjJPv&quot;,&quot;tool_name&quot;:&quot;web-fetch&quot;,&quot;input_json&quot;:&quot;{\&quot;url\&quot;: \&quot;https://stackoverflow.com/questions/76580388/the-private-key-was-not-properly-encrypted-or-is-not-a-type-of-key-we-support-w\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me fetch more detailed information about the correct PEPK usage:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;- [Google Play Upload: The private key was not properly encrypted or ...](https://www.b4x.com/android/forum/threads/google-play-upload-the-private-key-was-not-properly-encrypted-or-is-not-a-type-of-key-we-support.128077/)\n  Feb 26, 2021 ... I receive an error message on the Google Play Console: \&quot;The private key was not properly encrypted or is not a type of key we support.\&quot;\n\n- [android - .net maui Play app signing The private key was not ...](https://stackoverflow.com/questions/79289401/net-maui-play-app-signing-the-private-key-was-not-properly-encrypted-or-is-not)\n  Dec 17, 2024 ... pem file that it generated, and I get the error message, \&quot;The private key was not properly encrypted, or is not a type of key we support.\&quot; I ...\n\n- [Do we need to create New keystore for google app signing (app ...](https://www.b4x.com/android/forum/threads/do-we-need-to-create-new-keystore-for-google-app-signing-app-bundle.128461/)\n  Mar 9, 2021 ... ... upload key with the pepk.jar ... Google Play Upload: The private key was not properly encrypted or is not a type of key we support.\n\n- [Need help with signing update for Google Play android app : r ...](https://www.reddit.com/r/gamemaker/comments/1bcv5tc/need_help_with_signing_update_for_google_play/)\n  Mar 13, 2024 ... \&quot;The private key was not properly encrypted, or is not a type of key we support\&quot;. How do I fix this? Are these even the right steps ...\n\n- [java - The private key was not properly encrypted, or is not a type of ...](https://stackoverflow.com/questions/76580388/the-private-key-was-not-properly-encrypted-or-is-not-a-type-of-key-we-support-w)\n  Jun 29, 2023 ... The private key was not properly encrypted, or is not a type of key ... Uploading Android App Bundle to Google Play Console - key signing error.&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01WCgdmoJbmU9XdhKvt4EBkp&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:3,&quot;currentWorkingDirectory&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing&quot;}}}],&quot;timestamp&quot;:&quot;2025-07-05T04:19:31.430Z&quot;,&quot;response_text&quot;:&quot;Let me fetch more detailed information about the correct PEPK usage:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;6444d36b-1dd3-4e80-92e4-855e70406956&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01WJJwuKT2X9AWRAPyYCRr8o&quot;,&quot;tool_name&quot;:&quot;web-search&quot;,&quot;input_json&quot;:&quot;{\&quot;query\&quot;: \&quot;site:developer.android.com PEPK tool private key upload Google Play\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me check the Google Play documentation directly:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Just a moment...\n\nEnable JavaScript and cookies to continue&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01KQ9k1CXZDjqzQsfsyXjJPv&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:3,&quot;currentWorkingDirectory&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing&quot;}}}],&quot;timestamp&quot;:&quot;2025-07-05T04:19:39.898Z&quot;,&quot;response_text&quot;:&quot;Let me check the Google Play documentation directly:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;9a1dec39-04f7-40a7-b706-71ffdf04d948&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01Equw8BUopyuZ2EMhjpusY2&quot;,&quot;tool_name&quot;:&quot;web-fetch&quot;,&quot;input_json&quot;:&quot;{\&quot;url\&quot;: \&quot;https://developer.android.com/studio/publish/app-signing\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Let me get the official Android documentation:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;- [Sign your app | Android Studio | Android Developers](https://developer.android.com/studio/publish/app-signing)\n  Jan 24, 2025 ... ... upload key before uploading it to Google Play. If you need to ... run the PEPK tool, and upload the generated file with your encrypted key.\n\n- [App unterschreiben | Android Studio | Android Developers](https://developer.android.com/studio/publish/app-signing?hl=de)\n  Jan 24, 2025 ... Sie behalten den Uploadschlüssel und verwenden ihn, um Ihre App für den Upload in den Google Play Store zu signieren. ... PEPK-Tools und zum ...\n\n- [Cómo firmar tu app | Android Studio | Android Developers](https://developer.android.com/studio/publish/app-signing?hl=es-419)\n  Jan 24, 2025 ... Aprende conceptos importantes relacionados con la firma y la seguridad de las apps, cómo firmar tu app para publicarla en Google Play usando ...\n\n- [Signer votre application | Android Studio | Android Developers](https://developer.android.com/studio/publish/app-signing?hl=fr)\n  Jan 24, 2025 ... ... Google Play, et au service Signature d'application Play ... L'option Export encrypted key (Exporter la clé chiffrée) dans Android Studio est ...\n\n- [Menandatangani aplikasi Anda | Android Studio | Android Developers](https://developer.android.com/studio/publish/app-signing?hl=id)\n  Pilih salah satu opsi yang paling mendeskripsikan kunci penandatanganan yang ingin Anda upload ke Google Play, lalu ikuti petunjuk yang ditampilkan. ... PEPK, dan ...&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01WJJwuKT2X9AWRAPyYCRr8o&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:3,&quot;currentWorkingDirectory&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing&quot;}}}],&quot;timestamp&quot;:&quot;2025-07-05T04:19:45.665Z&quot;,&quot;response_text&quot;:&quot;Let me get the official Android documentation:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;72a9176d-9b71-4fbd-96e5-4398df9fc5d8&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01TDZqcDSRitoBUWkp7VeVbq&quot;,&quot;tool_name&quot;:&quot;web-search&quot;,&quot;input_json&quot;:&quot;{\&quot;query\&quot;: \&quot;\\\&quot;PEPK tool\\\&quot; \\\&quot;private key was not properly encrypted\\\&quot; Google Play Console fix\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;The page is in Hindi, but I can see this is the Android app signing documentation. Let me search for more specific information about the PEPK tool and the correct format:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;                अपने ऐप्लिकेशन पर हस्ताक्षर करना  |  Android Studio  |  Android Developers         [सीधे मुख्य कॉन्टेंट पर जाएं](#main-content)\n\n [![Android Developers](https://www.gstatic.com/devrel-devsite/prod/v46d043083f27fa7361aea8506dabbd161e0b84f5a7c6df8d5e3cfad447dd4376/android/images/lockup.png)](/)\n\n[इन्हें ज़रूर आज़माएं](https://developer.android.com/get-started?hl=hi)\n\n*   एआई (AI) के अनुभव बनाएं\n*   Gemini API वगैरह की मदद से, एआई की मदद से काम करने वाले Android ऐप्लिकेशन बनाएं.\n*   [\n    \n    शुरू करना\n    \n    ](https://developer.android.com/ai?hl=hi)\n\n*   शुरू करना\n*   अपना पहला ऐप्लिकेशन बनाने से शुरुआत करें. हमारे ट्रेनिंग कोर्स को अच्छी तरह से पढ़ें या खुद ही ऐप्लिकेशन डेवलपमेंट के बारे में जानें.\n*   [\n    \n    नमस्ते दुनिया\n    \n    ](https://developer.android.com/get-started/overview?hl=hi)\n*   [\n    \n    ट्रेनिंग कोर्स\n    \n    ](https://developer.android.com/courses?hl=hi)\n*   [\n    \n    ट्यूटोरियल\n    \n    ](https://developer.android.com/get-started/codelabs?hl=hi)\n*   [\n    \n    टीमों के लिए कॉम्पोज़ करना\n    \n    ](https://developer.android.com/develop/ui/compose/adopt?hl=hi)\n*   [\n    \n    Android के लिए Kotlin\n    \n    ](https://developer.android.com/kotlin?hl=hi)\n*   [\n    \n    Play की मदद से कमाई करना ⬇️\n    \n    ](https://play.google.com/console/about/guides/play-commerce/?hl=hi)\n\n*   डिवाइस के हिसाब से ऐक्सेस की समयसीमा बढ़ाना\n*   ऐसे ऐप्लिकेशन बनाएं जिनसे आपके उपयोगकर्ताओं को फ़ोन से लेकर टैबलेट, स्मार्टवॉच, हेडसेट वगैरह पर आसानी से अनुभव मिल सके.\n*   [\n    \n    ज़रूरत के हिसाब से काम करने वाले ऐप्लिकेशन\n    \n    ](https://developer.android.com/adaptive-apps?hl=hi)\n*   [\n    \n    Android XR\n    \n    ](https://developer.android.com/xr?hl=hi)\n*   [\n    \n    Wear OS\n    \n    ](https://developer.android.com/wear?hl=hi)\n*   [\n    \n    कार के लिए Android\n    \n    ](https://developer.android.com/cars?hl=hi)\n*   [\n    \n    Android TV\n    \n    ](https://developer.android.com/tv?hl=hi)\n*   [\n    \n    ChromeOS\n    \n    ](https://developer.android.com/chrome-os?hl=hi)\n\n*   कैटगरी के हिसाब से बनाएं\n*   Google के दिशा-निर्देशों का पालन करके, अपने इस्तेमाल के उदाहरण के लिए मॉडल बनाने का तरीका जानें.\n*   [\n    \n    गेम\n    \n    ](https://developer.android.com/games?hl=hi)\n*   [\n    \n    कैमरा और मीडिया\n    \n    ](https://developer.android.com/media?hl=hi)\n*   [\n    \n    सोशल मीडिया और मैसेज सेवा\n    \n    ](https://developer.android.com/social-and-messaging?hl=hi)\n*   [\n    \n    सेहत और फ़िटनेस वाले ऐप्लिकेशन\n    \n    ](https://developer.android.com/health-and-fitness?hl=hi)\n*   [\n    \n    फ़ायदे पाना\n    \n    ](https://developer.android.com/productivity?hl=hi)\n*   [\n    \n    एंटरप्राइज़ ऐप्लिकेशन\n    \n    ](https://developer.android.com/work/overview?hl=hi)\n\n*   नवीनतम प्राप्त करें\n*   साल भर नई रिलीज़ के बारे में जानने के लिए संपर्क में रहें, झलक दिखाने वाले हमारे प्रोग्राम में शामिल हों, और हमें अपने सुझाव दें.\n*   [\n    \n    नए अपडेट\n    \n    ](https://developer.android.com/latest-updates?hl=hi)\n*   [\n    \n    एक्सपेरिमेंट के तौर पर किए गए अपडेट\n    \n    ](https://developer.android.com/latest-updates/experimental?hl=hi)\n*   [\n    \n    Android Studio की झलक\n    \n    ](https://developer.android.com/studio/preview?hl=hi)\n*   [\n    \n    जेटपैक और लाइब्रेरी कंपोज़ करें\n    \n    ](https://developer.android.com/jetpack/androidx/versions?hl=hi)\n*   [\n    \n    Wear OS रिलीज़\n    \n    ](https://developer.android.com/training/wearables/versions/latest?hl=hi)\n*   [\n    \n    प्राइवसी सैंडबॉक्स ↗️\n    \n    ](https://developer.android.com/design-for-safety/privacy-sandbox?hl=hi)\n\n[डिज़ाइन और प्लान](https://developer.android.com/design?hl=hi)\n\n*   बेहतरीन अनुभव\n*   अपने सबसे अच्छे उपयोगकर्ताओं को बेहतरीन अनुभव दें.\n*   [\n    \n    ज़्यादा जानें\n    \n    ](https://developer.android.com/quality/excellent?hl=hi)\n\n*   यूज़र इंटरफ़ेस (यूआई) डिज़ाइन\n*   Android के सबसे सही तरीकों का इस्तेमाल करके, खूबसूरत यूज़र इंटरफ़ेस डिज़ाइन करें.\n*   [\n    \n    Android के लिए डिज़ाइन\n    \n    ](https://developer.android.com/design/ui?hl=hi)\n*   [\n    \n    मोबाइल\n    \n    ](https://developer.android.com/design/ui/mobile?hl=hi)\n*   [\n    \n    अडैप्टिव यूज़र इंटरफ़ेस (यूआई)\n    \n    ](https://developer.android.com/design/ui/large-screens?hl=hi)\n*   [\n    \n    Android XR\n    \n    ](https://developer.android.com/design/ui/xr?hl=hi)\n*   [\n    \n    विजेट\n    \n    ](https://developer.android.com/design/ui/widget?hl=hi)\n*   [\n    \n    Wear OS\n    \n    ](https://developer.android.com/design/ui/wear?hl=hi)\n*   [\n    \n    Android TV\n    \n    ](https://developer.android.com/design/ui/tv?hl=hi)\n\n*   भवन निर्माण\n*   ऐप्लिकेशन लॉजिक और सेवाएं मज़बूत, जांच करने लायक, और मैनेज किए जा सकने वाले हों.\n*   [\n    \n    शुरुआती जानकारी\n    \n    ](https://developer.android.com/topic/architecture/intro?hl=hi)\n*   [\n    \n    पुस्तकालय\n    \n    ](https://developer.android.com/topic/libraries/view-binding?hl=hi)\n*   [\n    \n    नेविगेशन\n    \n    ](https://developer.android.com/guide/navigation/navigation-principles?hl=hi)\n*   [\n    \n    मॉड्यूलराइज़ेशन\n    \n    ](https://developer.android.com/topic/modularization?hl=hi)\n*   [\n    \n    टेस्ट करना\n    \n    ](https://developer.android.com/training/testing/fundamentals?hl=hi)\n\n*   गुणवत्ता\n*   ऐप्लिकेशन की क्वालिटी के लिए प्लान बनाएं और Play Store के दिशा-निर्देशों के मुताबिक हों.\n*   [\n    \n    खास जानकारी\n    \n    ](https://developer.android.com/quality?hl=hi)\n*   [\n    \n    मुख्य वैल्यू\n    \n    ](https://developer.android.com/quality/core-value?hl=hi)\n*   [\n    \n    उपयोगकर्ता अनुभव\n    \n    ](https://developer.android.com/quality/user-experience?hl=hi)\n*   [\n    \n    पहुंच-योग्यता\n    \n    ](https://developer.android.com/guide/topics/ui/accessibility?hl=hi)\n*   [\n    \n    तकनीकी क्वालिटी\n    \n    ](https://developer.android.com/quality/technical?hl=hi)\n*   [\n    \n    बेहतरीन अनुभव\n    \n    ](https://developer.android.com/quality/excellent?hl=hi)\n\n*   सुरक्षा\n*   ऐप्लिकेशन इस्तेमाल करने वाले लोगों को खतरों से सुरक्षित रखते हैं. साथ ही, Android का सुरक्षित अनुभव देते हैं.\n*   [\n    \n    खास जानकारी\n    \n    ](https://developer.android.com/security?hl=hi)\n*   [\n    \n    निजता\n    \n    ](https://developer.android.com/privacy-and-security/about?hl=hi)\n*   [\n    \n    अनुमतियां\n    \n    ](https://developer.android.com/guide/topics/permissions/overview?hl=hi)\n*   [\n    \n    पहचान\n    \n    ](https://developer.android.com/identity?hl=hi)\n*   [\n    \n    धोखाधड़ी से बचाव\n    \n    ](https://developer.android.com/security/fraud-prevention?hl=hi)\n\n[कॉन्टेंट बनाना](https://developer.android.com/develop?hl=hi)\n\n*   Android Studio में Gemini\n*   Android ऐप्लिकेशन को बेहतर बनाने के लिए, आपका एआई डेवलपमेंट साथी.\n*   [\n    \n    ज़्यादा जानें\n    \n    ](https://developer.android.com/gemini-in-android?hl=hi)\n*   [\n    \n    Android Studio डाउनलोड करें\n    \n    ](https://developer.android.com/studio?hl=hi)\n\n*   मुख्य जगहें\n*   अपनी ज़रूरत की सुविधाओं के सैंपल और दस्तावेज़ पाएं.\n*   [\n    \n    सैंपल\n    \n    ](https://developer.android.com/samples?hl=hi)\n*   [\n    \n    यूज़र इंटरफ़ेस\n    \n    ](https://developer.android.com/develop/ui?hl=hi)\n*   [\n    \n    बैकग्राउंड में हो रहा काम\n    \n    ](https://developer.android.com/develop/background-work?hl=hi)\n*   [\n    \n    डेटा और फ़ाइलें\n    \n    ](https://developer.android.com/guide/topics/data?hl=hi)\n*   [\n    \n    कनेक्टिविटी\n    \n    ](https://developer.android.com/develop/connectivity?hl=hi)\n*   [\n    \n    सभी मुख्य इलाके ⤵️\n    \n    ](https://developer.android.com/develop?hl=hi#core-areas)\n\n*   टूल और वर्कफ़्लो\n*   अपने ऐप्लिकेशन को लिखने और बनाने के लिए, IDE का इस्तेमाल करें या अपनी पाइपलाइन बनाएं.\n*   [\n    \n    कोड लिखना और डीबग करना\n    \n    ](https://developer.android.com/studio/write?hl=hi)\n*   [\n    \n    प्रोजेक्ट बनाएं\n    \n    ](https://developer.android.com/build/gradle-build-overview?hl=hi)\n*   [\n    \n    अपने ऐप्लिकेशन का परीक्षण करें\n    \n    ](https://developer.android.com/training/testing?hl=hi)\n*   [\n    \n    परफ़ॉर्मेंस मोड\n    \n    ](https://developer.android.com/topic/performance/overview?hl=hi)\n*   [\n    \n    कमांड-लाइन टूल\n    \n    ](https://developer.android.com/tools?hl=hi)\n*   [\n    \n    Gradle प्लग इन एपीआई\n    \n    ](https://developer.android.com/reference/tools/gradle-api?hl=hi)\n\n*   डिवाइस की तकनीक\n*   डिवाइस के नाप या आकार के लिए कोड लिखें. डिवाइसों को कनेक्ट करें और डेटा शेयर करें.\n*   [\n    \n    अडैप्टिव यूज़र इंटरफ़ेस (यूआई)\n    \n    ](https://developer.android.com/guide/topics/large-screens/get-started-with-large-screens?hl=hi)\n*   [\n    \n    Wear OS\n    \n    ](https://developer.android.com/training/wearables?hl=hi)\n*   [\n    \n    Android XR\n    \n    ](https://developer.android.com/develop/xr?hl=hi)\n*   [\n    \n    Android Health\n    \n    ](https://developer.android.com/health-and-fitness/guides?hl=hi)\n*   [\n    \n    कार के लिए Android\n    \n    ](https://developer.android.com/training/cars?hl=hi)\n*   [\n    \n    Android TV\n    \n    ](https://developer.android.com/training/tv?hl=hi)\n*   [\n    \n    सभी डिवाइस ⤵️\n    \n    ](https://developer.android.com/develop?hl=hi#devices)\n\n*   पुस्तकालय\n*   पूरी जानकारी के साथ एपीआई के रेफ़रंस दस्तावेज़ ब्राउज़ करें.\n*   [\n    \n    Android प्लैटफ़ॉर्म\n    \n    ](https://developer.android.com/reference/packages?hl=hi)\n*   [\n    \n    जेटपैक लाइब्रेरी\n    \n    ](https://developer.android.com/jetpack/androidx/explorer?hl=hi)\n*   [\n    \n    लाइब्रेरी कंपोज़ करें\n    \n    ](https://developer.android.com/jetpack/androidx/releases/compose?hl=hi)\n*   [\n    \n    Google Play सेवाएं ☂️\n    \n    ](https://developers.google.com/android/reference/packages?hl=hi)\n*   [\n    \n    Google Play SDK इंडेक्स ⬇️\n    \n    ](https://play.google.com/sdks?hl=hi)\n\n[Google Play](https://developer.android.com/distribute?hl=hi) [कम्यूनिटी](https://developer.android.com/community?hl=hi)\n\n/\n\n*   English\n*   Deutsch\n*   Español – América Latina\n*   Français\n*   Indonesia\n*   Italiano\n*   Polski\n*   Português – Brasil\n*   Tiếng Việt\n*   Türkçe\n*   Русский\n*   עברית\n*   العربيّة\n*   فارسی\n*   हिंदी\n*   বাংলা\n*   ภาษาไทย\n*   中文 – 简体\n*   中文 – 繁體\n*   日本語\n*   한국어\n\n[Android Studio](https://developer.android.com/studio?hl=hi) प्रवेश करें\n\n*   [Android Studio](https://developer.android.com/studio?hl=hi)\n\n[डाउनलोड करें](https://developer.android.com/studio?hl=hi) [आईडीई से जुड़ी गाइड](https://developer.android.com/studio/intro?hl=hi) [Android Studio में Gemini](https://developer.android.com/gemini-in-android?hl=hi) [कारोबारों के लिए Gemini](https://developer.android.com/gemini-for-businesses?hl=hi) [प्रॉम्प्ट गैलरी](https://developer.android.com/studio/prompt-gallery?hl=hi) [Gradle बिल्ड से जुड़ी गाइड](https://developer.android.com/build/gradle-build-overview?hl=hi) [SDK टूल से जुड़ी गाइड](https://developer.android.com/tools?hl=hi) [रिलीज़ से पहले झलक देखने के लिए बनाया गया वर्शन](https://developer.android.com/studio/preview?hl=hi) [![Android Developers](https://www.gstatic.com/devrel-devsite/prod/v46d043083f27fa7361aea8506dabbd161e0b84f5a7c6df8d5e3cfad447dd4376/android/images/lockup.png)](/)\n\n*   [इन्हें ज़रूर आज़माएं](/get-started)\n    *   और देखें\n*   [डिज़ाइन और प्लान](/design)\n    *   और देखें\n*   [कॉन्टेंट बनाना](/develop)\n    \n    *   और देखें\n    \n    *   [डाउनलोड करें](/studio)\n    *   [आईडीई से जुड़ी गाइड](/studio/intro)\n    *   [Android Studio में Gemini](/gemini-in-android)\n    *   [कारोबारों के लिए Gemini](/gemini-for-businesses)\n    *   [प्रॉम्प्ट गैलरी](/studio/prompt-gallery)\n    *   [Gradle बिल्ड से जुड़ी गाइड](/build/gradle-build-overview)\n    *   [SDK टूल से जुड़ी गाइड](/tools)\n    *   [रिलीज़ से पहले झलक देखने के लिए बनाया गया वर्शन](/studio/preview)\n*   [Google Play](/distribute)\n*   [कम्यूनिटी](/community)\n*   [Android Studio](/studio)\n\n*   Android Studio में नया क्या है\n    \n    *   [Android Studio में Meerkat की सुविधाओं के रिलीज़ नोट](/studio/releases)\n    *   [Android Emulator की जानकारी](/studio/releases/emulator)\n    *   [Android Studio की पिछली रिलीज़](/studio/releases/past-releases)\n    *   [Android Studio के रिलीज़ के नाम](/studio/releases/studio-release-names)\n    *   सेवा के इंटिग्रेशन\n        \n        *   [खास जानकारी](/studio/services)\n        *   [बंद किए गए सेवा इंटिग्रेशन](/studio/services/deprecated)\n        \n    \n*   Android Studio में Gemini\n    \n    *   [Gemini से मिलें](/studio/preview/gemini)\n    *   [Gemini की सुविधाएं](/studio/preview/gemini/features)\n    *   [कारोबारों के लिए Gemini](/studio/preview/gemini/gemini-for-businesses)\n    *   [Gemini से जवाब पाना](/studio/preview/gemini/chat)\n    *   [एजेंट मोड](/studio/preview/gemini/agent-mode)\n    *   [एआई की मदद से कोडिंग करें](/studio/preview/gemini/ai-code-completion)\n    *   [कोड को फिर से बनाना](/studio/preview/gemini/organize)\n    *   [Compose में एआई की मदद से टेक्स्ट लिखने की सुविधा](/studio/preview/gemini/compose)\n    *   [जांच करना और डीबग करना](/studio/preview/gemini/deploy)\n    *   [दस्तावेज़ का कोड और कमिट](/studio/preview/gemini/document)\n    *   [प्रॉम्प्ट गैलरी](/studio/prompt-gallery)\n    *   [Studio Labs](/studio/preview/gemini/labs)\n    *   [डेटा और निजता](/studio/preview/gemini/data-and-privacy)\n    *   [कॉन्टेक्स्ट शेयर करने की सुविधा कॉन्फ़िगर करें](/studio/preview/gemini/aiexclude)\n    *   [उपलब्धता](/studio/preview/gemini/availability)\n    \n*   Android Studio का इस्तेमाल शुरू करना\n    \n    *   [खास जानकारी](/studio/intro)\n    *   [Android Studio इंस्टॉल करें](/studio/install)\n    *   [Android Studio में नया यूज़र इंटरफ़ेस](/studio/intro/new-ui)\n    *   यूज़र इंटरफ़ेस (यूआई) के बारे में जानें\n        \n        *   [खास जानकारी](/studio/intro/user-interface)\n        *   [पहुंच-योग्यता सुविधाएं](/studio/intro/accessibility)\n        *   [कीबोर्ड शॉर्टकट](/studio/intro/keyboard-shortcuts)\n        \n    *   [वर्कफ़्लो की बुनियादी बातें](/studio/workflow)\n    \n*   अपना प्रोजेक्ट मैनेज करें\n    \n    *   [खास जानकारी](/studio/projects)\n    *   [प्रोजेक्ट बनाएं](/studio/projects/create-project)\n    *   [Android Studio पर माइग्रेट करना](/studio/intro/migrate)\n    *   [वर्शन कंट्रोल से जुड़ी बुनियादी बातें](/studio/projects/version-control)\n    *   [IDE कॉन्फ़िगर करें](/studio/intro/studio-config)\n    *   [IDE और टूल को अपडेट करें](/studio/intro/update)\n    *   [Play Feature Delivery के बारे में जानकारी](/guide/app-bundle/dynamic-delivery)\n    *   C और C++ कोड जोड़ें\n        \n        *   [खास जानकारी](/studio/projects/add-native-code)\n        *   [NDK और CMake इंस्टॉल करें](/studio/projects/install-ndk)\n        *   [AGP के लिए एनडीके (NDK) कॉन्फ़िगर करें](/studio/projects/configure-agp-ndk)\n        *   [CMake की सुविधा कॉन्फ़िगर करें](/studio/projects/configure-cmake)\n        *   [लिंक Gradle](/studio/projects/gradle-external-native-builds)\n        \n    *   [Android लाइब्रेरी बनाना](/studio/projects/android-library)\n    *   [इंटिग्रेशन बनाए रखने की सुविधा सेट अप करना](/studio/projects/continuous-integration)\n    \n*   अपना कोड लिखना\n    \n    *   [कोड को जल्दी और बेहतर तरीके से लिखना](/studio/write)\n    *   टेंप्लेट की मदद से काम करना\n        \n        *   [किसी टेंप्लेट से कोड जोड़ें](/studio/projects/templates)\n        *   [सैंपल कोड ढूंढें](/studio/write/sample-code)\n        *   [Java की क्लास या टाइप बनाना](/studio/write/create-java-class)\n        \n    *   [नए डिवाइस के लिए मॉड्यूल जोड़ें](/studio/projects/add-app-module)\n    *   [Java 8 भाषा सुविधाओं का उपयोग करें](/studio/write/java8-support)\n    *   [Java 8 लैंग्वेज की सहायता वाली टेबल](/studio/write/java8-support-table)\n    *   [ऐप्लिकेशन के संसाधन जोड़ें](/studio/write/add-resources)\n    *   यूज़र इंटरफ़ेस (यूआई) डेवलप करने के लिए टूल का इस्तेमाल करना\n        \n        *   [Compose का इस्तेमाल करके लेआउट बनाना](/jetpack/compose/tooling/previews)\n        *   [व्यू के साथ लेआउट तैयार करना](/studio/write/layout-editor)\n... additional lines truncated ...\n*   [Google Play सेवाएं ☂️](https://developers.google.com/android/reference/packages)\n*   [Google Play SDK इंडेक्स ⬇️](https://play.google.com/sdks)\n\n ![](https://developer.android.com/_static/images/translated.svg?hl=hi) इस पेज का अनुवाद [Cloud Translation API](//cloud.google.com/translate/?hl=hi) से किया गया है.\n\n*   [Android Developers](https://developer.android.com/?hl=hi)\n*   [कॉन्टेंट बनाना](https://developer.android.com/develop?hl=hi)\n*   [Android Studio](https://developer.android.com/studio?hl=hi)\n*   [आईडीई से जुड़ी गाइड](https://developer.android.com/studio/intro?hl=hi)\n\nअपने ऐप्लिकेशन पर हस्ताक्षर करना\n\nसंग्रह की मदद से व्यवस्थित रहें अपनी प्राथमिकताओं के आधार पर, कॉन्टेंट को सेव करें और कैटगरी में बांटें.\n\n\n============================================================================================================================================\n\nAndroid पर इंस्टॉल किए जाने या अपडेट किए जाने से पहले, यह ज़रूरी है कि सभी APKs पर एक सर्टिफ़िकेट के साथ डिजिटल रूप से साइन किया जाए. [Android ऐप्लिकेशन बंडल](https://developer.android.com/guide/app-bundle?hl=hi) का इस्तेमाल करके रिलीज़ करते समय, आपको Play Console में अपलोड करने से पहले, अपने ऐप्लिकेशन बंडल पर अपलोड कुंजी से साइन करना होगा. इसके बाद, Play ऐप्लिकेशन साइनिंग की सुविधा बाकी काम करेगी. Play Store या अन्य स्टोर पर APKs का इस्तेमाल करके डिस्ट्रिब्यूट किए जाने वाले ऐप्लिकेशन के लिए, आपको अपलोड करने के लिए अपने APKs को मैन्युअल तरीके से साइन करना होगा.\n\nइस पेज पर, ऐप्लिकेशन साइनिंग और सुरक्षा से जुड़े कुछ अहम कॉन्सेप्ट के बारे में बताया गया है. साथ ही, Android Studio का इस्तेमाल करके Google Play पर रिलीज़ करने के लिए, अपने ऐप्लिकेशन को साइन करने का तरीका और Play ऐप्लिकेशन साइनिंग को कॉन्फ़िगर करने का तरीका भी बताया गया है.\n\nयहां Google Play पर नया ऐप्लिकेशन साइन इन करने और पब्लिश करने के लिए, ज़रूरी चरणों की खास जानकारी दी गई है:\n\n1.  [अपलोड पासकोड और कीस्टोर जनरेट करना](#generate-key)\n2.  [अपने अपलोड पासकोड से ऐप्लिकेशन पर हस्ताक्षर करना](#sign_release)\n3.  [Play ऐप्लिकेशन साइनिंग की सुविधा को कॉन्फ़िगर करना](#enroll)\n4.  [Google Play पर अपना ऐप्लिकेशन अपलोड करना](https://developer.android.com/studio/publish/upload-bundle?hl=hi)\n5.  [अपने ऐप्लिकेशन की रिलीज़ तैयार करना और उसे रोल आउट करना](https://support.google.com/googleplay/android-developer/answer/7159011?hl=hi)\n\nअगर आपका ऐप्लिकेशन, पहले से ही Google Play Store पर किसी मौजूदा ऐप्लिकेशन साइनिंग पासकोड के साथ पब्लिश किया गया है या आपको Google से ऐप्लिकेशन साइनिंग पासकोड जनरेट कराने के बजाय, किसी नए ऐप्लिकेशन के लिए खुद से ऐप्लिकेशन साइनिंग पासकोड चुनना है, तो यह तरीका अपनाएं:\n\n1.  अपने ऐप्लिकेशन की _साइनिंग पासकोड_ से, [अपने ऐप्लिकेशन पर हस्ताक्षर करें](#sign_release).\n2.  Play ऐप्लिकेशन साइनिंग की सुविधा में, [अपने ऐप्लिकेशन की साइनिंग पासकोड अपलोड करें](#enroll_existing).\n3.  (सुझाया गया) अपने ऐप्लिकेशन के आने वाले अपडेट के लिए, [अपलोड सर्टिफ़िकेट जनरेट और रजिस्टर करें](#generate-key)\n4.  [Google Play पर अपना ऐप्लिकेशन अपलोड करना](https://developer.android.com/studio/publish/upload-bundle?hl=hi)\n5.  [अपने ऐप्लिकेशन की रिलीज़ तैयार करना और उसे रोल आउट करना](https://support.google.com/googleplay/android-developer/answer/7159011?hl=hi)\n\nइस पेज पर, अन्य ऐप स्टोर पर अपना ऐप्लिकेशन अपलोड करते समय, अपनी पासकोड मैनेज करने का तरीका भी बताया गया है. अगर Android Studio का इस्तेमाल नहीं किया जा रहा है या आपको कमांड लाइन से अपने ऐप्लिकेशन को साइन करना है, तो [`apksigner`](https://developer.android.com/studio/command-line/apksigner?hl=hi) का इस्तेमाल करने का तरीका जानें.\n\n**ध्यान दें:** अगर कोई Wear OS ऐप्लिकेशन बनाया जा रहा है, तो ऐप्लिकेशन पर हस्ताक्षर करने की प्रोसेस, इस पेज पर बताई गई प्रोसेस से अलग हो सकती है. [Wear OS ऐप्लिकेशन को पैकेज करने और पब्लिश करने](https://developer.android.com/training/wearables/apps/packaging?hl=hi) के बारे में जानकारी देखें.\n\nPlay ऐप्लिकेशन साइनिंग की सुविधा\n--------------------------------\n\nPlay ऐप्लिकेशन साइनिंग की मदद से, Google आपके ऐप्लिकेशन के साइनिंग पासकोड को मैनेज करता है और उसे सुरक्षित रखता है. साथ ही, इसका इस्तेमाल डिस्ट्रिब्यूशन के लिए आपके APK को साइन करने के लिए करता है. साथ ही, ऐप्लिकेशन बंडल, Google Play Store पर APKs बनाने और उन पर हस्ताक्षर करने की प्रोसेस को बाद के लिए छोड़ देते हैं. इसलिए, आपको अपना ऐप्लिकेशन बंडल अपलोड करने से पहले, Play ऐप्लिकेशन साइनिंग को कॉन्फ़िगर करना होगा. ऐसा करने पर, आपको ये फ़ायदे मिलेंगे:\n\n*   Android ऐप्लिकेशन बंडल का इस्तेमाल करें और Google Play के बेहतर डिलीवरी मोड के साथ काम करें. Android ऐप्लिकेशन बंडल की मदद से, आपके ऐप्लिकेशन का साइज़ बहुत कम हो जाता है और रिलीज़ करना आसान हो जाता है. साथ ही, इससे सुविधा वाले मॉड्यूल का इस्तेमाल किया जा सकता है और उपयोगकर्ताओं को ऐप्लिकेशन का तुरंत इस्तेमाल करने का अनुभव दिया जा सकता है.\n*   अपने साइनिंग पासकोड की सुरक्षा बढ़ाएं. साथ ही, Google Play पर अपलोड किए जाने वाले ऐप्लिकेशन बंडल पर साइन करने के लिए, अलग अपलोड पासकोड का इस्तेमाल करें.\n*   कुंजी को अपग्रेड करने की सुविधा की मदद से, ऐप्लिकेशन साइनिंग कुंजी को बदला जा सकता है. ऐसा तब करना पड़ता है, जब आपकी मौजूदा कुंजी से छेड़छाड़ की गई हो या आपको क्रिप्टोग्राफ़िक तरीके से ज़्यादा सुरक्षित कुंजी पर माइग्रेट करना हो\n    \n    **ध्यान दें:** सुरक्षा को पक्का करने के लिए, अपने-आप जनरेट हुई कुंजी या आपके दी गई कुंजी से Play ऐप्लिकेशन साइनिंग को कॉन्फ़िगर करने के बाद, अपने ऐप्लिकेशन की साइनिंग कुंजी की कॉपी वापस नहीं पाई जा सकती. साथ ही, Google आपातकालीन स्थिति में ऐप्लिकेशन को वापस लाने के लिए, कुंजी की बैकअप कॉपी सेव रख सकता है.\n    \n\nPlay ऐप्लिकेशन साइनिंग में दो पासकोड का इस्तेमाल किया जाता है: _ऐप्लिकेशन साइनिंग पासकोड_ और _अपलोड पासकोड_. इनके बारे में ज़्यादा जानकारी, [पासकोड और पासकोड स्टोर](#certificates-keystores) सेक्शन में दी गई है. अपलोड पासकोड आपके पास रहता है. इसका इस्तेमाल, Google Play Store पर अपलोड करने के लिए, अपने ऐप्लिकेशन पर साइन करने के लिए किया जाता है. Google आपकी पहचान की पुष्टि करने के लिए, अपलोड सर्टिफ़िकेट का इस्तेमाल करता है. साथ ही, डिस्ट्रिब्यूशन के लिए आपके APK पर, ऐप्लिकेशन साइनिंग पासकोड से हस्ताक्षर करता है. इस बारे में पहली इमेज में बताया गया है. अगर आपका पासकोड कभी खो जाता है या उसके साथ छेड़छाड़ होती है, तो अलग अपलोड पासकोड का इस्तेमाल करके, [अपलोड पासकोड को रीसेट करने का अनुरोध](https://support.google.com/googleplay/android-developer/answer/7384423?hl=hi#reset) किया जा सकता है.\n\nइसकी तुलना में, Play ऐप्लिकेशन साइनिंग की सुविधा के लिए ऑप्ट इन न करने वाले ऐप्लिकेशन के लिए, अगर आपके ऐप्लिकेशन की साइनिंग पासकोड खो जाती है, तो आपके पास अपने ऐप्लिकेशन को अपडेट करने का विकल्प नहीं होगा.\n\n**अहम जानकारी:** अगर आपको एक ही साइनिंग पासकोड का इस्तेमाल कई स्टोर पर करना है, तो [Play ऐप्लिकेशन साइनिंग को कॉन्फ़िगर](#enroll) करते समय, Google से पासकोड जनरेट कराने के बजाय, खुद का पासकोड दें.\n\n![](https://developer.android.com/static/studio/images/publish/appsigning_googleplayappsigningdiagram_2x.png?hl=hi)\n\n**पहली इमेज**. Play ऐप्लिकेशन साइनिंग की मदद से ऐप्लिकेशन को साइन करना\n\nआपके पासकोड उसी इन्फ़्रास्ट्रक्चर पर सेव किए जाते हैं जिसका इस्तेमाल Google अपनी पासकोड सेव करने के लिए करता है. यहां उन्हें Google की 'क्रिप्टोग्राफ़िक पासकोड के लिए मैनेजमेंट सेवा' की मदद से सुरक्षित रखा जाता है. [Google Cloud की सुरक्षा से जुड़े व्हाइट पेपर](https://services.google.com/fh/files/misc/security_whitepapers_march2018.pdf?hl=hi) पढ़कर, Google के तकनीकी इन्फ़्रास्ट्रक्चर के बारे में ज़्यादा जानें.\n\n'Play ऐप्लिकेशन साइनिंग' का इस्तेमाल करने पर, अगर आपका अपलोड पासकोड खो जाता है या फिर उसके साथ छेड़छाड़ होती है, तो Play Console में जाकर अपलोड पासकोड को रीसेट करने का अनुरोध किया जा सकता है. आपके ऐप्लिकेशन साइनिंग पासकोड को Google सुरक्षित रखता है. इसलिए, अपलोड पासकोड बदलने के बाद भी, अपने ऐप्लिकेशन के नए वर्शन को ओरिजनल ऐप्लिकेशन के अपडेट के तौर पर अपलोड किया जा सकता है. ज़्यादा जानने के लिए, [खोए हुए या हैक किए गए निजी अपलोड पासकोड को रीसेट करना](#reset_upload_key) लेख पढ़ें.\n\nअगले सेक्शन में, ऐप्लिकेशन को साइन करने और उसकी सुरक्षा से जुड़े कुछ अहम शब्दों और कॉन्सेप्ट के बारे में बताया गया है. अगर आपको सीधे Google Play Store पर अपलोड करने के लिए, अपने ऐप्लिकेशन को तैयार करने का तरीका जानना है, तो [रिलीज़ के लिए अपने ऐप्लिकेशन पर हस्ताक्षर करें](#sign-apk) पर जाएं.\n\n### कीस्टोर, कुंजियां, और सर्टिफ़िकेट\n\nJava कीस्टोर (.jks या .keystore), बाइनरी फ़ाइलें होती हैं. ये सर्टिफ़िकेट और निजी पासकोड के डेटा स्टोर करने की जगह के तौर पर काम करती हैं.\n\n**सार्वजनिक पासकोड का सर्टिफ़िकेट** (`.der` या `.pem` फ़ाइलें), जिसे डिजिटल सर्टिफ़िकेट या पहचान सर्टिफ़िकेट भी कहा जाता है. इसमें सार्वजनिक/निजी पासकोड के जोड़े की सार्वजनिक पासकोड के साथ-साथ, उस निजी पासकोड के मालिक की पहचान करने वाला कुछ अन्य मेटाडेटा (उदाहरण के लिए, नाम और जगह) भी शामिल होता है.\n\nयहां अलग-अलग तरह की कुंजियों के बारे में बताया गया है:\n\n*   **ऐप्लिकेशन साइनिंग पासकोड:** इस पासकोड का इस्तेमाल, उपयोगकर्ता के डिवाइस पर इंस्टॉल किए गए APKs साइन करने के लिए किया जाता है. Android के सुरक्षित अपडेट मॉडल के तहत, आपके ऐप्लिकेशन के लाइफ़टाइम के दौरान साइनिंग पासकोड कभी नहीं बदलता. ऐप्लिकेशन साइनिंग पासकोड निजी होता है और इसे गुप्त रखना ज़रूरी है. हालांकि, ऐप्लिकेशन साइनिंग पासकोड का इस्तेमाल करके जनरेट किया गया सर्टिफ़िकेट शेयर किया जा सकता है.\n*   **अपलोड पासकोड:** इस पासकोड का इस्तेमाल, [Google Play की ऐप्लिकेशन साइनिंग](#app-signing-google-play) के लिए अपलोड करने से पहले, ऐप्लिकेशन बंडल या APK पर साइन करने के लिए किया जाता है. आपको 'अपलोड की कुंजी' को गुप्त रखना होगा. हालांकि, अपलोड पासकोड का इस्तेमाल करके जनरेट किया गया सर्टिफ़िकेट शेयर किया जा सकता है. अपलोड पासकोड जनरेट करने के लिए, इनमें से कोई एक तरीका अपनाएं:\n    \n    *   अगर आपने ऑप्ट इन करते समय, Google को ऐप्लिकेशन साइनिंग पासकोड जनरेट करने का विकल्प चुना है, तो [रिलीज़ के लिए अपने ऐप्लिकेशन पर हस्ताक्षर करने](#sign-apk) के लिए इस्तेमाल की गई कुंजी को अपलोड पासकोड के तौर पर सेट किया जाता है.\n    *   अगर आपने अपने नए या मौजूदा ऐप्लिकेशन के लिए ऑप्ट इन करते समय, Google को ऐप्लिकेशन साइनिंग पासकोड दिया है, तो आपके पास ज़्यादा सुरक्षा के लिए ऑप्ट इन करने के दौरान या उसके बाद, नया अपलोड पासकोड जनरेट करने का विकल्प होता है.\n    *   अगर आपने नया अपलोड पासकोड जनरेट नहीं किया है, तो हर रिलीज़ पर साइन करने के लिए, अपने ऐप्लिकेशन साइनिंग पासकोड का इस्तेमाल अपलोड पासकोड के तौर पर किया जाता रहेगा.\n    \n    **सलाह:** अपनी पासकोड को सुरक्षित रखने के लिए, यह पक्का करना अच्छा होता है कि आपका ऐप्लिकेशन साइनिंग पासकोड और अपलोड पासकोड अलग-अलग हों.\n    \n\n### एपीआई की सेवा देने वाली कंपनियों के साथ काम करना\n\n[Play Console](https://play.google.com/console/?hl=hi) में **रिलीज़ &gt; सेटअप &gt; ऐप्लिकेशन साइनिंग** पेज पर जाकर, ऐप्लिकेशन साइनिंग पासकोड और अपलोड पासकोड के लिए सर्टिफ़िकेट डाउनलोड किया जा सकता है. इसका इस्तेमाल, एपीआई की सेवा देने वाली कंपनियों के साथ सार्वजनिक कुंजी को रजिस्टर करने के लिए किया जाता है. इसे शेयर किया जा सकता है, क्योंकि इसमें आपकी निजी कुंजी शामिल नहीं होती.\n\n**सर्टिफ़िकेट फ़िंगरप्रिंट**, सर्टिफ़िकेट का छोटा और यूनीक वर्शन होता है. एपीआई सेवा देने वाली कंपनियां, अक्सर इसे पैकेज के नाम के साथ मांगती हैं, ताकि वे अपनी सेवाएं देने के लिए ऐप्लिकेशन को रजिस्टर कर सकें. अपलोड और ऐप्लिकेशन साइनिंग सर्टिफ़िकेट के एमडी5, SHA-1, और SHA-256 फ़िंगरप्रिंट देखने के लिए, Play Console के ऐप्लिकेशन साइनिंग पेज पर जाएं. ओरिजनल सर्टिफ़िकेट (`.der`) डाउनलोड करके, अन्य फ़िंगरप्रिंट भी साथ में इसी पेज पर देखे जा सकते हैं.\n\nडीबग बिल्ड पर हस्ताक्षर करना\n----------------------------\n\nआईडीई से अपने प्रोजेक्ट को चलाने या डीबग करने पर, Android Studio आपके ऐप्लिकेशन को अपने-आप डीबग सर्टिफ़िकेट से साइन करता है. यह सर्टिफ़िकेट, Android SDK टूल से जनरेट होता है. Android Studio में पहली बार प्रोजेक्ट को चलाने या डीबग करने पर, IDE अपने-आप `$HOME/.android/debug.keystore` में डीबग पासकोड और सर्टिफ़िकेट बनाता है. साथ ही, पासकोड और पासकोड की कुंजी सेट करता है.\n\n**अहम जानकारी:** ऐसा हो सकता है कि आपके प्रोजेक्ट का डिबग पासकोड, डिफ़ॉल्ट जगह पर न हो. Android Studio 2024.2.1 में, अपने प्रोजेक्ट के पासवर्ड वाले पासकोड की जगह की पुष्टि करने के लिए:\n\n1.  Gradle टूल विंडो खोलें.\n2.  अपना प्रोजेक्ट चुनें.\n3.  **app** ( **app** &gt; **tasks** &gt; **android** ) से शुरू करके, Gradle सेटिंग ट्री को बड़ा करें.\n4.  **android** में जाकर, **signingReport** को चुनें.  \n    ![बड़े किए गए प्रोजेक्ट Gradle कॉन्फ़िगरेशन ट्री का स्क्रीनशॉट](https://developer.android.com/static/studio/images/projects/project-gradle-configuration.png?hl=hi)\n5.  हस्ताक्षर करने की रिपोर्ट, सबसे नीचे मौजूद पैनल में दिखती है. **स्टोर** से शुरू होने वाली लाइन ढूंढें. इससे आपको `debug.keystore` फ़ाइल की जगह की जानकारी मिलती है.\n\nडीबग सर्टिफ़िकेट, बिल्ड टूल से बनाया जाता है और डिज़ाइन के हिसाब से यह असुरक्षित होता है. इसलिए, ज़्यादातर ऐप स्टोर (इनमें Google Play Store भी शामिल है) पब्लिश करने के लिए, डीबग सर्टिफ़िकेट से साइन किए गए ऐप्लिकेशन स्वीकार नहीं करते.\n\nAndroid Studio, डीबग साइनिंग की जानकारी को अपने-आप साइनिंग कॉन्फ़िगरेशन में सेव करता है, ताकि आपको हर बार डीबग करते समय इसे डालने की ज़रूरत न पड़े. हस्ताक्षर करने का कॉन्फ़िगरेशन एक ऐसा ऑब्जेक्ट होता है जिसमें आपके ऐप्लिकेशन पर हस्ताक्षर करने के लिए ज़रूरी सारी जानकारी होती है. इसमें कीस्टोर की जगह, कीस्टोर का पासवर्ड, कुंजी का नाम, और कुंजी का पासवर्ड शामिल होता है.\n\nडीबग करने के लिए ऐप्लिकेशन बनाने और चलाने के तरीके के बारे में ज़्यादा जानने के लिए, [अपना ऐप्लिकेशन बनाएं और चलाएं](https://developer.android.com/tools/building/building-studio?hl=hi) लेख पढ़ें.\n\n### डीबग सर्टिफ़िकेट की समयसीमा खत्म होना\n\nडीबग करने के लिए, अपने ऐप्लिकेशन पर साइन करने के लिए इस्तेमाल किए जाने वाले, खुद से हस्ताक्षर किए गए सर्टिफ़िकेट की समयसीमा, उसके बनाए जाने की तारीख से 30 साल बाद खत्म हो जाती है. सर्टिफ़िकेट की समयसीमा खत्म होने पर, आपको बिल्ड से जुड़ी गड़बड़ी का मैसेज मिलता है.\n\nइस समस्या को ठीक करने के लिए, इनमें से किसी एक जगह पर सेव की गई `debug.keystore` फ़ाइल को मिटाएं:\n\n*   `~/.android/` को OS X और Linux पर इस्तेमाल करना\n*   `C:\\Documents and Settings\\user\\.android\\` पर Windows XP\n*   `C:\\Users\\user\\.android\\` Windows Vista और Windows 7, 8, और 10 पर\n\nअगली बार जब अपने ऐप्लिकेशन का डीबग वर्शन _बनाया और चलाया_ जाएगा, तो Android Studio एक नया कीस्टोर और डीबग पासकोड फिर से जनरेट करेगा.\n\nGoogle Play पर रिलीज़ करने के लिए, अपने ऐप्लिकेशन पर हस्ताक्षर करना\n-------------------------------------------------------------------\n\nजब आपका ऐप्लिकेशन पब्लिश करने के लिए तैयार हो जाए, तो आपको अपने ऐप्लिकेशन पर हस्ताक्षर करना होगा और उसे Google Play जैसे ऐप्लिकेशन स्टोर पर अपलोड करना होगा. अपने ऐप्लिकेशन को पहली बार Google Play पर पब्लिश करते समय, आपको Play ऐप्लिकेशन साइनिंग की सुविधा को भी कॉन्फ़िगर करना होगा. अगस्त 2021 से पहले बनाए गए ऐप्लिकेशन के लिए, 'Play ऐप्लिकेशन साइनिंग' का इस्तेमाल करना ज़रूरी नहीं है. इस सेक्शन में, रिलीज़ के लिए अपने ऐप्लिकेशन को सही तरीके से साइन करने और Play ऐप्लिकेशन साइनिंग की सुविधा को कॉन्फ़िगर करने का तरीका बताया गया है.\n\n### अपलोड पासकोड और कीस्टोर जनरेट करना\n\nअगर आपके पास पहले से अपलोड पासकोड नहीं है, तो Android Studio का इस्तेमाल करके एक पासकोड जनरेट किया जा सकता है. यह पासकोड, 'Play ऐप्लिकेशन साइनिंग' को कॉन्फ़िगर करते समय काम आता है. इसके लिए, यह तरीका अपनाएं:\n\n1.  मेन्यू बार में, **बिल्ड &gt; हस्ताक्षर किया गया बंडल/APK जनरेट करें** पर क्लिक करें.\n2.  **साइन किया गया बंडल या APK जनरेट करें** डायलॉग में, **Android ऐप्लिकेशन बंडल** या **APK** चुनें और **आगे बढ़ें** पर क्लिक करें.\n3.  **की स्टोर का पाथ** फ़ील्ड के नीचे, **नया बनाएं** पर क्लिक करें.\n4.  **नया पासकोड स्टोर** विंडो में, अपने पासकोड स्टोर और पासकोड के लिए यह जानकारी दें, जैसा कि दूसरे चित्र में दिखाया गया है.\n    \n    ![](https://developer.android.com/static/studio/images/publish/keystore-wizard_2x.png?hl=hi)\n    \n    **दूसरी इमेज.** Android Studio में नया अपलोड पासकोड और कीस्टोर बनाएं.\n    \n5.  **कीस्टोर**\n    \n    *   **कीस्टोर का पाथ:** वह जगह चुनें जहां आपका कीस्टोर बनाया जाना चाहिए. साथ ही, जगह के पाथ के आखिर में फ़ाइल का नाम जोड़ा जाना चाहिए. साथ ही, उसमें `.jks` एक्सटेंशन होना चाहिए.\n    *   **पासवर्ड:** अपनी पासवर्ड स्टोर के लिए सुरक्षित पासवर्ड बनाएं और उसकी पुष्टि करें.\n6.  **कुंजी**\n    \n    *   **उपनाम:** अपनी कुंजी के लिए कोई ऐसा नाम डालें जिससे उसकी पहचान की जा सके.\n    *   **पासवर्ड:** अपनी कुंजी के लिए सुरक्षित पासवर्ड बनाएं और उसकी पुष्टि करें. यह पासवर्ड, आपके कीस्टोर के पासवर्ड से मेल खाना चाहिए. (ज़्यादा जानकारी के लिए, [पहचानी गई समस्या](https://developer.android.com/studio/known-issues?hl=hi#ki-key-keystore-warning) देखें)\n    *   **मान्य रहने की अवधि (साल):** यह सेट करें कि आपकी पासकोड कितने साल तक मान्य रहेगा. आपकी कुंजी कम से कम 25 साल तक मान्य होनी चाहिए, ताकि आप अपने ऐप्लिकेशन के पूरे जीवनकाल के दौरान, एक ही कुंजी से ऐप्लिकेशन के अपडेट साइन कर सकें.\n    *   **सर्टिफ़िकेट:** सर्टिफ़िकेट पाने के लिए, अपने बारे में कुछ जानकारी डालें. यह जानकारी आपके ऐप्लिकेशन में नहीं दिखती, लेकिन इसे APK के हिस्से के तौर पर आपके सर्टिफ़िकेट में शामिल किया जाता है.\n7.  फ़ॉर्म भरने के बाद, **ठीक है** पर क्लिक करें.\n    \n8.  अगर आपको अपने अपलोड पासकोड की मदद से ऐप्लिकेशन बनाना और उस पर हस्ताक्षर करना है, तो [अपने अपलोड पासकोड की मदद से ऐप्लिकेशन पर हस्ताक्षर करने](#sign_release) के तरीके के बारे में बताने वाले सेक्शन पर जाएं. अगर आपको सिर्फ़ पासकोड और पासकोड स्टोर जनरेट करना है, तो **रद्द करें** पर क्लिक करें.\n    \n\n### अपनी कुंजी से ऐप्लिकेशन को साइन करना\n\nअगर आपके पास पहले से ही कोई अपलोड पासकोड है, तो अपने ऐप्लिकेशन पर साइन करने के लिए उसका इस्तेमाल करें. अगर आपके ऐप्लिकेशन पर पहले से ही साइन किया गया है और उसे किसी मौजूदा ऐप्लिकेशन साइनिंग पासकोड की मदद से Google Play Store पर पब्लिश किया गया है, तो अपने ऐप्लिकेशन पर साइन करने के लिए उसका इस्तेमाल करें. बाद में, अपने ऐप्लिकेशन के अपडेट पर साइन करने और उन्हें अपलोड करने के लिए, Google Play पर [कोई अलग अपलोड पासकोड जनरेट और रजिस्टर](#register_upload_key) किया जा सकता है.\n\nAndroid Studio का इस्तेमाल करके अपने ऐप्लिकेशन पर हस्ताक्षर करने के लिए, यह तरीका अपनाएं:\n\n1.  अगर फ़िलहाल आपके पास **साइन किया गया बंडल या APK जनरेट करें** डायलॉग बॉक्स नहीं खुला है, तो **बिल्ड करें &gt; साइन किया गया बंडल/APK जनरेट करें** पर क्लिक करें.\n2.  **साइन किया गया बंडल या APK जनरेट करें** डायलॉग में, **Android ऐप्लिकेशन बंडल** या **APK** में से कोई एक चुनें और **आगे बढ़ें** पर क्लिक करें.\n3.  ड्रॉप-डाउन से कोई मॉड्यूल चुनें.\n4.  अपने कीस्टोर का पाथ और अपनी कुंजी का दूसरा नाम डालें. साथ ही, दोनों के लिए पासवर्ड डालें. अगर आपने अब तक अपलोड कीस्टोर और पासकोड तैयार नहीं किया है, तो पहले [अपलोड पासकोड और कीस्टोर जनरेट करें](#generate-key). इसके बाद, इस चरण को पूरा करने के लिए वापस आएं.\n    \n    ![](https://developer.android.com/static/studio/images/publish/generate-signed-apk-wizard_2x.png?hl=hi)\n    \n    **तीसरी इमेज**. अपने ऐप्लिकेशन पर अपलोड पासकोड से साइन करें.\n    \n    **ध्यान दें:** बेहतर सुरक्षा के लिए, Google Play साइनिंग पासकोड अपलोड करने की एक नई प्रोसेस शुरू कर रहा है. साथ ही, Android Studio में **एन्क्रिप्ट की गई कुंजी एक्सपोर्ट करें** विकल्प को बंद किया जा रहा है. अगर किसी ऐप्लिकेशन को किसी मौजूदा ऐप्लिकेशन साइनिंग पासकोड से साइन किया जा रहा है और आपको अपने ऐप्लिकेशन को Play ऐप्लिकेशन साइनिंग की सुविधा के लिए ऑप्ट-इन करना है, तो अपनी साइनिंग पासकोड को एन्क्रिप्ट और एक्सपोर्ट करने की प्रोसेस के लिए, [किसी मौजूदा ऐप्लिकेशन के लिए ऑप्ट-इन करें](#enroll_existing) लेख पढ़ें.\n    \n5.  **आगे बढ़ें** पर क्लिक करें.\n    \n6.  अगली विंडो (चित्र 4 में दिखाई गई) में, अपने हस्ताक्षर किए गए ऐप्लिकेशन के लिए कोई डेस्टिनेशन फ़ोल्डर चुनें. इसके बाद, बिल्ड टाइप चुनें और अगर लागू हो, तो प्रॉडक्ट फ़्लेवर चुनें.\n    \n7.  अगर कोई APK बनाया जा रहा है और उस पर हस्ताक्षर किए जा रहे हैं, तो आपको यह चुनना होगा कि आपके ऐप्लिकेशन में किन **साइनिंग वर्शन** का इस्तेमाल किया जाए. ज़्यादा जानने के लिए, [ऐप्लिकेशन साइनिंग स्कीम](https://source.android.com/security/apksigning?hl=hi) के बारे में पढ़ें\n    \n    **ध्यान दें:** Google Play, उन APK के लिए [APK सिग्नेचर स्कीम v3](https://source.android.com/security/apksigning/v3?hl=hi) का इस्तेमाल करता है जो पहले से ही किसी मौजूदा [साइनिंग सर्टिफ़िकेट के क्रम](https://developer.android.com/studio/command-line/apksigner?hl=hi#usage-rotate) के साथ पब्लिश नहीं किए गए हैं.\n    \n8.  **बनाएं** पर क्लिक करें.\n    \n    **ध्यान दें:** अगर आपके प्रोजेक्ट में प्रॉडक्ट फ़्लेवर का इस्तेमाल किया जाता है, तो Windows/Linux पर **Control** बटन या Mac OSX पर **Command** बटन को दबाकर, एक से ज़्यादा प्रॉडक्ट फ़्लेवर चुने जा सकते हैं. Android Studio, आपके चुने गए हर प्रॉडक्ट फ़्लेवर के लिए एक अलग APK या ऐप्लिकेशन बंडल जनरेट करेगा.\n    \n\n![](https://developer.android.com/static/studio/images/publish/generate_signed_bundle_popup-2x.png?hl=hi)\n\n**पांचवीं इमेज.** अपने ऐप्लिकेशन बंडल का विश्लेषण करने या उसकी जगह का पता लगाने के लिए, पॉप-अप में दिए गए लिंक पर क्लिक करें.\n\nAndroid Studio, आपके हस्ताक्षर किए गए ऐप्लिकेशन को बनाने के बाद, आपके पास अपने ऐप्लिकेशन को **ढूंढने** या **उसका विश्लेषण करने** का विकल्प होता है. इसके लिए, आपको पॉप-अप सूचना में दिए गए सही विकल्प पर क्लिक करना होगा, जैसा कि पांचवें चित्र में दिखाया गया है.\n\nअब आपके पास अपने ऐप्लिकेशन को Play ऐप्लिकेशन साइनिंग की सुविधा के लिए ऑप्ट इन करने और रिलीज़ के लिए अपलोड करने का विकल्प है. अगर आपने ऐप्लिकेशन पब्लिश करने की प्रोसेस पहले कभी नहीं की है, तो [लॉन्च की खास जानकारी](https://developer.android.com/distribute/best-practices/launch?hl=hi) पढ़ें. अगर ऐसा नहीं है, तो [Play Console पर ऐप्लिकेशन अपलोड करने](https://developer.android.com/studio/publish/upload-bundle?hl=hi) के तरीके के बारे में बताने वाले पेज पर जाएं.\n\nPlay ऐप्लिकेशन साइनिंग का इस्तेमाल करना\n---------------------------------------\n\nइस पेज पर पहले बताया गया है कि Google Play पर डिस्ट्रिब्यूशन के लिए, अपने ऐप्लिकेशन पर साइन करने के लिए, [Play ऐप्लिकेशन साइनिंग](#app-signing-google-play) को कॉन्फ़िगर करना ज़रूरी है. हालांकि, अगस्त 2021 से पहले बनाए गए ऐप्लिकेशन के लिए, ऐसा करना ज़रूरी नहीं है. ये ऐप्लिकेशन, खुद से साइन किए गए APKs को डिस्ट्रिब्यूट करना जारी रख सकते हैं. आपको कौनसे चरण पूरे करने होंगे, यह इस बात पर निर्भर करता है कि आपका ऐप्लिकेशन अब तक Google Play पर पब्लिश किया गया है या नहीं. इसके अलावा, यह भी ज़रूरी है कि आपके ऐप्लिकेशन पर पहले से ही हस्ताक्षर किया गया हो और उसे किसी मौजूदा ऐप्लिकेशन साइनिंग पासकोड का इस्तेमाल करके, अगस्त 2021 से पहले पब्लिश किया गया हो.\n\n### नए ऐप्लिकेशन को कॉन्फ़िगर करना\n\nऐसे ऐप्लिकेशन के लिए साइनिंग को कॉन्फ़िगर करने के लिए जिसे अब तक Google Play पर पब्लिश नहीं किया गया है, यह तरीका अपनाएं:\n\n1.  अगर आपने पहले ऐसा नहीं किया है, तो [अपलोड पासकोड जनरेट करें](#generate-key) और उस अपलोड पासकोड से [अपने ऐप्लिकेशन पर हस्ताक्षर करें](#sign_release).\n2.  अपने [Play Console](https://play.google.com/console/?hl=hi) में साइन इन करें.\n3.  नई रिलीज़ बनाने के लिए, [अपनी रिलीज़ तैयार करने और रोल आउट करने](https://support.google.com/googleplay/android-developer/answer/7159011?hl=hi) के लिए दिया गया तरीका अपनाएं.\n4.  रिलीज़ ट्रैक चुनने के बाद, **ऐप्लिकेशन साइनिंग** सेक्शन में जाकर, ऐप्लिकेशन साइनिंग को इस तरह कॉन्फ़िगर करें:\n    *   Google Play आपके लिए ऐप्लिकेशन साइनिंग पासकोड जनरेट कर सकता है और इसका इस्तेमाल आपके ऐप्लिकेशन को साइन करने के लिए कर सकता है. इसके लिए, आपको कुछ भी करने की ज़रूरत नहीं है. अपनी पहली रिलीज़ पर साइन करने के लिए इस्तेमाल की गई कुंजी, अपलोड पासकोड बन जाती है. आपको आने वाले समय में रिलीज़ करने के लिए, इसका इस्तेमाल करना चाहिए.\n    *   अपने डेवलपर खाते में, किसी दूसरे ऐप्लिकेशन के लिए इस्तेमाल की जा रही कुंजी का इस्तेमाल करने के लिए, **ऐप्लिकेशन साइनिंग पासकोड बदलें &gt; इस खाते में, किसी दूसरे ऐप्लिकेशन के लिए इस्तेमाल की जा रही कुंजी का इस्तेमाल करें** को चुनें. इसके बाद, कोई ऐप्लिकेशन चुनें और **जारी रखें** पर क्लिक करें.\n    *   Google को अपनी साइनिंग पासकोड उपलब्ध कराते समय, ऐप्लिकेशन पर साइन करते समय उसका इस्तेमाल करने के लिए, **ऐप्लिकेशन साइनिंग पासकोड बदलें** को चुनें. इसके बाद, **एक्सपोर्ट और अपलोड करें** में से कोई एक विकल्प चुनें. इससे, निजी पासकोड और उसका सार्वजनिक सर्टिफ़िकेट सुरक्षित तरीके से अपलोड किया जा सकता है.\n\n**ध्यान दें:** अगर आपने [सेवा की शर्तें](https://play.google.com/about/play-app-signing-terms.html?hl=hi) पहले ही स्वीकार नहीं की हैं, तो आपको शर्तें पढ़कर, **स्वीकार करें** को चुनना होगा. ऐसा करने के बाद ही, आगे की प्रोसेस जारी रखी जा सकेगी.\n\n**ऐप्लिकेशन बंडल** सेक्शन में, **फ़ाइलें ब्राउज़ करें** पर क्लिक करके, उस ऐप्लिकेशन को ढूंढें और अपलोड करें जिस पर आपने अपलोड पासकोड का इस्तेमाल करके साइन किया था. अपने ऐप्लिकेशन को रिलीज़ करने के बारे में ज़्यादा जानकारी के लिए, [रिलीज़ तैयार करना और उसे रोल आउट करना](https://support.google.com/googleplay/android-developer/answer/7159011?hl=hi) लेख पढ़ें. Play ऐप्लिकेशन साइनिंग की सुविधा को कॉन्फ़िगर करने के बाद ऐप्लिकेशन रिलीज़ करने पर, Google Play आपके ऐप्लिकेशन का साइनिंग पासकोड जनरेट करता है और उसे मैनेज करता है. हालांकि, ऐसा तब ही होता है, जब आपने कोई मौजूदा पासकोड अपलोड न किया हो. अपने ऐप्लिकेशन को Google Play पर अपलोड करने से पहले, उसके अपडेट पर साइन करें. इसके लिए, अपने ऐप्लिकेशन के अपलोड पासकोड का इस्तेमाल करें.\n\nअगर आपको अपने ऐप्लिकेशन के लिए नया अपलोड पासकोड बनाना है, तो [खोए हुए या हैक किए गए निजी अपलोड पासकोड को रीसेट करने](#reset_upload_key) के तरीके के बारे में बताने वाले सेक्शन पर जाएं.\n\n### किसी मौजूदा ऐप्लिकेशन के लिए ऑप्ट इन करना\n\nअगर किसी ऐसे ऐप्लिकेशन को अपडेट किया जा रहा है जिसे पहले से ही Google Play पर पब्लिश किया जा चुका है और इसके लिए किसी मौजूदा ऐप्लिकेशन साइनिंग पासकोड का इस्तेमाल किया जा रहा है, तो Play ऐप्लिकेशन साइनिंग की सुविधा के लिए इस तरह ऑप्ट-इन किया जा सकता है:\n\n1.  [Play Console](https://play.google.com/console/?hl=hi) में साइन इन करें और अपने ऐप्लिकेशन पर जाएं.\n2.  बाईं ओर दिए गए मेन्यू में, **रिलीज़ &gt; सेटअप &gt; ऐप्लिकेशन साइनिंग** पर क्लिक करें.\n3.  अगर लागू हो, तो सेवा की शर्तों की समीक्षा करें और **स्वीकार करें** चुनें.\n4.  वह विकल्प चुनें जो हस्ताक्षर करने के लिए इस्तेमाल की जाने वाली उस कुंजी के बारे में सबसे सही जानकारी देता हो जिसे आपको Google Play पर अपलोड करना है. इसके बाद, स्क्रीन पर दिए गए निर्देशों का पालन करें. उदाहरण के लिए, अगर साइनिंग पासकोड के लिए Java कीस्टोर का इस्तेमाल किया जा रहा है, तो **Java कीस्टोर से एक्सपोर्ट की गई, कोई नई ऐप्लिकेशन साइनिंग कुंजी अपलोड करें** को चुनें. इसके बाद, PEPK टूल को डाउनलोड और चलाने के लिए दिए गए निर्देशों का पालन करें. साथ ही, एन्क्रिप्ट (सुरक्षित) की गई कुंजी के साथ जनरेट की गई फ़ाइल अपलोड करें.\n5.  **नामांकन करें** पर क्लिक करें.\n\nअब आपको एक पेज दिखेगा, जिसमें आपके ऐप्लिकेशन के हस्ताक्षर और अपलोड किए गए सर्टिफ़िकेट की जानकारी होगी. Google Play अब उपयोगकर्ताओं के लिए आपके ऐप्लिकेशन को डिप्लॉय करते समय, आपके मौजूदा पासकोड से साइन करता है. हालांकि, 'Play ऐप्लिकेशन साइनिंग' का सबसे अहम फ़ायदा यह है कि Google Play पर अपलोड किए गए आर्टफ़ैक्ट पर साइन करने के लिए इस्तेमाल की जाने वाली पासकोड को, उपयोगकर्ताओं को डिस्ट्रिब्यूशन के लिए आपके ऐप्लिकेशन पर साइन करने के लिए इस्तेमाल की जाने वाली पासकोड से अलग किया जा सकता है. इसलिए, अगले सेक्शन में दिया गया तरीका अपनाकर, अलग अपलोड पासकोड जनरेट और रजिस्टर करें.\n\n#### अपलोड सर्टिफ़िकेट जनरेट और रजिस्टर करना\n\nअगर किसी ऐसे ऐप्लिकेशन को पब्लिश किया जा रहा है जिस पर अपलोड पासकोड से हस्ताक्षर नहीं किया गया है, तो Google Play Console में, ऐप्लिकेशन के आने वाले अपडेट के लिए एक पासकोड रजिस्टर करने का विकल्प मिलता है. हालांकि, यह चरण ज़रूरी नहीं है. हमारा सुझाव है कि आप अपने ऐप्लिकेशन को किसी ऐसे पासकोड से पब्लिश करें जो Google Play के इस्तेमाल किए जाने वाले पासकोड से अलग हो. Google Play, इस पासकोड का इस्तेमाल आपके ऐप्लिकेशन को उपयोगकर्ताओं तक पहुंचाने के लिए करता है. इस तरह, Google आपकी साइनिंग पासकोड को सुरक्षित रखता है. साथ ही, आपके पास [खोए हुए या हैक किए गए निजी अपलोड पासकोड को रीसेट करने](#reset_upload_key) का विकल्प होता है. इस सेक्शन में, अपलोड पासकोड बनाने, उससे अपलोड सर्टिफ़िकेट जनरेट करने, और अपने ऐप्लिकेशन के आने वाले अपडेट के लिए, उस सर्टिफ़िकेट को Google Play पर रजिस्टर करने का तरीका बताया गया है.\n\nयहां उन स्थितियों के बारे में बताया गया है जिनमें आपको Play Console में, अपलोड सर्टिफ़िकेट रजिस्टर करने का विकल्प दिखता है:\n\n*   जब कोई नया ऐप्लिकेशन पब्लिश किया जाता है, जिसे साइनिंग पासकोड से साइन किया गया हो और उसे 'Play ऐप्लिकेशन साइनिंग' में ऑप्ट इन किया गया हो.\n*   जब आपको कोई ऐसा मौजूदा ऐप्लिकेशन पब्लिश करना हो जो पहले से ही Play ऐप्लिकेशन साइनिंग की सुविधा के लिए ऑप्ट-इन हो, लेकिन जिसे साइनिंग पासकोड का इस्तेमाल करके साइन किया गया हो.\n\nअगर आपको किसी ऐसे मौजूदा ऐप्लिकेशन का अपडेट पब्लिश नहीं करना है जो पहले से ही 'Play ऐप्लिकेशन साइनिंग' में ऑप्ट इन है और आपको अपलोड सर्टिफ़िकेट रजिस्टर करना है, तो यहां दिया गया तरीका अपनाएं. इसके बाद, [खोए हुए या हैक किए गए निजी अपलोड पासकोड को रीसेट करने](#reset_upload_key) के तरीके के बारे में बताने वाले सेक्शन पर जाएं.\n\nअगर आपने पहले से ऐसा नहीं किया है, तो [अपलोड पासकोड और कीस्टोर जनरेट करें](#generate-key).\n\nअपलोड पासकोड और कीस्टोर बनाने के बाद, आपको [`keytool`](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html) का इस्तेमाल करके, अपलोड पासकोड से सार्वजनिक सर्टिफ़िकेट जनरेट करना होगा. इसके लिए, यह कमांड इस्तेमाल करें:\n\n$ keytool -export -rfc\n  -keystore your-upload-keystore.jks\n  -alias upload-alias\n  -file output\\_upload\\_certificate.pem\n\nअब आपके पास अपलोड सर्टिफ़िकेट है. Play Console में पूछे जाने पर या [अपलोड पासकोड को रीसेट करते समय](#reset_upload_key), इसे Google के साथ रजिस्टर करें.\n\n#### ऐप्लिकेशन साइनिंग पासकोड को अपग्रेड करना\n\nकुछ मामलों में, आपको अपने ऐप्लिकेशन की साइनिंग कुंजी बदलनी पड़ सकती है. उदाहरण के लिए, आपको क्रिप्टोग्राफ़िक तरीके से ज़्यादा सुरक्षित पासकोड चाहिए या आपके साइनिंग पासकोड से छेड़छाड़ की गई हो. हालांकि, उपयोगकर्ता आपके ऐप्लिकेशन को सिर्फ़ तब अपडेट कर सकते हैं, जब अपडेट पर उसी साइनिंग पासकोड से साइन किया गया हो जिससे ऐप्लिकेशन को साइन किया गया है. इसलिए, पहले से पब्लिश किए गए ऐप्लिकेशन के लिए साइनिंग पासकोड बदलना मुश्किल होता है.\n\nअगर आपने अपना ऐप्लिकेशन Google Play पर पब्लिश किया है, तो Play Console की मदद से, पब्लिश किए गए ऐप्लिकेशन के लिए साइनिंग पासकोड को अपग्रेड किया जा सकता है. आपकी नई 'की' का इस्तेमाल, Android 13 और उसके बाद के वर्शन पर ऐप्लिकेशन के इंस्टॉल और अपडेट को साइन करने के लिए किया जाता है. वहीं, ऐप्लिकेशन के पुराने साइनिंग पासकोड का इस्तेमाल, Android के पुराने वर्शन पर उपयोगकर्ताओं के लिए अपडेट को साइन करने के लिए किया जाता है.\n\nज़्यादा जानने के लिए, [अपने ऐप्लिकेशन साइनिंग पासकोड को अपग्रेड करना](https://support.google.com/googleplay/android-developer/answer/7384423?hl=hi#Upgrade) लेख पढ़ें.\n\n### खोए हुए या हैक किए गए निजी अपलोड पासकोड को रीसेट करना\n\nअगर आपका निजी अपलोड पासकोड खो गया है या उसके साथ छेड़छाड़ की गई है, तो नया पासकोड बनाया जा सकता है. साथ ही, Play Console में जाकर [अपलोड पासकोड रीसेट करने का अनुरोध](https://support.google.com/googleplay/android-developer/answer/7384423?hl=hi#reset) किया जा सकता है.\n\n**ध्यान दें:** अपलोड पासकोड को रीसेट करने से, उस ऐप्लिकेशन साइनिंग पासकोड पर असर नहीं पड़ेगा जिसका इस्तेमाल Google Play, लोगों को APKs डिलीवर करने से पहले, उन्हें फिर से साइन करने के लिए करता है.\n\n### अपने ऐप्लिकेशन को अपने-आप साइन करने के लिए, बिल्ड प्रोसेस को कॉन्फ़िगर करना\n\nAndroid Studio में, अपने प्रोजेक्ट को इस तरह कॉन्फ़िगर किया जा सकता है कि वह बाइल्ड करने की प्रोसेस के दौरान, अपने ऐप्लिकेशन के रिलीज़ वर्शन को अपने-आप साइन कर ले. इसके लिए, साइन करने का कॉन्फ़िगरेशन बनाएं और उसे अपने रिलीज़ बाइल्ड टाइप को असाइन करें. हस्ताक्षर करने के कॉन्फ़िगरेशन में, पासकोड की जगह, पासकोड, पासकोड का दूसरा नाम, और पासकोड शामिल होता है. Android Studio का इस्तेमाल करके, हस्ताक्षर करने का कॉन्फ़िगरेशन बनाने और उसे रिलीज़ के लिए बने बाइल्ड टाइप को असाइन करने के लिए, यह तरीका अपनाएं:\n\n1.  **प्रोजेक्ट** विंडो में, अपने ऐप्लिकेशन पर दायां क्लिक करें और **मॉड्यूल सेटिंग खोलें** पर क्लिक करें.\n2.  **प्रोजेक्ट स्ट्रक्चर** विंडो में, बाईं ओर मौजूद पैनल में **मॉड्यूल** में जाकर, उस मॉड्यूल पर क्लिक करें जिस पर आपको हस्ताक्षर करना है.\n3.  **हस्ताक्षर करना** टैब पर क्लिक करें. इसके बाद, **जोड़ें** ![](https://developer.android.com/static/studio/images/publish/add-signing-config_2-1_2x.png?hl=hi) पर क्लिक करें.\n4.  अपनी पासकोड फ़ाइल चुनें, हस्ताक्षर करने के इस कॉन्फ़िगरेशन के लिए कोई नाम डालें (क्योंकि एक से ज़्यादा बनाए जा सकते हैं) और ज़रूरी जानकारी डालें.\n    \n    ![](https://developer.android.com/static/studio/images/publish/project-structure-signing_2-1_2x.png?hl=hi)\n    \n    **सातवीं इमेज**. हस्ताक्षर करने का नया कॉन्फ़िगरेशन बनाने के लिए विंडो.\n    \n5.  **बिल्ड टाइप** टैब पर क्लिक करें.\n6.  **रिलीज़** बिल्ड पर क्लिक करें.\n7.  **साइनिंग कॉन्फ़िगरेशन** में जाकर, वह साइनिंग कॉन्फ़िगरेशन चुनें जो आपने अभी बनाया है.\n    \n    ![](https://developer.android.com/static/studio/images/publish/project-structure-build-types_2-1_2x.png?hl=hi)\n    \n    **आठवीं इमेज**. Android Studio में, साइनिंग कॉन्फ़िगरेशन चुनें.\n    \n8.  **ठीक है** पर क्लिक करें.\n\nअब जब भी Android Studio में **बिल्ड &gt; बंडल / APK बनाएं** में जाकर, रिलीज़ के लिए बंडल टाइप चुनकर उसे बनाया जाएगा, तो IDE आपके ऐप्लिकेशन को अपने-आप साइन कर देगा. इसके लिए, वह आपके बताए गए साइनिंग कॉन्फ़िगरेशन का इस्तेमाल करेगा. आपको साइन किया गया APK या ऐप्लिकेशन बंडल, प्रोजेक्ट डायरेक्ट्री में `build/outputs/` डायरेक्ट्री में मिलेगा. यह डायरेक्ट्री, उस मॉड्यूल के लिए होती है जिसे बिल्ड किया जा रहा है.\n\nहस्ताक्षर करने का कॉन्फ़िगरेशन बनाने पर, हस्ताक्षर करने की जानकारी को आपकी Gradle बिल्ड फ़ाइलों में सादे टेक्स्ट में शामिल किया जाता है. अगर किसी टीम के साथ काम किया जा रहा है या अपना कोड सार्वजनिक तौर पर शेयर किया जा रहा है, तो आपको साइन करने के लिए इस्तेमाल की जाने वाली जानकारी को सुरक्षित रखना चाहिए. इसके लिए, आपको उसे बिल्ड फ़ाइलों से हटाकर अलग से सेव करना होगा. [अपनी बिल्ड फ़ाइलों से हस्ताक्षर करने की जानकारी हटाना](#secure-shared-keystore) लेख में, अपनी बिल्ड फ़ाइलों से हस्ताक्षर करने की जानकारी हटाने के तरीके के बारे में ज़्यादा पढ़ें. हस्ताक्षर करने के लिए इस्तेमाल की जाने वाली जानकारी को सुरक्षित रखने के बारे में ज़्यादा जानने के लिए, नीचे [अपनी कुंजी को सुरक्षित रखें](#secure_key) लेख पढ़ें.\n\n### प्रॉडक्ट के हर फ़्लेवर को अलग-अलग साइन करें\n\nअगर आपका ऐप्लिकेशन प्रॉडक्ट फ़्लेवर का इस्तेमाल करता है और आपको हर फ़्लेवर को अलग-अलग साइन करना है, तो साइन करने के लिए अतिरिक्त कॉन्फ़िगरेशन बनाएं और उन्हें फ़्लेवर के हिसाब से असाइन करें:\n\n1.  **प्रोजेक्ट** विंडो में, अपने ऐप्लिकेशन पर दायां क्लिक करें और **मॉड्यूल सेटिंग खोलें** पर क्लिक करें.\n2.  **प्रोजेक्ट स्ट्रक्चर** विंडो में, बाईं ओर मौजूद पैनल में **मॉड्यूल** में जाकर, उस मॉड्यूल पर क्लिक करें जिस पर आपको हस्ताक्षर करना है.\n3.  **हस्ताक्षर करना** टैब पर क्लिक करें. इसके बाद, **जोड़ें** ![](https://developer.android.com/static/studio/images/publish/add-signing-config_2-1_2x.png?hl=hi) पर क्लिक करें.\n4.  अपनी पासकोड फ़ाइल चुनें, हस्ताक्षर करने के इस कॉन्फ़िगरेशन के लिए कोई नाम डालें (क्योंकि एक से ज़्यादा बनाए जा सकते हैं) और ज़रूरी जानकारी डालें.\n    \n    ![](https://developer.android.com/static/studio/images/publish/project-structure-signing_2-1_2x.png?hl=hi)\n    \n    **10वीं इमेज**. हस्ताक्षर करने का नया कॉन्फ़िगरेशन बनाने के लिए विंडो.\n    \n5.  तीसरे और चौथे चरण को ज़रूरत के मुताबिक दोहराएं, ताकि आप हस्ताक्षर करने के सभी कॉन्फ़िगरेशन बना सकें.\n6.  **स्वाद** टैब पर क्लिक करें.\n7.  आपको जिस फ़्लेवर को कॉन्फ़िगर करना है उस पर क्लिक करें. इसके बाद, **साइनिंग कॉन्फ़िगरेशन** ड्रॉपडाउन मेन्यू से सही साइनिंग कॉन्फ़िगरेशन चुनें. ![](https://developer.android.com/static/studio/images/publish/project-structure-flavors_2-1_2x.png?hl=hi)\n    \n    **11वीं इमेज**. प्रॉडक्ट फ़्लेवर के हिसाब से, हस्ताक्षर करने की सेटिंग कॉन्फ़िगर करें.\n    \n    प्रॉडक्ट के किसी अन्य फ़्लेवर को कॉन्फ़िगर करने के लिए, यह तरीका दोहराएं.\n    \n8.  **ठीक है** पर क्लिक करें.\n\nGradle कॉन्फ़िगरेशन फ़ाइलों में भी, साइन करने की सेटिंग तय की जा सकती हैं. ज़्यादा जानकारी के लिए, [हस्ताक्षर करने की सेटिंग कॉन्फ़िगर करना](https://developer.android.com/studio/build/build-variants?hl=hi#signing) लेख पढ़ें.\n\nहस्ताक्षर करने की रिपोर्ट चलाना\n-------------------------------\n\nअपने ऐप्लिकेशन के हर वैरिएंट के लिए, साइन इन करने की जानकारी पाने के लिए, Android Studio में Gradle `signingReport` टास्क चलाएं:\n\n1.  Gradle टूल विंडो खोलने के लिए, **व्यू &gt; टूल विंडो &gt; Gradle** चुनें\n2.  रिपोर्ट चलाने के लिए, **YourApp &gt; Tasks &gt; android &gt; signingReport** चुनें\n\n**ध्यान दें:** अगर आपको Gradle टास्क की सूची में `signingReport` नहीं दिखता है, तो **फ़ाइल &gt; सेटिंग** (macOS पर **Android Studio &gt; सेटिंग**) चुनकर, Android Studio की सेटिंग डायलॉग बॉक्स खोलें. इसके बाद, **प्रयोग के तौर पर उपलब्ध** चुनें. इसके बाद, Gradle के शीर्षक में जाकर, उन सभी चेकबॉक्स को हटाएं जिनसे Gradle टास्क की सूची में शामिल टास्क के टाइप सीमित होते हैं.\n\nअपनी साइनिंग पासकोड मैनेज करना\n------------------------------\n\nअगर आपने अगस्त 2021 से पहले बनाए गए ऐप्लिकेशन के लिए, 'Play ऐप्लिकेशन साइनिंग' में ऑप्ट इन नहीं किया है, तो आपके पास ऐप्लिकेशन साइनिंग पासकोड और पासकोड स्टोर को मैनेज करने का विकल्प होता है. ध्यान रखें कि **कुंजी और कीस्टोर को सुरक्षित रखने की ज़िम्मेदारी आपकी है**. इसके अलावा, आपका ऐप्लिकेशन Android ऐप्लिकेशन बंडल, Play Feature Delivery, और Play Asset Delivery के साथ काम नहीं करेगा.\n\nअपनी कुंजी और पासकोड बनाने के लिए, पहले अपने पासकोड के लिए एक मज़बूत पासवर्ड चुनें. साथ ही, पासकोड में सेव की गई हर निजी कुंजी के लिए, एक अलग मज़बूत पासवर्ड चुनें. आपको अपना पासकोड सुरक्षित जगह पर रखना चाहिए. अगर आपके पास ऐप्लिकेशन साइनिंग पासकोड का ऐक्सेस नहीं है या आपके पासकोड को हैक कर लिया गया है, तो Google आपके लिए ऐप्लिकेशन साइनिंग पासकोड वापस नहीं ला सकता. साथ ही, आपके पास उपयोगकर्ताओं के लिए अपने ऐप्लिकेशन के नए वर्शन को, ओरिजनल ऐप्लिकेशन के अपडेट के तौर पर रिलीज़ करने का विकल्प भी नहीं होगा. ज़्यादा जानकारी के लिए, नीचे [अपने पासकोड को सुरक्षित रखें](#secure_key) लेख पढ़ें.\n\nअगर आपने ऐप्लिकेशन साइनिंग कुंजी और पासकोड को खुद मैनेज किया है, तो APK पर साइन करने के लिए, आपको अपनी ऐप्लिकेशन साइनिंग कुंजी का इस्तेमाल करके, उसे स्थानीय तौर पर साइन करना होगा. इसके बाद, साइन किए गए APK को सीधे Google Play Store पर अपलोड करना होगा, ताकि उसे डिस्ट्रिब्यूट किया जा सके. इस बारे में ज़्यादा जानकारी के लिए, 12वीं इमेज देखें.\n\n![](https://developer.android.com/static/studio/images/publish/appsigning_selfmanagediagram_2x.png?hl=hi)\n\n**12वीं इमेज**. ऐप्लिकेशन साइनिंग पासकोड को खुद मैनेज करने पर, ऐप्लिकेशन को साइन करना\n\n[Play ऐप्लिकेशन साइनिंग](https://developer.android.com/studio/publish/app-signing?hl=hi#google-play-app-signing) का इस्तेमाल करने पर, Google आपकी साइनिंग पासकोड को सुरक्षित रखता है. साथ ही, यह पक्का करता है कि आपके ऐप्लिकेशन सही तरीके से साइन किए गए हों और उन्हें पूरे जीवनकाल के दौरान अपडेट मिलते रहें. हालांकि, अगर आपको ऐप्लिकेशन साइनिंग पासकोड खुद मैनेज करना है, तो आपको कुछ बातों का ध्यान रखना होगा.\n\nहस्ताक्षर करने से जुड़ी बातें\n-----------------------------\n\nआपको अपने ऐप्लिकेशन को, उसके पूरे जीवनकाल के दौरान एक ही सर्टिफ़िकेट से साइन करना चाहिए. ऐसा करने की कई वजहें हैं:\n\n*   **ऐप्लिकेशन अपग्रेड:** जब सिस्टम किसी ऐप्लिकेशन का अपडेट इंस्टॉल कर रहा होता है, तो वह नए वर्शन के सर्टिफ़िकेट की तुलना, मौजूदा वर्शन के सर्टिफ़िकेट से करता है. अगर सर्टिफ़िकेट मेल खाते हैं, तो सिस्टम अपडेट करने की अनुमति देता है. अगर नए वर्शन पर किसी दूसरे सर्टिफ़िकेट से हस्ताक्षर किया जाता है, तो आपको ऐप्लिकेशन के लिए कोई दूसरा पैकेज नाम असाइन करना होगा. इस मामले में, उपयोगकर्ता नए वर्शन को पूरी तरह से नए ऐप्लिकेशन के तौर पर इंस्टॉल करता है.\n*   **ऐप्लिकेशन को मॉड्यूल में बांटना:** Android, एक ही सर्टिफ़िकेट से साइन किए गए APK को एक ही प्रोसेस में चलाने की अनुमति देता है. ऐसा तब होता है, जब ऐप्लिकेशन ऐसा अनुरोध करते हैं. इससे सिस्टम उन्हें एक ही ऐप्लिकेशन के तौर पर इस्तेमाल करता है. इस तरह, अपने ऐप्लिकेशन को मॉड्यूल में डिप्लॉय किया जा सकता है. साथ ही, उपयोगकर्ता हर मॉड्यूल को अलग से अपडेट कर सकते हैं.\n*   **अनुमतियों की मदद से कोड/डेटा शेयर करना:** Android, सिग्नेचर के आधार पर अनुमतियां लागू करता है, ताकि कोई ऐप्लिकेशन किसी ऐसे दूसरे ऐप्लिकेशन के साथ फ़ंक्शन शेयर कर सके जिस पर किसी खास सर्टिफ़िकेट से हस्ताक्षर किया गया हो. एक ही सर्टिफ़िकेट का इस्तेमाल करके कई APK साइन करने और साइन वाले सर्टिफ़िकेट के आधार पर अनुमतियों की जांच करने की सुविधा का इस्तेमाल करके, आपके ऐप्लिकेशन सुरक्षित तरीके से कोड और डेटा शेयर कर सकते हैं.\n\nअगर आपको किसी ऐप्लिकेशन के लिए अपग्रेड की सुविधा देनी है, तो पक्का करें कि आपके ऐप्लिकेशन साइनिंग पासकोड की समयसीमा, उस ऐप्लिकेशन के अनुमानित जीवनकाल से ज़्यादा हो. हमारा सुझाव है कि आपके पासकोड की समयसीमा 25 साल या उससे ज़्यादा हो. कुंजी की समयसीमा खत्म होने के बाद, उपयोगकर्ता आपके ऐप्लिकेशन के नए वर्शन पर आसानी से अपग्रेड नहीं कर पाएंगे.\n\nअगर आपको अपने ऐप्लिकेशन Google Play पर पब्लिश करने हैं, तो ऐप्लिकेशन को साइन करने के लिए इस्तेमाल की जाने वाली कुंजी की समयसीमा 22 अक्टूबर, 2033 के बाद खत्म होनी चाहिए. Google Play इस शर्त को लागू करता है, ताकि नए वर्शन उपलब्ध होने पर, उपयोगकर्ता आसानी से ऐप्लिकेशन अपग्रेड कर सकें.\n\n### अपनी कुंजी को सुरक्षित रखना\n\nअगर आपने [Play ऐप्लिकेशन साइनिंग](#app-signing-google-play) के लिए ऑप्ट-इन करने के बजाय, अपनी ऐप्लिकेशन साइनिंग पासकोड और कीस्टोर को खुद मैनेज और सुरक्षित करने का विकल्प चुना है, तो ऐप्लिकेशन साइनिंग पासकोड को सुरक्षित रखना आपके और उपयोगकर्ता, दोनों के लिए ज़रूरी है. अगर आपने किसी को अपनी कुंजी इस्तेमाल करने की अनुमति दी है या आपने अपनी पासवर्ड और पासकोड को ऐसी जगह पर सेव किया है जहां तीसरे पक्ष के लोग उन्हें ढूंढकर इस्तेमाल कर सकते हैं, तो लेखक के तौर पर आपकी पहचान और उपयोगकर्ता का भरोसा कम हो जाता है.\n\n**ध्यान दें:** Play ऐप्लिकेशन साइनिंग का इस्तेमाल करने पर, आपके ऐप्लिकेशन साइनिंग पासकोड को Google के इन्फ़्रास्ट्रक्चर का इस्तेमाल करके सुरक्षित रखा जाता है. आपको अब भी अपना अपलोड पासकोड सुरक्षित रखना चाहिए, जैसा कि यहां बताया गया है. अगर आपके अपलोड पासकोड से छेड़छाड़ की गई है, तो Play Console में [अपलोड पासकोड को रीसेट करने का अनुरोध](#reset_upload_key) किया जा सकता है.\n\nअगर कोई तीसरा पक्ष आपकी जानकारी या अनुमति के बिना, आपके ऐप्लिकेशन की साइनिंग पासकोड हासिल कर लेता है, तो वह आपके ऐप्लिकेशन को साइन करके, उनकी जगह नुकसान पहुंचाने वाले ऐप्लिकेशन इंस्टॉल कर सकता है. वह आपके ऐप्लिकेशन को खराब भी कर सकता है. ऐसा व्यक्ति आपकी पहचान का इस्तेमाल करके, ऐप्लिकेशन को साइन भी कर सकता है और उन्हें दूसरे उपयोगकर्ताओं तक भी पहुंचा सकता है. ये ऐप्लिकेशन, दूसरे ऐप्लिकेशन या सिस्टम पर हमला कर सकते हैं. इसके अलावा, ये उपयोगकर्ता का डेटा चोरी कर सकते हैं या उसे खराब कर सकते हैं.\n\nआने वाले समय में आपके ऐप्लिकेशन के सभी वर्शन को साइन करने के लिए, आपकी निजी कुंजी ज़रूरी है. अगर आपकी कुंजी खो जाती है या कहीं खो जाती है, तो आपके पास अपने मौजूदा ऐप्लिकेशन के अपडेट पब्लिश करने का विकल्प नहीं होगा. पहले जनरेट की गई कुंजी को फिर से जनरेट नहीं किया जा सकता.\n\nडेवलपर के तौर पर आपकी साख इस बात पर निर्भर करती है कि आपने ऐप्लिकेशन साइनिंग पासकोड को हर समय सही तरीके से सुरक्षित रखा है या नहीं. ऐसा तब तक करना होगा, जब तक पासकोड की समयसीमा खत्म नहीं हो जाती. पासकोड को सुरक्षित रखने के लिए, यहां कुछ सलाह दी गई हैं:\n\n*   पासवर्ड और पासकोड के लिए मज़बूत पासवर्ड चुनें.\n*   अपनी निजी कुंजी किसी को न दें या न उधार दें. साथ ही, बिना अनुमति वाले लोगों को अपना कीस्टोर और पासवर्ड न बताएं.\n*   अपनी निजी कुंजी वाली कीस्टोर फ़ाइल को किसी सुरक्षित जगह पर रखें.\n\nआम तौर पर, अगर पासकोड जनरेट करने, इस्तेमाल करने, और सेव करने के दौरान सावधानी बरती जाती है, तो वह सुरक्षित रहेगा.\n\n#### अपनी बिल्ड फ़ाइलों से हस्ताक्षर करने की जानकारी हटाना\n\nहस्ताक्षर करने का कॉन्फ़िगरेशन बनाने पर, Android Studio, मॉड्यूल की `build.gradle` फ़ाइलों में हस्ताक्षर करने की जानकारी को सादा टेक्स्ट में जोड़ता है. अगर आप किसी टीम के साथ काम कर रहे हैं या अपना कोड ओपन सोर्स कर रहे हैं, तो आपको इस संवेदनशील जानकारी को बिल्ड फ़ाइलों से हटा देना चाहिए, ताकि कोई और इसे आसानी से ऐक्सेस न कर पाए. ऐसा करने के लिए, आपको सुरक्षित जानकारी सेव करने के लिए एक अलग प्रॉपर्टी फ़ाइल बनानी होगी. साथ ही, अपनी बिल्ड फ़ाइलों में उस फ़ाइल का रेफ़रंस इस तरह देना होगा:\n\n1.  साइनिंग कॉन्फ़िगरेशन बनाएं और उसे एक या उससे ज़्यादा बिल्ड टाइप को असाइन करें. इन निर्देशों में यह माना गया है कि आपने रिलीज़ के लिए बने बिल्ड टाइप के लिए, साइनिंग का एक कॉन्फ़िगरेशन कॉन्फ़िगर किया है. इस बारे में ऊपर [अपने ऐप्लिकेशन को अपने-आप साइन करने के लिए, बिल्ड प्रोसेस को कॉन्फ़िगर करना](#sign-auto) में बताया गया है.\n2.  अपने प्रोजेक्ट की रूट डायरेक्ट्री में, `keystore.properties` नाम की फ़ाइल बनाएं. इस फ़ाइल में, हस्ताक्षर करने से जुड़ी आपकी जानकारी इस तरह होनी चाहिए:\n    \n    storePassword=myStorePassword\n    keyPassword=mykeyPassword\n    keyAlias=myKeyAlias\n    storeFile=myStoreFileLocation\n    \n3.  अपने मॉड्यूल की `build.gradle` फ़ाइल में, `android {}` ब्लॉक से पहले अपनी `keystore.properties` फ़ाइल को लोड करने के लिए कोड जोड़ें.\n    \n    ### Groovy\n    \n    ...\n    \n    // Create a variable called keystorePropertiesFile, and initialize it to your\n    // keystore.properties file, in the rootProject folder.\n    def keystorePropertiesFile \\= rootProject.file(\&quot;keystore.properties\&quot;)\n    \n    // Initialize a new Properties() object called keystoreProperties.\n    def keystoreProperties \\= new Properties()\n    \n    // Load your keystore.properties file into the keystoreProperties object.\n    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n    \n    android {\n        ...\n    }\n    \n    ### Kotlin\n    \n    ...\n    import java.util.Properties\n    import java.io.FileInputStream\n    \n    // Create a variable called keystorePropertiesFile, and initialize it to your\n    // keystore.properties file, in the rootProject folder.\n    val keystorePropertiesFile \\= rootProject.file(\&quot;keystore.properties\&quot;)\n    \n    // Initialize a new Properties() object called keystoreProperties.\n    val keystoreProperties \\= Properties()\n    \n    // Load your keystore.properties file into the keystoreProperties object.\n    keystoreProperties.load(FileInputStream(keystorePropertiesFile))\n    \n    android {\n        ...\n    }\n    \n    **ध्यान दें:** अपनी `keystore.properties` फ़ाइल को किसी दूसरी जगह पर सेव किया जा सकता है. उदाहरण के लिए, प्रोजेक्ट के रूट फ़ोल्डर के बजाय मॉड्यूल फ़ोल्डर में या अगर लगातार इंटिग्रेशन टूल का इस्तेमाल किया जा रहा है, तो अपने बिल्ड सर्वर पर. ऐसे में, आपको ऊपर दिए गए कोड में बदलाव करना चाहिए, ताकि अपनी असल `keystore.properties` फ़ाइल की जगह का इस्तेमाल करके, `keystorePropertiesFile` को सही तरीके से शुरू किया जा सके.\n    \n4.  `keystoreProperties['propertyName']` सिंटैक्स का इस्तेमाल करके, `keystoreProperties` में सेव की गई प्रॉपर्टी देखी जा सकती हैं. इस सिंटैक्स का इस्तेमाल करके, `keystoreProperties` में सेव की गई हस्ताक्षर करने की जानकारी का रेफ़रंस देने के लिए, अपने मॉड्यूल की `build.gradle` फ़ाइल के `signingConfigs` ब्लॉक में बदलाव करें.\n    \n    ### Groovy\n    \n    android {\n        signingConfigs {\n            config {\n                keyAlias keystoreProperties\\['keyAlias'\\]\n                keyPassword keystoreProperties\\['keyPassword'\\]\n                storeFile file(keystoreProperties\\['storeFile'\\])\n                storePassword keystoreProperties\\['storePassword'\\]\n            }\n        }\n        ...\n      }\n    \n    ### Kotlin\n    \n    android {\n        signingConfigs {\n            create(\&quot;config\&quot;) {\n                keyAlias \\= keystoreProperties\\[\&quot;keyAlias\&quot;\\] as String\n                keyPassword \\= keystoreProperties\\[\&quot;keyPassword\&quot;\\] as String\n                storeFile \\= file(keystoreProperties\\[\&quot;storeFile\&quot;\\] as String)\n                storePassword \\= keystoreProperties\\[\&quot;storePassword\&quot;\\] as String\n            }\n        }\n        ...\n      }\n    \n5.  **बिल्ड वैरिएंट** टूल विंडो खोलें और पक्का करें कि रिलीज़ के लिए बिल्ड टाइप चुना गया हो.\n6.  अपनी रिलीज़ के बंडल का APK या ऐप्लिकेशन बंडल बनाने के लिए, **बिल्ड &gt; बंडल / APK बनाएं** में जाकर कोई विकल्प चुनें. आपको अपने मॉड्यूल के लिए, `build/outputs/` डायरेक्ट्री में बिल्ड आउटपुट दिखेगा.\n\nआपकी बिल्ड फ़ाइलों में अब संवेदनशील जानकारी नहीं है. इसलिए, अब इन्हें सोर्स कंट्रोल में शामिल किया जा सकता है या शेयर किए गए कोडबेस में अपलोड किया जा सकता है. `keystore.properties` फ़ाइल को सुरक्षित रखना न भूलें. इसमें, इसे अपने सोर्स कंट्रोल सिस्टम से हटाना भी शामिल है.\n\nइस पेज पर मौजूद कॉन्टेंट और कोड सैंपल [कॉन्टेंट के लाइसेंस](https://developer.android.com/license?hl=hi) में बताए गए लाइसेंस के हिसाब से हैं. Java और OpenJDK, Oracle और/या इससे जुड़ी हुई कंपनियों के ट्रेडमार्क या रजिस्टर किए हुए ट्रेडमार्क हैं.\n\nआखिरी बार 2025-01-24 (UTC) को अपडेट किया गया.\n\n  *     [![X](https://developer.android.com/_static/android/images/logo-x.svg?hl=hi)X](//x.com/AndroidDev)\n    \n    X पर @AndroidDev को फ़ॉलो करें\n    \n*     [![YouTube](//www.gstatic.com/images/icons/material/product/2x/youtube_48dp.png)YouTube](//www.youtube.com/user/androiddevelopers?hl=hi)\n    \n    YouTube पर Android डेवलपर को देखें\n    \n*     [![LinkedIn](https://developer.android.com/_static/android/images/logo-linkedin.svg?hl=hi)LinkedIn](//www.linkedin.com/showcase/androiddev)\n    \n    Connect with the Android Developers community on LinkedIn\n\n*   ### Android के बारे में ज़्यादा जानें\n    \n    *   [Android](//www.android.com)\n    *   [Android for Enterprise](//www.android.com/enterprise/)\n    *   [सुरक्षा](//www.android.com/security-center/)\n    *   [सोर्स](//source.android.com)\n    *   [समाचार](/news)\n    *   [ब्लॉग](//android-developers.googleblog.com/)\n    *   [पॉडकास्ट](/podcasts)\n*   ### खोजें\n    \n    *   [गेमिंग](/games)\n    *   [मशीन लर्निंग](/ml)\n    *   [सेहत और फ़िटनेस](/health-and-fitness)\n    *   [कैमरा और मीडिया](/media)\n    *   [निजता](/privacy)\n    *   [5G](/training/connectivity/5g)\n*   ### Android डिवाइस\n    \n    *   [बड़ी स्क्रीन](/large-screens)\n    *   [Wear OS](/wear)\n    *   [ChromeOS डिवाइस](/chrome-os)\n    *   [कार के लिए Android](/cars)\n    *   [Android TV](/tv)\n*   ### रिलीज़\n    \n    *   [Android 15](/about/versions/15)\n    *   [Android 14](/about/versions/14)\n    *   [Android 13](/about/versions/13)\n    *   [Android 12](/about/versions/12)\n    *   [Android 11](/about/versions/11)\n    *   [Android 10](/about/versions/10)\n    *   [Pie](/about/versions/pie)\n*   ### दस्तावेज़ और डाउनलोड\n    \n    *   [Android Studio गाइड](/studio/intro)\n    *   [डेवलपर गाइड](/guide)\n    *   [API (एपीआई) संदर्भ](/reference)\n    *   [Android Studio डाउनलोड करें](/studio)\n    *   [Android एनडीके (NDK)](/ndk)\n*   ### सहायता\n    \n    *   [प्लैटफ़ॉर्म गड़बड़ी की रिपोर्ट करें](//issuetracker.google.com/issues/new?component=190923&amp;template=841312)\n    *   [दस्तावेज़ गड़बड़ी की रिपोर्ट करें](//issuetracker.google.com/issues/new?component=192697)\n    *   [Google Play support](//support.google.com/googleplay/android-developer)\n    *   [रिसर्च स्टडी में शामिल हों](https://g.co/userresearch/androiddeveloperfooter)\n\n [![Google Developers](https://www.gstatic.com/devrel-devsite/prod/v46d043083f27fa7361aea8506dabbd161e0b84f5a7c6df8d5e3cfad447dd4376/android/images/lockup-google-for-developers.svg)](https://developers.google.com/?hl=hi)\n\n*   [Android](//developer.android.com?hl=hi)\n*   [Chrome](//developer.chrome.com/home?hl=hi)\n*   [Firebase](//firebase.google.com?hl=hi)\n*   [Google Cloud Platform](//cloud.google.com?hl=hi)\n*   [सारे प्रॉडक्ट](//developers.google.com/products/?hl=hi)\n\n*   [निजता](//policies.google.com/privacy?hl=hi)\n*   [लाइसेंस](https://developer.android.com/license?hl=hi)\n*   [ब्रैंड दिशानिर्देश](https://developer.android.com/distribute/marketing-tools/brand-guidelines?hl=hi)\n*   [Manage cookies](#)\n*   ईमेल से समाचार और सलाह पाएं [सदस्य बनें](https://developer.android.com/updates?hl=hi)\n\n*   English\n*   Deutsch\n*   Español – América Latina\n*   Français\n*   Indonesia\n*   Italiano\n*   Polski\n*   Português – Brasil\n*   Tiếng Việt\n*   Türkçe\n*   Русский\n*   עברית\n*   العربيّة\n*   فارسی\n*   हिंदी\n*   বাংলা\n*   ภาษาไทย\n*   中文 – 简体\n*   中文 – 繁體\n*   日本語\n*   한국어&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01Equw8BUopyuZ2EMhjpusY2&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:3,&quot;currentWorkingDirectory&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing&quot;}}}],&quot;timestamp&quot;:&quot;2025-07-05T04:20:49.829Z&quot;,&quot;response_text&quot;:&quot;The page is in Hindi, but I can see this is the Android app signing documentation. Let me search for more specific information about the PEPK tool and the correct format:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;4af0bc0c-c26a-46ff-87c2-7f9f5723ab74&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01UHwZkMMAgQZ9jZe5s8YbUm&quot;,&quot;tool_name&quot;:&quot;str-replace-editor&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;str_replace\&quot;, \&quot;path\&quot;: \&quot;signing/create_keys.sh\&quot;, \&quot;instruction_reminder\&quot;: \&quot;ALWAYS BREAK DOWN EDITS INTO SMALLER CHUNKS OF AT MOST 150 LINES EACH.\&quot;, \&quot;old_str_1\&quot;: \&quot;# Download encryption public key from Google Play Store as encryption_public_key.pem\\nrm dreamtools.keystore\\n\\n\\n# this is to generate dreamtools_keystore.jks\\nkeytool -genkeypair -v -keystore dreamtools_keystore.jks -keyalg rsa -keysize 2048 -validity 10000 -alias dreamtools\\nkeytool -keystore dreamtools_keystore.jks -genkey -alias dreamtools -keyalg rsa\\n\\n# this is to generate dreamtools_private_key_path.pem\\njava -jar pepk.jar --keystore=dreamtools_keystore.jks --alias=dreamtools --output=dreamtools_private_key_path --rsa-aes-encryption --encryption-key-path=./encryption_public_key.pem\\n\\n# this is to export and encrypt our private key encrypted_private_key.pem\\n\\n#java -jar pepk.jar --keystore=dreamtools_keystore.jks --alias=dreamtools --output=drunzip dreeamtools.zip --include-cert --rsa-aes-encryption --encryption-key-path=./encryption_public_key.pem\&quot;, \&quot;old_str_start_line_number_1\&quot;: 1, \&quot;old_str_end_line_number_1\&quot;: 14, \&quot;new_str_1\&quot;: \&quot;#!/bin/bash\\n\\n# Google Play App Signing Key Generation Script\\n# \\n# IMPORTANT: Choose the right approach based on your situation:\\n# \\n# FOR NEW APPS (Recommended):\\n# - Let Google generate the app signing key automatically\\n# - Use the keystore you create here as the UPLOAD key only\\n# \\n# FOR EXISTING APPS:\\n# - Use PEPK tool to upload your existing signing key to Google\\n# - Then optionally create a separate upload key\\n\\necho \\\&quot;=== Google Play App Signing Setup ===\\\&quot;\\necho \\\&quot;\\\&quot;\\necho \\\&quot;Choose your scenario:\\\&quot;\\necho \\\&quot;1. NEW APP - Let Google generate app signing key (Recommended)\\\&quot;\\necho \\\&quot;2. EXISTING APP - Upload existing signing key to Google\\\&quot;\\necho \\\&quot;\\\&quot;\\nread -p \\\&quot;Enter choice (1 or 2): \\\&quot; choice\\n\\n# Clean up old files\\nrm -f dreamtools.keystore dreamtools_private_key_path\\n\\ncase $choice in\\n    1)\\n        echo \\\&quot;\\\&quot;\\n        echo \\\&quot;=== SCENARIO 1: NEW APP ===\\\&quot;\\n        echo \\\&quot;Creating upload keystore for new app...\\\&quot;\\n        echo \\\&quot;Google will generate the app signing key automatically.\\\&quot;\\n        echo \\\&quot;\\\&quot;\\n        \\n        # Generate upload keystore (this will be your upload key, NOT the app signing key)\\n        keytool -genkeypair -v \\\\\\n            -keystore dreamtools_upload_keystore.jks \\\\\\n            -keyalg RSA \\\\\\n            -keysize 2048 \\\\\\n            -validity 10000 \\\\\\n            -alias dreamtools_upload \\\\\\n            -dname \\\&quot;CN=DreamTools, OU=Development, O=YourCompany, L=YourCity, ST=YourState, C=US\\\&quot;\\n        \\n        echo \\\&quot;\\\&quot;\\n        echo \\\&quot;\\u2705 Upload keystore created: dreamtools_upload_keystore.jks\\\&quot;\\n        echo \\\&quot;\\\&quot;\\n        echo \\\&quot;NEXT STEPS:\\\&quot;\\n        echo \\\&quot;1. Sign your app bundle with this upload key\\\&quot;\\n        echo \\\&quot;2. Upload to Google Play Console\\\&quot;\\n        echo \\\&quot;3. Google will automatically generate and manage your app signing key\\\&quot;\\n        echo \\\&quot;4. Use this upload key for all future updates\\\&quot;\\n        ;;\\n        \\n    2)\\n        echo \\\&quot;\\\&quot;\\n        echo \\\&quot;=== SCENARIO 2: EXISTING APP ===\\\&quot;\\n        echo \\\&quot;Setting up PEPK tool for existing app signing key...\\\&quot;\\n        echo \\\&quot;\\\&quot;\\n        \\n        if [ ! -f \\\&quot;encryption_public_key.pem\\\&quot; ]; then\\n            echo \\\&quot;\\u274c ERROR: encryption_public_key.pem not found!\\\&quot;\\n            echo \\\&quot;Please download it from Google Play Console:\\\&quot;\\n            echo \\\&quot;Play Console &gt; Your App &gt; Release &gt; Setup &gt; App signing\\\&quot;\\n            echo \\\&quot;Download the 'App signing key certificate' public key\\\&quot;\\n            exit 1\\n        fi\\n        \\n        if [ ! -f \\\&quot;dreamtools_keystore.jks\\\&quot; ]; then\\n            echo \\\&quot;Creating app signing keystore...\\\&quot;\\n            keytool -genkeypair -v \\\\\\n                -keystore dreamtools_keystore.jks \\\\\\n                -keyalg RSA \\\\\\n                -keysize 2048 \\\\\\n                -validity 10000 \\\\\\n                -alias dreamtools \\\\\\n                -dname \\\&quot;CN=DreamTools, OU=Development, O=YourCompany, L=YourCity, ST=YourState, C=US\\\&quot;\\n        fi\\n        \\n        # Use PEPK tool to encrypt the signing key for Google\\n        echo \\\&quot;Encrypting signing key with PEPK tool...\\\&quot;\\n        java -jar pepk.jar \\\\\\n            --keystore=dreamtools_keystore.jks \\\\\\n            --alias=dreamtools \\\\\\n            --output=dreamtools_encrypted_signing_key \\\\\\n            --include-cert \\\\\\n            --rsa-aes-encryption \\\\\\n            --encryption-key-path=./encryption_public_key.pem\\n        \\n        echo \\\&quot;\\\&quot;\\n        echo \\\&quot;\\u2705 Encrypted signing key created: dreamtools_encrypted_signing_key\\\&quot;\\n        echo \\\&quot;\\\&quot;\\n        echo \\\&quot;NEXT STEPS:\\\&quot;\\n        echo \\\&quot;1. Upload 'dreamtools_encrypted_signing_key' to Google Play Console\\\&quot;\\n        echo \\\&quot;2. Optionally create a separate upload key for better security\\\&quot;\\n        echo \\\&quot;3. Use the upload key for future app updates\\\&quot;\\n        ;;\\n        \\n    *)\\n        echo \\\&quot;Invalid choice. Please run the script again and choose 1 or 2.\\\&quot;\\n        exit 1\\n        ;;\\nesac\\n\\necho \\\&quot;\\\&quot;\\necho \\\&quot;=== IMPORTANT SECURITY NOTES ===\\\&quot;\\necho \\\&quot;\\u2022 Keep your keystore files secure and backed up\\\&quot;\\necho \\\&quot;\\u2022 Never share your private keys\\\&quot;\\necho \\\&quot;\\u2022 Use strong passwords for your keystores\\\&quot;\\necho \\\&quot;\\u2022 Consider using a separate upload key for better security\\\&quot;\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Based on my research, I can see the issue with your Google Play signing key. The problem is that the PEPK tool generates a binary encrypted file, but Google Play Console expects a different format. Let me help you fix this issue.\n\n## Analysis of the Problem\n\nThe issue is that you're trying to upload the binary file `dreamtools_private_key_path` generated by the PEPK tool directly to Google Play Console, but Google Play Console expects a different format for private key uploads.\n\n## Solution\n\nHere's how to fix the issue:\n\n### Option 1: Use the PEPK Tool Correctly (Recommended)\n\nThe PEPK tool is designed for **existing apps** that need to enroll in Play App Signing. If this is a **new app**, you should let Google generate the app signing key for you.\n\nLet me check if you need to use a different approach:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;- [Google Play Upload: The private key was not properly encrypted or ...](https://www.b4x.com/android/forum/threads/google-play-upload-the-private-key-was-not-properly-encrypted-or-is-not-a-type-of-key-we-support.128077/)\n  Feb 26, 2021 ... Android Question Google Play Upload: The private key was not properly encrypted ... pepk tool the upload works fine and the key is accepted by ...\n\n- [android - .net maui Play app signing The private key was not ...](https://stackoverflow.com/questions/79289401/net-maui-play-app-signing-the-private-key-was-not-properly-encrypted-or-is-not)\n  Dec 17, 2024 ... net maui Play app signing The private key was not properly encrypted ... After I download the public key, download the PEPK tool, I run this ...\n\n- [Need help with signing update for Google Play android app : r ...](https://www.reddit.com/r/gamemaker/comments/1bcv5tc/need_help_with_signing_update_for_google_play/)\n  Mar 13, 2024 ... \&quot;The private key was not properly encrypted, or is not a type ... PEPK tool, and if so where and how, or do I need something else? The ...\n\n- [java - The private key was not properly encrypted, or is not a type of ...](https://stackoverflow.com/questions/76580388/the-private-key-was-not-properly-encrypted-or-is-not-a-type-of-key-we-support-w)\n  Jun 29, 2023 ... .net maui Play app signing The private key was not properly encrypted ... Having trouble with the encryption key for PEPK tool · 0 · To upload ...&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01TDZqcDSRitoBUWkp7VeVbq&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:3,&quot;currentWorkingDirectory&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing&quot;}}}],&quot;timestamp&quot;:&quot;2025-07-05T04:21:00.827Z&quot;,&quot;response_text&quot;:&quot;Based on my research, I can see the issue with your Google Play signing key. The problem is that the PEPK tool generates a binary encrypted file, but Google Play Console expects a different format. Let me help you fix this issue.\n\n## Analysis of the Problem\n\nThe issue is that you're trying to upload the binary file `dreamtools_private_key_path` generated by the PEPK tool directly to Google Play Console, but Google Play Console expects a different format for private key uploads.\n\n## Solution\n\nHere's how to fix the issue:\n\n### Option 1: Use the PEPK Tool Correctly (Recommended)\n\nThe PEPK tool is designed for **existing apps** that need to enroll in Play App Signing. If this is a **new app**, you should let Google generate the app signing key for you.\n\nLet me check if you need to use a different approach:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;bd365a4b-f2ce-4da3-8d2e-1c544074ad8a&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01DmsDb2njuCLzEQpBVF8sbz&quot;,&quot;tool_name&quot;:&quot;save-file&quot;,&quot;input_json&quot;:&quot;{\&quot;instructions_reminder\&quot;: \&quot;LIMIT THE FILE CONTENT TO AT MOST 300 LINES. IF MORE CONTENT NEEDS TO BE ADDED USE THE str-replace-editor TOOL TO EDIT THE FILE AFTER IT HAS BEEN CREATED.\&quot;, \&quot;path\&quot;: \&quot;signing/generate_upload_certificate.sh\&quot;, \&quot;file_content\&quot;: \&quot;#!/bin/bash\\n\\n# Generate Upload Certificate for Google Play Console\\n# This script creates a PEM certificate file that can be uploaded to Google Play Console\\n\\necho \\\&quot;=== Generate Upload Certificate for Google Play Console ===\\\&quot;\\necho \\\&quot;\\\&quot;\\n\\n# Check if keystore exists\\nif [ ! -f \\\&quot;dreamtools_upload_keystore.jks\\\&quot; ]; then\\n    echo \\\&quot;\\u274c ERROR: dreamtools_upload_keystore.jks not found!\\\&quot;\\n    echo \\\&quot;Please run create_keys.sh first to generate the upload keystore.\\\&quot;\\n    exit 1\\nfi\\n\\necho \\\&quot;Generating upload certificate from keystore...\\\&quot;\\n\\n# Generate the upload certificate in PEM format\\nkeytool -export -rfc \\\\\\n    -keystore dreamtools_upload_keystore.jks \\\\\\n    -alias dreamtools_upload \\\\\\n    -file dreamtools_upload_certificate.pem\\n\\nif [ $? -eq 0 ]; then\\n    echo \\\&quot;\\\&quot;\\n    echo \\\&quot;\\u2705 Upload certificate generated: dreamtools_upload_certificate.pem\\\&quot;\\n    echo \\\&quot;\\\&quot;\\n    echo \\\&quot;NEXT STEPS:\\\&quot;\\n    echo \\\&quot;1. Go to Google Play Console\\\&quot;\\n    echo \\\&quot;2. Navigate to: Your App &gt; Release &gt; Setup &gt; App signing\\\&quot;\\n    echo \\\&quot;3. If prompted to upload a certificate, upload: dreamtools_upload_certificate.pem\\\&quot;\\n    echo \\\&quot;4. Sign your app bundle with dreamtools_upload_keystore.jks\\\&quot;\\n    echo \\\&quot;5. Upload the signed app bundle to Google Play Console\\\&quot;\\n    echo \\\&quot;\\\&quot;\\n    echo \\\&quot;CERTIFICATE CONTENT:\\\&quot;\\n    echo \\\&quot;====================\\\&quot;\\n    cat dreamtools_upload_certificate.pem\\n    echo \\\&quot;====================\\\&quot;\\nelse\\n    echo \\\&quot;\\u274c ERROR: Failed to generate certificate\\\&quot;\\n    echo \\\&quot;Please check your keystore password and try again\\\&quot;\\n    exit 1\\nfi\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now let me create a helper script to properly generate the upload certificate that Google Play Console expects:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Successfully edited the file signing/create_keys.sh.\nResult for str_replace for entry with index [1]:\nReplacement successful.\nnew_str starts at line 1 and ends at line 108.\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01UHwZkMMAgQZ9jZe5s8YbUm&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:3,&quot;currentWorkingDirectory&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing&quot;}}}],&quot;timestamp&quot;:&quot;2025-07-05T04:21:32.213Z&quot;,&quot;response_text&quot;:&quot;Now let me create a helper script to properly generate the upload certificate that Google Play Console expects:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;726292b9-ca71-4a7a-9305-488aa34c2013&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01SLVA4itPQYjpyLe3DTdX7H&quot;,&quot;tool_name&quot;:&quot;launch-process&quot;,&quot;input_json&quot;:&quot;{\&quot;command\&quot;: \&quot;chmod +x create_keys.sh generate_upload_certificate.sh\&quot;, \&quot;cwd\&quot;: \&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing\&quot;, \&quot;wait\&quot;: true, \&quot;max_wait_seconds\&quot;: 10}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now let me make both scripts executable:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;File saved.  Saved file {signing/generate_upload_certificate.sh}&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01DmsDb2njuCLzEQpBVF8sbz&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:3,&quot;currentWorkingDirectory&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing&quot;}}}],&quot;timestamp&quot;:&quot;2025-07-05T04:21:45.323Z&quot;,&quot;response_text&quot;:&quot;Now let me make both scripts executable:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;7eb11f9e-7b35-48c3-8863-313abba8942c&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:5,&quot;content&quot;:&quot;&quot;,&quot;tool_use&quot;:{&quot;tool_use_id&quot;:&quot;toolu_01Ti4ACYXrXBcaSYQSE3gdvS&quot;,&quot;tool_name&quot;:&quot;save-file&quot;,&quot;input_json&quot;:&quot;{\&quot;instructions_reminder\&quot;: \&quot;LIMIT THE FILE CONTENT TO AT MOST 300 LINES. IF MORE CONTENT NEEDS TO BE ADDED USE THE str-replace-editor TOOL TO EDIT THE FILE AFTER IT HAS BEEN CREATED.\&quot;, \&quot;path\&quot;: \&quot;signing/GOOGLE_PLAY_SIGNING_GUIDE.md\&quot;, \&quot;file_content\&quot;: \&quot;# Google Play App Signing - Fix for \\\&quot;Private key was not properly encrypted\\\&quot; Error\\n\\n## Problem\\nYou're getting the error: \\\&quot;The private key was not properly encrypted, or is not a type of key we support\\\&quot; when trying to upload your private key to Google Play Console.\\n\\n## Root Cause\\nThe PEPK tool generates a binary encrypted file that is meant for **existing apps** enrolling in Play App Signing. For **new apps**, Google Play Console expects either:\\n1. No private key upload (let Google generate it automatically) - **RECOMMENDED**\\n2. A PEM certificate file for upload key registration\\n\\n## Solution\\n\\n### Option 1: New App - Let Google Generate App Signing Key (RECOMMENDED)\\n\\nThis is the recommended approach for new apps:\\n\\n1. **Run the updated script:**\\n   ```bash\\n   cd signing\\n   ./create_keys.sh\\n   # Choose option 1 when prompted\\n   ```\\n\\n2. **Sign your app bundle:**\\n   ```bash\\n   # Use Android Studio or command line to sign with the upload keystore\\n   jarsigner -verbose -sigalg SHA256withRSA -digestalg SHA-256 \\\\\\n     -keystore dreamtools_upload_keystore.jks \\\\\\n     your-app-bundle.aab dreamtools_upload\\n   ```\\n\\n3. **Upload to Google Play Console:**\\n   - Go to Google Play Console\\n   - Create new app or go to existing app\\n   - Upload your signed app bundle\\n   - Google will automatically generate and manage the app signing key\\n   - Your upload keystore becomes the upload key\\n\\n### Option 2: Existing App - Upload Existing Signing Key\\n\\nIf you have an existing app that needs to enroll in Play App Signing:\\n\\n1. **Download encryption public key:**\\n   - Go to Google Play Console &gt; Your App &gt; Release &gt; Setup &gt; App signing\\n   - Download the encryption public key as `encryption_public_key.pem`\\n   - Place it in the `signing` directory\\n\\n2. **Run the script:**\\n   ```bash\\n   cd signing\\n   ./create_keys.sh\\n   # Choose option 2 when prompted\\n   ```\\n\\n3. **Upload the encrypted key:**\\n   - Upload the generated `dreamtools_encrypted_signing_key` file to Google Play Console\\n   - This file is what the PEPK tool is supposed to generate\\n\\n### Option 3: Upload Certificate Only (Alternative)\\n\\nIf you need to register an upload certificate separately:\\n\\n1. **Generate upload certificate:**\\n   ```bash\\n   cd signing\\n   ./generate_upload_certificate.sh\\n   ```\\n\\n2. **Upload to Google Play Console:**\\n   - Go to Google Play Console &gt; Your App &gt; Release &gt; Setup &gt; App signing\\n   - If there's an option to upload upload certificate, use `dreamtools_upload_certificate.pem`\\n\\n## Key Files Explained\\n\\n- `dreamtools_upload_keystore.jks` - Your upload keystore (keep this secure!)\\n- `dreamtools_upload_certificate.pem` - Public certificate for upload key registration\\n- `dreamtools_encrypted_signing_key` - PEPK-encrypted signing key for existing apps\\n- `encryption_public_key.pem` - Google's public key for PEPK encryption\\n\\n## Important Notes\\n\\n1. **For new apps**: Don't upload any private key. Let Google generate the app signing key.\\n2. **Upload vs App Signing Keys**: \\n   - Upload key: Used to sign app bundles you upload to Google Play\\n   - App signing key: Used by Google to sign APKs distributed to users\\n3. **Security**: Keep your upload keystore secure. If compromised, you can reset it through Google Play Console.\\n\\n## Troubleshooting\\n\\nIf you still get the error:\\n1. Make sure you're uploading the right file for your scenario\\n2. For new apps, try not uploading any private key at all\\n3. For existing apps, ensure you downloaded the correct encryption public key from Google Play Console\\n4. Verify the PEPK tool generated the file without errors\\n\\n## Next Steps After Fixing\\n\\n1. Sign your app bundle with the upload key\\n2. Upload to Google Play Console\\n3. Complete the app release process\\n4. Keep your upload keystore backed up and secure\&quot;}&quot;,&quot;mcp_server_name&quot;:&quot;&quot;,&quot;mcp_tool_name&quot;:&quot;&quot;}},{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;Now let me create a comprehensive guide to fix your issue:\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;Here are the results from executing the command.\n&lt;return-code&gt;\n0\n&lt;/return-code&gt;\n&lt;stdout&gt;\n\n&lt;/stdout&gt;\n&lt;stderr&gt;\n\n&lt;/stderr&gt;&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01SLVA4itPQYjpyLe3DTdX7H&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:4,&quot;currentWorkingDirectory&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing&quot;}}}],&quot;timestamp&quot;:&quot;2025-07-05T04:22:09.015Z&quot;,&quot;response_text&quot;:&quot;Now let me create a comprehensive guide to fix your issue:\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;status&quot;:&quot;success&quot;,&quot;request_id&quot;:&quot;f29f68b8-33af-4f1a-adf8-286b9de452a2&quot;,&quot;request_message&quot;:&quot;&quot;,&quot;structured_output_nodes&quot;:[{&quot;id&quot;:0,&quot;type&quot;:0,&quot;content&quot;:&quot;## Summary\n\nI've identified and fixed the issue with your Google Play signing key. The problem was that you were trying to upload a binary file generated by the PEPK tool, but Google Play Console expects a different approach depending on whether you have a new or existing app.\n\n### What I've Done:\n\n1. **Updated `create_keys.sh`** - Now provides two clear paths:\n   - **Option 1 (Recommended for new apps)**: Creates an upload keystore and lets Google generate the app signing key automatically\n   - **Option 2 (For existing apps)**: Properly uses the PEPK tool to encrypt your existing signing key\n\n2. **Created `generate_upload_certificate.sh`** - Generates a PEM certificate file that Google Play Console can accept for upload key registration\n\n3. **Created `GOOGLE_PLAY_SIGNING_GUIDE.md`** - Comprehensive guide explaining the solution and different scenarios\n\n### To Fix Your Issue:\n\n**For a new app (recommended):**\n```bash\ncd signing\n./create_keys.sh\n# Choose option 1\n```\n\nThis will create `dreamtools_upload_keystore.jks` which you should use to sign your app bundle. Google Play will automatically generate and manage the app signing key.\n\n**For an existing app:**\nFirst download the encryption public key from Google Play Console, then:\n```bash\ncd signing\n./create_keys.sh\n# Choose option 2\n```\n\nThis will create `dreamtools_encrypted_signing_key` which is the correct file to upload to Google Play Console.\n\nThe key insight is that the PEPK tool is specifically for existing apps that need to enroll in Play App Signing, not for new apps. For new apps, Google's recommended approach is to let them generate the app signing key automatically while you use a separate upload key.\n&quot;},{&quot;id&quot;:2,&quot;type&quot;:2,&quot;content&quot;:&quot;&quot;},{&quot;id&quot;:3,&quot;type&quot;:3,&quot;content&quot;:&quot;&quot;}],&quot;seen_state&quot;:&quot;seen&quot;,&quot;structured_request_nodes&quot;:[{&quot;id&quot;:1,&quot;type&quot;:1,&quot;tool_result_node&quot;:{&quot;content&quot;:&quot;File saved.  Saved file {signing/GOOGLE_PLAY_SIGNING_GUIDE.md}&quot;,&quot;is_error&quot;:false,&quot;request_id&quot;:&quot;&quot;,&quot;tool_use_id&quot;:&quot;toolu_01Ti4ACYXrXBcaSYQSE3gdvS&quot;}},{&quot;id&quot;:2,&quot;type&quot;:4,&quot;ide_state_node&quot;:{&quot;workspaceFolders&quot;:[{&quot;repositoryRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;,&quot;folderRoot&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools&quot;}],&quot;workspaceFoldersUnchanged&quot;:false,&quot;currentTerminal&quot;:{&quot;terminalId&quot;:4,&quot;currentWorkingDirectory&quot;:&quot;/Users/stephen.kruger/IdeaProjects/DreamTools/signing&quot;}}}],&quot;timestamp&quot;:&quot;2025-07-05T04:22:30.905Z&quot;,&quot;response_text&quot;:&quot;## Summary\n\nI've identified and fixed the issue with your Google Play signing key. The problem was that you were trying to upload a binary file generated by the PEPK tool, but Google Play Console expects a different approach depending on whether you have a new or existing app.\n\n### What I've Done:\n\n1. **Updated `create_keys.sh`** - Now provides two clear paths:\n   - **Option 1 (Recommended for new apps)**: Creates an upload keystore and lets Google generate the app signing key automatically\n   - **Option 2 (For existing apps)**: Properly uses the PEPK tool to encrypt your existing signing key\n\n2. **Created `generate_upload_certificate.sh`** - Generates a PEM certificate file that Google Play Console can accept for upload key registration\n\n3. **Created `GOOGLE_PLAY_SIGNING_GUIDE.md`** - Comprehensive guide explaining the solution and different scenarios\n\n### To Fix Your Issue:\n\n**For a new app (recommended):**\n```bash\ncd signing\n./create_keys.sh\n# Choose option 1\n```\n\nThis will create `dreamtools_upload_keystore.jks` which you should use to sign your app bundle. Google Play will automatically generate and manage the app signing key.\n\n**For an existing app:**\nFirst download the encryption public key from Google Play Console, then:\n```bash\ncd signing\n./create_keys.sh\n# Choose option 2\n```\n\nThis will create `dreamtools_encrypted_signing_key` which is the correct file to upload to Google Play Console.\n\nThe key insight is that the PEPK tool is specifically for existing apps that need to enroll in Play App Signing, not for new apps. For new apps, Google's recommended approach is to let them generate the app signing key automatically while you use a separate upload key.\n&quot;,&quot;workspace_file_chunks&quot;:[]},{&quot;request_id&quot;:&quot;bd0774e9-95ba-4ced-ab87-cf8934f36151&quot;,&quot;uuid&quot;:&quot;2f27b378-de06-4321-93ec-1cf929d981e2&quot;,&quot;chatItemType&quot;:&quot;agentic-checkpoint-delimiter&quot;,&quot;status&quot;:&quot;success&quot;,&quot;fromTimestamp&quot;:0,&quot;toTimestamp&quot;:1751689363411,&quot;seen_state&quot;:&quot;seen&quot;}],&quot;feedbackStates&quot;:{&quot;temp-fe-2abef34a-53ad-42c5-8927-a6e6200a2a41&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-bcc496d1-0d07-4ec7-b30d-9a7591ef9a50&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-ea49028d-07fb-4826-bcad-25205e7d1cac&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-a8c3a024-9266-4cba-bc4c-2ec0a7f0d7ab&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-635110a1-c50d-4127-ac59-2f02509e2ed8&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-910b3221-95ab-414c-b20b-9ef902120d8a&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-b45da189-f875-4a47-9f39-ecea930bcaab&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-55701f73-fa8f-4064-964d-c6b28d50d07f&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-3e8e5846-f8fe-48e0-89be-9e5498490a55&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-7283d940-f3b6-49ce-8256-5f933263d358&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-43cb206d-e6f8-4eee-8cfa-2b9fb4ae536c&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-187411eb-ac53-4e68-b36a-1a69de4673ff&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-74d34378-a364-497b-b04b-ac7e332491e4&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-016ba5de-68d2-4cef-b923-8628656cb933&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;},&quot;temp-fe-51472197-43cb-40bb-b49e-a608592fe318&quot;:{&quot;selectedRating&quot;:0,&quot;feedbackNote&quot;:&quot;&quot;}},&quot;toolUseStates&quot;:{&quot;87486fc6-69fe-48b7-bff5-f86f85a67ca6;toolu_01Rv6AgSDbPg5GkjgfdJ6cho&quot;:{&quot;requestId&quot;:&quot;87486fc6-69fe-48b7-bff5-f86f85a67ca6&quot;,&quot;toolUseId&quot;:&quot;toolu_01Rv6AgSDbPg5GkjgfdJ6cho&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the result of running `cat -n` on signing/create_keys.sh:\n     1\t# Download encryption public key from Google Play Store as encryption_public_key.pem\n     2\trm dreamtools.keystore\n     3\t\n     4\t\n     5\t# this is to generate dreamtools_keystore.jks\n     6\tkeytool -genkeypair -v -keystore dreamtools_keystore.jks -keyalg rsa -keysize 2048 -validity 10000 -alias dreamtools\n     7\tkeytool -keystore dreamtools_keystore.jks -genkey -alias dreamtools -keyalg rsa\n     8\t\n     9\t# this is to generate dreamtools_private_key_path.pem\n    10\tjava -jar pepk.jar --keystore=dreamtools_keystore.jks --alias=dreamtools --output=dreamtools_private_key_path --rsa-aes-encryption --encryption-key-path=./encryption_public_key.pem\n    11\t\n    12\t# this is to export and encrypt our private key encrypted_private_key.pem\n    13\t\n    14\t#java -jar pepk.jar --keystore=dreamtools_keystore.jks --alias=dreamtools --output=drunzip dreeamtools.zip --include-cert --rsa-aes-encryption --encryption-key-path=./encryption_public_key.pem\nTotal lines in file: 14\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;b902aa63-bc49-4a50-b7c7-c657e5d900dd;toolu_01GoTMjJYM2XVGJFhqMLh81a&quot;:{&quot;requestId&quot;:&quot;b902aa63-bc49-4a50-b7c7-c657e5d900dd&quot;,&quot;toolUseId&quot;:&quot;toolu_01GoTMjJYM2XVGJFhqMLh81a&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here's the files and directories up to 2 levels deep in signing, excluding hidden items:\nsigning/create_keys.sh\nsigning/dreamtools_keystore.jks\nsigning/dreamtools_private_key_path\nsigning/encryption_public_key.pem\nsigning/pepk.jar\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;fc5a00a7-a8ed-47f1-bcf4-710eff2e3e1b;toolu_01GBJMTZo8C9rRbnAzvJhfGo&quot;:{&quot;requestId&quot;:&quot;fc5a00a7-a8ed-47f1-bcf4-710eff2e3e1b&quot;,&quot;toolUseId&quot;:&quot;toolu_01GBJMTZo8C9rRbnAzvJhfGo&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here are the results from executing the command.\n&lt;return-code&gt;\n0\n&lt;/return-code&gt;\n&lt;stdout&gt;\ndreamtools_private_key_path: data\n\n&lt;/stdout&gt;\n&lt;stderr&gt;\n\n&lt;/stderr&gt;&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;73f3de2e-81e6-436c-9a30-e650d1f8f03c;toolu_013PCf1PZy5m4S9VUiKGJNSJ&quot;:{&quot;requestId&quot;:&quot;73f3de2e-81e6-436c-9a30-e650d1f8f03c&quot;,&quot;toolUseId&quot;:&quot;toolu_013PCf1PZy5m4S9VUiKGJNSJ&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here are the results from executing the command.\n        &lt;return-code&gt;\n        0\n        &lt;/return-code&gt;\n        &lt;stdout&gt;\n        00000000  60 39 b2 dd 44 fa dd 7b  73 a4 78 c1 4a 8d c8 dd  |`9..D..{s.x.J...|\n00000010  cc 02 6f b9 14 dd ea 7f  b1 40 6b 13 d3 29 80 89  |..o......@k..)..|\n00000020  f6 ab a1 43 a7 48 6d 2e  8b 5e eb 24 2c 51 11 5f  |...C.Hm..^.$,Q._|\n00000030  6d a6 87 ea 1c 2a ee 06  aa a9 70 17 f6 5c 8e e8  |m....*....p..\\..|\n00000040  4e 6b a0 e3 6c b9 21 20  e8 85 68 30 08 90 bc 16  |Nk..l.! ..h0....|\n\n        &lt;/stdout&gt;\n        &lt;stderr&gt;\n        \n        &lt;/stderr&gt;&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;d5f7b3bb-5b00-4683-ba25-e35d5822c001;toolu_01VySycNFejZQrv7PdvGPatX&quot;:{&quot;requestId&quot;:&quot;d5f7b3bb-5b00-4683-ba25-e35d5822c001&quot;,&quot;toolUseId&quot;:&quot;toolu_01VySycNFejZQrv7PdvGPatX&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;- [android - How to generate an upload key for Google App Signing ...](https://stackoverflow.com/questions/44090926/how-to-generate-an-upload-key-for-google-app-signing)\n  May 20, 2017 ... I created an app entry on the Play console. Then I activated Google Play App Signing; I uploaded my signed APK with a normal keystore file. And ...\n\n- [I am unable to upload my updated app bundle because i get the App ...](https://support.google.com/googleplay/android-developer/thread/241757169/i-am-unable-to-upload-my-updated-app-bundle-because-i-get-the-app-bundle-signed-with-a-wrong-key?hl=en)\n  Oct 31, 2023 ... What private key is it expecting? How to get it? We are now unable to upload our new bundle to update the app and the deadline is already here.\n\n- [How to convert a .p12 certificate to use with Google Play App ...](https://github.com/airsdk/Adobe-Runtime-Support/discussions/3405)\n  pem: This is simply the public key file I download from Google console, right? ... file generated that I would then upload to Google Play Console. So, a ...\n\n- [Create and delete service account keys - Google Cloud](https://cloud.google.com/iam/docs/keys-create-delete)\n  Set up authentication. Select the tab for how you plan to use the samples on this page: Console More.\n\n- [Build an AAB file ready for uploading to the Google Play Console ...](https://github.com/MonoGame/MonoGame/discussions/8134)\n  I uploaded some apps before in the pre AAB Format time, so when simple APKs where a thing :) Now I know there is a tool for that now \&quot;bundletool\&quot; I think which ...&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;6a0173e4-fc15-4e46-ad62-970a483016c2;toolu_01WCgdmoJbmU9XdhKvt4EBkp&quot;:{&quot;requestId&quot;:&quot;6a0173e4-fc15-4e46-ad62-970a483016c2&quot;,&quot;toolUseId&quot;:&quot;toolu_01WCgdmoJbmU9XdhKvt4EBkp&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;- [Google Play Upload: The private key was not properly encrypted or ...](https://www.b4x.com/android/forum/threads/google-play-upload-the-private-key-was-not-properly-encrypted-or-is-not-a-type-of-key-we-support.128077/)\n  Feb 26, 2021 ... I receive an error message on the Google Play Console: \&quot;The private key was not properly encrypted or is not a type of key we support.\&quot;\n\n- [android - .net maui Play app signing The private key was not ...](https://stackoverflow.com/questions/79289401/net-maui-play-app-signing-the-private-key-was-not-properly-encrypted-or-is-not)\n  Dec 17, 2024 ... pem file that it generated, and I get the error message, \&quot;The private key was not properly encrypted, or is not a type of key we support.\&quot; I ...\n\n- [Do we need to create New keystore for google app signing (app ...](https://www.b4x.com/android/forum/threads/do-we-need-to-create-new-keystore-for-google-app-signing-app-bundle.128461/)\n  Mar 9, 2021 ... ... upload key with the pepk.jar ... Google Play Upload: The private key was not properly encrypted or is not a type of key we support.\n\n- [Need help with signing update for Google Play android app : r ...](https://www.reddit.com/r/gamemaker/comments/1bcv5tc/need_help_with_signing_update_for_google_play/)\n  Mar 13, 2024 ... \&quot;The private key was not properly encrypted, or is not a type of key we support\&quot;. How do I fix this? Are these even the right steps ...\n\n- [java - The private key was not properly encrypted, or is not a type of ...](https://stackoverflow.com/questions/76580388/the-private-key-was-not-properly-encrypted-or-is-not-a-type-of-key-we-support-w)\n  Jun 29, 2023 ... The private key was not properly encrypted, or is not a type of key ... Uploading Android App Bundle to Google Play Console - key signing error.&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;6a4b34aa-6034-4070-84dd-3d481179dadc;toolu_01KQ9k1CXZDjqzQsfsyXjJPv&quot;:{&quot;requestId&quot;:&quot;6a4b34aa-6034-4070-84dd-3d481179dadc&quot;,&quot;toolUseId&quot;:&quot;toolu_01KQ9k1CXZDjqzQsfsyXjJPv&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Just a moment...\n\nEnable JavaScript and cookies to continue&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;6444d36b-1dd3-4e80-92e4-855e70406956;toolu_01WJJwuKT2X9AWRAPyYCRr8o&quot;:{&quot;requestId&quot;:&quot;6444d36b-1dd3-4e80-92e4-855e70406956&quot;,&quot;toolUseId&quot;:&quot;toolu_01WJJwuKT2X9AWRAPyYCRr8o&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;- [Sign your app | Android Studio | Android Developers](https://developer.android.com/studio/publish/app-signing)\n  Jan 24, 2025 ... ... upload key before uploading it to Google Play. If you need to ... run the PEPK tool, and upload the generated file with your encrypted key.\n\n- [App unterschreiben | Android Studio | Android Developers](https://developer.android.com/studio/publish/app-signing?hl=de)\n  Jan 24, 2025 ... Sie behalten den Uploadschlüssel und verwenden ihn, um Ihre App für den Upload in den Google Play Store zu signieren. ... PEPK-Tools und zum ...\n\n- [Cómo firmar tu app | Android Studio | Android Developers](https://developer.android.com/studio/publish/app-signing?hl=es-419)\n  Jan 24, 2025 ... Aprende conceptos importantes relacionados con la firma y la seguridad de las apps, cómo firmar tu app para publicarla en Google Play usando ...\n\n- [Signer votre application | Android Studio | Android Developers](https://developer.android.com/studio/publish/app-signing?hl=fr)\n  Jan 24, 2025 ... ... Google Play, et au service Signature d'application Play ... L'option Export encrypted key (Exporter la clé chiffrée) dans Android Studio est ...\n\n- [Menandatangani aplikasi Anda | Android Studio | Android Developers](https://developer.android.com/studio/publish/app-signing?hl=id)\n  Pilih salah satu opsi yang paling mendeskripsikan kunci penandatanganan yang ingin Anda upload ke Google Play, lalu ikuti petunjuk yang ditampilkan. ... PEPK, dan ...&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;9a1dec39-04f7-40a7-b706-71ffdf04d948;toolu_01Equw8BUopyuZ2EMhjpusY2&quot;:{&quot;requestId&quot;:&quot;9a1dec39-04f7-40a7-b706-71ffdf04d948&quot;,&quot;toolUseId&quot;:&quot;toolu_01Equw8BUopyuZ2EMhjpusY2&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;                अपने ऐप्लिकेशन पर हस्ताक्षर करना  |  Android Studio  |  Android Developers         [सीधे मुख्य कॉन्टेंट पर जाएं](#main-content)\n\n [![Android Developers](https://www.gstatic.com/devrel-devsite/prod/v46d043083f27fa7361aea8506dabbd161e0b84f5a7c6df8d5e3cfad447dd4376/android/images/lockup.png)](/)\n\n[इन्हें ज़रूर आज़माएं](https://developer.android.com/get-started?hl=hi)\n\n*   एआई (AI) के अनुभव बनाएं\n*   Gemini API वगैरह की मदद से, एआई की मदद से काम करने वाले Android ऐप्लिकेशन बनाएं.\n*   [\n    \n    शुरू करना\n    \n    ](https://developer.android.com/ai?hl=hi)\n\n*   शुरू करना\n*   अपना पहला ऐप्लिकेशन बनाने से शुरुआत करें. हमारे ट्रेनिंग कोर्स को अच्छी तरह से पढ़ें या खुद ही ऐप्लिकेशन डेवलपमेंट के बारे में जानें.\n*   [\n    \n    नमस्ते दुनिया\n    \n    ](https://developer.android.com/get-started/overview?hl=hi)\n*   [\n    \n    ट्रेनिंग कोर्स\n    \n    ](https://developer.android.com/courses?hl=hi)\n*   [\n    \n    ट्यूटोरियल\n    \n    ](https://developer.android.com/get-started/codelabs?hl=hi)\n*   [\n    \n    टीमों के लिए कॉम्पोज़ करना\n    \n    ](https://developer.android.com/develop/ui/compose/adopt?hl=hi)\n*   [\n    \n    Android के लिए Kotlin\n    \n    ](https://developer.android.com/kotlin?hl=hi)\n*   [\n    \n    Play की मदद से कमाई करना ⬇️\n    \n    ](https://play.google.com/console/about/guides/play-commerce/?hl=hi)\n\n*   डिवाइस के हिसाब से ऐक्सेस की समयसीमा बढ़ाना\n*   ऐसे ऐप्लिकेशन बनाएं जिनसे आपके उपयोगकर्ताओं को फ़ोन से लेकर टैबलेट, स्मार्टवॉच, हेडसेट वगैरह पर आसानी से अनुभव मिल सके.\n*   [\n    \n    ज़रूरत के हिसाब से काम करने वाले ऐप्लिकेशन\n    \n    ](https://developer.android.com/adaptive-apps?hl=hi)\n*   [\n    \n    Android XR\n    \n    ](https://developer.android.com/xr?hl=hi)\n*   [\n    \n    Wear OS\n    \n    ](https://developer.android.com/wear?hl=hi)\n*   [\n    \n    कार के लिए Android\n    \n    ](https://developer.android.com/cars?hl=hi)\n*   [\n    \n    Android TV\n    \n    ](https://developer.android.com/tv?hl=hi)\n*   [\n    \n    ChromeOS\n    \n    ](https://developer.android.com/chrome-os?hl=hi)\n\n*   कैटगरी के हिसाब से बनाएं\n*   Google के दिशा-निर्देशों का पालन करके, अपने इस्तेमाल के उदाहरण के लिए मॉडल बनाने का तरीका जानें.\n*   [\n    \n    गेम\n    \n    ](https://developer.android.com/games?hl=hi)\n*   [\n    \n    कैमरा और मीडिया\n    \n    ](https://developer.android.com/media?hl=hi)\n*   [\n    \n    सोशल मीडिया और मैसेज सेवा\n    \n    ](https://developer.android.com/social-and-messaging?hl=hi)\n*   [\n    \n    सेहत और फ़िटनेस वाले ऐप्लिकेशन\n    \n    ](https://developer.android.com/health-and-fitness?hl=hi)\n*   [\n    \n    फ़ायदे पाना\n    \n    ](https://developer.android.com/productivity?hl=hi)\n*   [\n    \n    एंटरप्राइज़ ऐप्लिकेशन\n    \n    ](https://developer.android.com/work/overview?hl=hi)\n\n*   नवीनतम प्राप्त करें\n*   साल भर नई रिलीज़ के बारे में जानने के लिए संपर्क में रहें, झलक दिखाने वाले हमारे प्रोग्राम में शामिल हों, और हमें अपने सुझाव दें.\n*   [\n    \n    नए अपडेट\n    \n    ](https://developer.android.com/latest-updates?hl=hi)\n*   [\n    \n    एक्सपेरिमेंट के तौर पर किए गए अपडेट\n    \n    ](https://developer.android.com/latest-updates/experimental?hl=hi)\n*   [\n    \n    Android Studio की झलक\n    \n    ](https://developer.android.com/studio/preview?hl=hi)\n*   [\n    \n    जेटपैक और लाइब्रेरी कंपोज़ करें\n    \n    ](https://developer.android.com/jetpack/androidx/versions?hl=hi)\n*   [\n    \n    Wear OS रिलीज़\n    \n    ](https://developer.android.com/training/wearables/versions/latest?hl=hi)\n*   [\n    \n    प्राइवसी सैंडबॉक्स ↗️\n    \n    ](https://developer.android.com/design-for-safety/privacy-sandbox?hl=hi)\n\n[डिज़ाइन और प्लान](https://developer.android.com/design?hl=hi)\n\n*   बेहतरीन अनुभव\n*   अपने सबसे अच्छे उपयोगकर्ताओं को बेहतरीन अनुभव दें.\n*   [\n    \n    ज़्यादा जानें\n    \n    ](https://developer.android.com/quality/excellent?hl=hi)\n\n*   यूज़र इंटरफ़ेस (यूआई) डिज़ाइन\n*   Android के सबसे सही तरीकों का इस्तेमाल करके, खूबसूरत यूज़र इंटरफ़ेस डिज़ाइन करें.\n*   [\n    \n    Android के लिए डिज़ाइन\n    \n    ](https://developer.android.com/design/ui?hl=hi)\n*   [\n    \n    मोबाइल\n    \n    ](https://developer.android.com/design/ui/mobile?hl=hi)\n*   [\n    \n    अडैप्टिव यूज़र इंटरफ़ेस (यूआई)\n    \n    ](https://developer.android.com/design/ui/large-screens?hl=hi)\n*   [\n    \n    Android XR\n    \n    ](https://developer.android.com/design/ui/xr?hl=hi)\n*   [\n    \n    विजेट\n    \n    ](https://developer.android.com/design/ui/widget?hl=hi)\n*   [\n    \n    Wear OS\n    \n    ](https://developer.android.com/design/ui/wear?hl=hi)\n*   [\n    \n    Android TV\n    \n    ](https://developer.android.com/design/ui/tv?hl=hi)\n\n*   भवन निर्माण\n*   ऐप्लिकेशन लॉजिक और सेवाएं मज़बूत, जांच करने लायक, और मैनेज किए जा सकने वाले हों.\n*   [\n    \n    शुरुआती जानकारी\n    \n    ](https://developer.android.com/topic/architecture/intro?hl=hi)\n*   [\n    \n    पुस्तकालय\n    \n    ](https://developer.android.com/topic/libraries/view-binding?hl=hi)\n*   [\n    \n    नेविगेशन\n    \n    ](https://developer.android.com/guide/navigation/navigation-principles?hl=hi)\n*   [\n    \n    मॉड्यूलराइज़ेशन\n    \n    ](https://developer.android.com/topic/modularization?hl=hi)\n*   [\n    \n    टेस्ट करना\n    \n    ](https://developer.android.com/training/testing/fundamentals?hl=hi)\n\n*   गुणवत्ता\n*   ऐप्लिकेशन की क्वालिटी के लिए प्लान बनाएं और Play Store के दिशा-निर्देशों के मुताबिक हों.\n*   [\n    \n    खास जानकारी\n    \n    ](https://developer.android.com/quality?hl=hi)\n*   [\n    \n    मुख्य वैल्यू\n    \n    ](https://developer.android.com/quality/core-value?hl=hi)\n*   [\n    \n    उपयोगकर्ता अनुभव\n    \n    ](https://developer.android.com/quality/user-experience?hl=hi)\n*   [\n    \n    पहुंच-योग्यता\n    \n    ](https://developer.android.com/guide/topics/ui/accessibility?hl=hi)\n*   [\n    \n    तकनीकी क्वालिटी\n    \n    ](https://developer.android.com/quality/technical?hl=hi)\n*   [\n    \n    बेहतरीन अनुभव\n    \n    ](https://developer.android.com/quality/excellent?hl=hi)\n\n*   सुरक्षा\n*   ऐप्लिकेशन इस्तेमाल करने वाले लोगों को खतरों से सुरक्षित रखते हैं. साथ ही, Android का सुरक्षित अनुभव देते हैं.\n*   [\n    \n    खास जानकारी\n    \n    ](https://developer.android.com/security?hl=hi)\n*   [\n    \n    निजता\n    \n    ](https://developer.android.com/privacy-and-security/about?hl=hi)\n*   [\n    \n    अनुमतियां\n    \n    ](https://developer.android.com/guide/topics/permissions/overview?hl=hi)\n*   [\n    \n    पहचान\n    \n    ](https://developer.android.com/identity?hl=hi)\n*   [\n    \n    धोखाधड़ी से बचाव\n    \n    ](https://developer.android.com/security/fraud-prevention?hl=hi)\n\n[कॉन्टेंट बनाना](https://developer.android.com/develop?hl=hi)\n\n*   Android Studio में Gemini\n*   Android ऐप्लिकेशन को बेहतर बनाने के लिए, आपका एआई डेवलपमेंट साथी.\n*   [\n    \n    ज़्यादा जानें\n    \n    ](https://developer.android.com/gemini-in-android?hl=hi)\n*   [\n    \n    Android Studio डाउनलोड करें\n    \n    ](https://developer.android.com/studio?hl=hi)\n\n*   मुख्य जगहें\n*   अपनी ज़रूरत की सुविधाओं के सैंपल और दस्तावेज़ पाएं.\n*   [\n    \n    सैंपल\n    \n    ](https://developer.android.com/samples?hl=hi)\n*   [\n    \n    यूज़र इंटरफ़ेस\n    \n    ](https://developer.android.com/develop/ui?hl=hi)\n*   [\n    \n    बैकग्राउंड में हो रहा काम\n    \n    ](https://developer.android.com/develop/background-work?hl=hi)\n*   [\n    \n    डेटा और फ़ाइलें\n    \n    ](https://developer.android.com/guide/topics/data?hl=hi)\n*   [\n    \n    कनेक्टिविटी\n    \n    ](https://developer.android.com/develop/connectivity?hl=hi)\n*   [\n    \n    सभी मुख्य इलाके ⤵️\n    \n    ](https://developer.android.com/develop?hl=hi#core-areas)\n\n*   टूल और वर्कफ़्लो\n*   अपने ऐप्लिकेशन को लिखने और बनाने के लिए, IDE का इस्तेमाल करें या अपनी पाइपलाइन बनाएं.\n*   [\n    \n    कोड लिखना और डीबग करना\n    \n    ](https://developer.android.com/studio/write?hl=hi)\n*   [\n    \n    प्रोजेक्ट बनाएं\n    \n    ](https://developer.android.com/build/gradle-build-overview?hl=hi)\n*   [\n    \n    अपने ऐप्लिकेशन का परीक्षण करें\n    \n    ](https://developer.android.com/training/testing?hl=hi)\n*   [\n    \n    परफ़ॉर्मेंस मोड\n    \n    ](https://developer.android.com/topic/performance/overview?hl=hi)\n*   [\n    \n    कमांड-लाइन टूल\n    \n    ](https://developer.android.com/tools?hl=hi)\n*   [\n    \n    Gradle प्लग इन एपीआई\n    \n    ](https://developer.android.com/reference/tools/gradle-api?hl=hi)\n\n*   डिवाइस की तकनीक\n*   डिवाइस के नाप या आकार के लिए कोड लिखें. डिवाइसों को कनेक्ट करें और डेटा शेयर करें.\n*   [\n    \n    अडैप्टिव यूज़र इंटरफ़ेस (यूआई)\n    \n    ](https://developer.android.com/guide/topics/large-screens/get-started-with-large-screens?hl=hi)\n*   [\n    \n    Wear OS\n    \n    ](https://developer.android.com/training/wearables?hl=hi)\n*   [\n    \n    Android XR\n    \n    ](https://developer.android.com/develop/xr?hl=hi)\n*   [\n    \n    Android Health\n    \n    ](https://developer.android.com/health-and-fitness/guides?hl=hi)\n*   [\n    \n    कार के लिए Android\n    \n    ](https://developer.android.com/training/cars?hl=hi)\n*   [\n    \n    Android TV\n    \n    ](https://developer.android.com/training/tv?hl=hi)\n*   [\n    \n    सभी डिवाइस ⤵️\n    \n    ](https://developer.android.com/develop?hl=hi#devices)\n\n*   पुस्तकालय\n*   पूरी जानकारी के साथ एपीआई के रेफ़रंस दस्तावेज़ ब्राउज़ करें.\n*   [\n    \n    Android प्लैटफ़ॉर्म\n    \n    ](https://developer.android.com/reference/packages?hl=hi)\n*   [\n    \n    जेटपैक लाइब्रेरी\n    \n    ](https://developer.android.com/jetpack/androidx/explorer?hl=hi)\n*   [\n    \n    लाइब्रेरी कंपोज़ करें\n    \n    ](https://developer.android.com/jetpack/androidx/releases/compose?hl=hi)\n*   [\n    \n    Google Play सेवाएं ☂️\n    \n    ](https://developers.google.com/android/reference/packages?hl=hi)\n*   [\n    \n    Google Play SDK इंडेक्स ⬇️\n    \n    ](https://play.google.com/sdks?hl=hi)\n\n[Google Play](https://developer.android.com/distribute?hl=hi) [कम्यूनिटी](https://developer.android.com/community?hl=hi)\n\n/\n\n*   English\n*   Deutsch\n*   Español – América Latina\n*   Français\n*   Indonesia\n*   Italiano\n*   Polski\n*   Português – Brasil\n*   Tiếng Việt\n*   Türkçe\n*   Русский\n*   עברית\n*   العربيّة\n*   فارسی\n*   हिंदी\n*   বাংলা\n*   ภาษาไทย\n*   中文 – 简体\n*   中文 – 繁體\n*   日本語\n*   한국어\n\n[Android Studio](https://developer.android.com/studio?hl=hi) प्रवेश करें\n\n*   [Android Studio](https://developer.android.com/studio?hl=hi)\n\n[डाउनलोड करें](https://developer.android.com/studio?hl=hi) [आईडीई से जुड़ी गाइड](https://developer.android.com/studio/intro?hl=hi) [Android Studio में Gemini](https://developer.android.com/gemini-in-android?hl=hi) [कारोबारों के लिए Gemini](https://developer.android.com/gemini-for-businesses?hl=hi) [प्रॉम्प्ट गैलरी](https://developer.android.com/studio/prompt-gallery?hl=hi) [Gradle बिल्ड से जुड़ी गाइड](https://developer.android.com/build/gradle-build-overview?hl=hi) [SDK टूल से जुड़ी गाइड](https://developer.android.com/tools?hl=hi) [रिलीज़ से पहले झलक देखने के लिए बनाया गया वर्शन](https://developer.android.com/studio/preview?hl=hi) [![Android Developers](https://www.gstatic.com/devrel-devsite/prod/v46d043083f27fa7361aea8506dabbd161e0b84f5a7c6df8d5e3cfad447dd4376/android/images/lockup.png)](/)\n\n*   [इन्हें ज़रूर आज़माएं](/get-started)\n    *   और देखें\n*   [डिज़ाइन और प्लान](/design)\n    *   और देखें\n*   [कॉन्टेंट बनाना](/develop)\n    \n    *   और देखें\n    \n    *   [डाउनलोड करें](/studio)\n    *   [आईडीई से जुड़ी गाइड](/studio/intro)\n    *   [Android Studio में Gemini](/gemini-in-android)\n    *   [कारोबारों के लिए Gemini](/gemini-for-businesses)\n    *   [प्रॉम्प्ट गैलरी](/studio/prompt-gallery)\n    *   [Gradle बिल्ड से जुड़ी गाइड](/build/gradle-build-overview)\n    *   [SDK टूल से जुड़ी गाइड](/tools)\n    *   [रिलीज़ से पहले झलक देखने के लिए बनाया गया वर्शन](/studio/preview)\n*   [Google Play](/distribute)\n*   [कम्यूनिटी](/community)\n*   [Android Studio](/studio)\n\n*   Android Studio में नया क्या है\n    \n    *   [Android Studio में Meerkat की सुविधाओं के रिलीज़ नोट](/studio/releases)\n    *   [Android Emulator की जानकारी](/studio/releases/emulator)\n    *   [Android Studio की पिछली रिलीज़](/studio/releases/past-releases)\n    *   [Android Studio के रिलीज़ के नाम](/studio/releases/studio-release-names)\n    *   सेवा के इंटिग्रेशन\n        \n        *   [खास जानकारी](/studio/services)\n        *   [बंद किए गए सेवा इंटिग्रेशन](/studio/services/deprecated)\n        \n    \n*   Android Studio में Gemini\n    \n    *   [Gemini से मिलें](/studio/preview/gemini)\n    *   [Gemini की सुविधाएं](/studio/preview/gemini/features)\n    *   [कारोबारों के लिए Gemini](/studio/preview/gemini/gemini-for-businesses)\n    *   [Gemini से जवाब पाना](/studio/preview/gemini/chat)\n    *   [एजेंट मोड](/studio/preview/gemini/agent-mode)\n    *   [एआई की मदद से कोडिंग करें](/studio/preview/gemini/ai-code-completion)\n    *   [कोड को फिर से बनाना](/studio/preview/gemini/organize)\n    *   [Compose में एआई की मदद से टेक्स्ट लिखने की सुविधा](/studio/preview/gemini/compose)\n    *   [जांच करना और डीबग करना](/studio/preview/gemini/deploy)\n    *   [दस्तावेज़ का कोड और कमिट](/studio/preview/gemini/document)\n    *   [प्रॉम्प्ट गैलरी](/studio/prompt-gallery)\n    *   [Studio Labs](/studio/preview/gemini/labs)\n    *   [डेटा और निजता](/studio/preview/gemini/data-and-privacy)\n    *   [कॉन्टेक्स्ट शेयर करने की सुविधा कॉन्फ़िगर करें](/studio/preview/gemini/aiexclude)\n    *   [उपलब्धता](/studio/preview/gemini/availability)\n    \n*   Android Studio का इस्तेमाल शुरू करना\n    \n    *   [खास जानकारी](/studio/intro)\n    *   [Android Studio इंस्टॉल करें](/studio/install)\n    *   [Android Studio में नया यूज़र इंटरफ़ेस](/studio/intro/new-ui)\n    *   यूज़र इंटरफ़ेस (यूआई) के बारे में जानें\n        \n        *   [खास जानकारी](/studio/intro/user-interface)\n        *   [पहुंच-योग्यता सुविधाएं](/studio/intro/accessibility)\n        *   [कीबोर्ड शॉर्टकट](/studio/intro/keyboard-shortcuts)\n        \n    *   [वर्कफ़्लो की बुनियादी बातें](/studio/workflow)\n    \n*   अपना प्रोजेक्ट मैनेज करें\n    \n    *   [खास जानकारी](/studio/projects)\n    *   [प्रोजेक्ट बनाएं](/studio/projects/create-project)\n    *   [Android Studio पर माइग्रेट करना](/studio/intro/migrate)\n    *   [वर्शन कंट्रोल से जुड़ी बुनियादी बातें](/studio/projects/version-control)\n    *   [IDE कॉन्फ़िगर करें](/studio/intro/studio-config)\n    *   [IDE और टूल को अपडेट करें](/studio/intro/update)\n    *   [Play Feature Delivery के बारे में जानकारी](/guide/app-bundle/dynamic-delivery)\n    *   C और C++ कोड जोड़ें\n        \n        *   [खास जानकारी](/studio/projects/add-native-code)\n        *   [NDK और CMake इंस्टॉल करें](/studio/projects/install-ndk)\n        *   [AGP के लिए एनडीके (NDK) कॉन्फ़िगर करें](/studio/projects/configure-agp-ndk)\n        *   [CMake की सुविधा कॉन्फ़िगर करें](/studio/projects/configure-cmake)\n        *   [लिंक Gradle](/studio/projects/gradle-external-native-builds)\n        \n    *   [Android लाइब्रेरी बनाना](/studio/projects/android-library)\n    *   [इंटिग्रेशन बनाए रखने की सुविधा सेट अप करना](/studio/projects/continuous-integration)\n    \n*   अपना कोड लिखना\n    \n    *   [कोड को जल्दी और बेहतर तरीके से लिखना](/studio/write)\n    *   टेंप्लेट की मदद से काम करना\n        \n        *   [किसी टेंप्लेट से कोड जोड़ें](/studio/projects/templates)\n        *   [सैंपल कोड ढूंढें](/studio/write/sample-code)\n        *   [Java की क्लास या टाइप बनाना](/studio/write/create-java-class)\n        \n    *   [नए डिवाइस के लिए मॉड्यूल जोड़ें](/studio/projects/add-app-module)\n    *   [Java 8 भाषा सुविधाओं का उपयोग करें](/studio/write/java8-support)\n    *   [Java 8 लैंग्वेज की सहायता वाली टेबल](/studio/write/java8-support-table)\n    *   [ऐप्लिकेशन के संसाधन जोड़ें](/studio/write/add-resources)\n    *   यूज़र इंटरफ़ेस (यूआई) डेवलप करने के लिए टूल का इस्तेमाल करना\n        \n        *   [Compose का इस्तेमाल करके लेआउट बनाना](/jetpack/compose/tooling/previews)\n        *   [व्यू के साथ लेआउट तैयार करना](/studio/write/layout-editor)\n... additional lines truncated ...\n*   [Google Play सेवाएं ☂️](https://developers.google.com/android/reference/packages)\n*   [Google Play SDK इंडेक्स ⬇️](https://play.google.com/sdks)\n\n ![](https://developer.android.com/_static/images/translated.svg?hl=hi) इस पेज का अनुवाद [Cloud Translation API](//cloud.google.com/translate/?hl=hi) से किया गया है.\n\n*   [Android Developers](https://developer.android.com/?hl=hi)\n*   [कॉन्टेंट बनाना](https://developer.android.com/develop?hl=hi)\n*   [Android Studio](https://developer.android.com/studio?hl=hi)\n*   [आईडीई से जुड़ी गाइड](https://developer.android.com/studio/intro?hl=hi)\n\nअपने ऐप्लिकेशन पर हस्ताक्षर करना\n\nसंग्रह की मदद से व्यवस्थित रहें अपनी प्राथमिकताओं के आधार पर, कॉन्टेंट को सेव करें और कैटगरी में बांटें.\n\n\n============================================================================================================================================\n\nAndroid पर इंस्टॉल किए जाने या अपडेट किए जाने से पहले, यह ज़रूरी है कि सभी APKs पर एक सर्टिफ़िकेट के साथ डिजिटल रूप से साइन किया जाए. [Android ऐप्लिकेशन बंडल](https://developer.android.com/guide/app-bundle?hl=hi) का इस्तेमाल करके रिलीज़ करते समय, आपको Play Console में अपलोड करने से पहले, अपने ऐप्लिकेशन बंडल पर अपलोड कुंजी से साइन करना होगा. इसके बाद, Play ऐप्लिकेशन साइनिंग की सुविधा बाकी काम करेगी. Play Store या अन्य स्टोर पर APKs का इस्तेमाल करके डिस्ट्रिब्यूट किए जाने वाले ऐप्लिकेशन के लिए, आपको अपलोड करने के लिए अपने APKs को मैन्युअल तरीके से साइन करना होगा.\n\nइस पेज पर, ऐप्लिकेशन साइनिंग और सुरक्षा से जुड़े कुछ अहम कॉन्सेप्ट के बारे में बताया गया है. साथ ही, Android Studio का इस्तेमाल करके Google Play पर रिलीज़ करने के लिए, अपने ऐप्लिकेशन को साइन करने का तरीका और Play ऐप्लिकेशन साइनिंग को कॉन्फ़िगर करने का तरीका भी बताया गया है.\n\nयहां Google Play पर नया ऐप्लिकेशन साइन इन करने और पब्लिश करने के लिए, ज़रूरी चरणों की खास जानकारी दी गई है:\n\n1.  [अपलोड पासकोड और कीस्टोर जनरेट करना](#generate-key)\n2.  [अपने अपलोड पासकोड से ऐप्लिकेशन पर हस्ताक्षर करना](#sign_release)\n3.  [Play ऐप्लिकेशन साइनिंग की सुविधा को कॉन्फ़िगर करना](#enroll)\n4.  [Google Play पर अपना ऐप्लिकेशन अपलोड करना](https://developer.android.com/studio/publish/upload-bundle?hl=hi)\n5.  [अपने ऐप्लिकेशन की रिलीज़ तैयार करना और उसे रोल आउट करना](https://support.google.com/googleplay/android-developer/answer/7159011?hl=hi)\n\nअगर आपका ऐप्लिकेशन, पहले से ही Google Play Store पर किसी मौजूदा ऐप्लिकेशन साइनिंग पासकोड के साथ पब्लिश किया गया है या आपको Google से ऐप्लिकेशन साइनिंग पासकोड जनरेट कराने के बजाय, किसी नए ऐप्लिकेशन के लिए खुद से ऐप्लिकेशन साइनिंग पासकोड चुनना है, तो यह तरीका अपनाएं:\n\n1.  अपने ऐप्लिकेशन की _साइनिंग पासकोड_ से, [अपने ऐप्लिकेशन पर हस्ताक्षर करें](#sign_release).\n2.  Play ऐप्लिकेशन साइनिंग की सुविधा में, [अपने ऐप्लिकेशन की साइनिंग पासकोड अपलोड करें](#enroll_existing).\n3.  (सुझाया गया) अपने ऐप्लिकेशन के आने वाले अपडेट के लिए, [अपलोड सर्टिफ़िकेट जनरेट और रजिस्टर करें](#generate-key)\n4.  [Google Play पर अपना ऐप्लिकेशन अपलोड करना](https://developer.android.com/studio/publish/upload-bundle?hl=hi)\n5.  [अपने ऐप्लिकेशन की रिलीज़ तैयार करना और उसे रोल आउट करना](https://support.google.com/googleplay/android-developer/answer/7159011?hl=hi)\n\nइस पेज पर, अन्य ऐप स्टोर पर अपना ऐप्लिकेशन अपलोड करते समय, अपनी पासकोड मैनेज करने का तरीका भी बताया गया है. अगर Android Studio का इस्तेमाल नहीं किया जा रहा है या आपको कमांड लाइन से अपने ऐप्लिकेशन को साइन करना है, तो [`apksigner`](https://developer.android.com/studio/command-line/apksigner?hl=hi) का इस्तेमाल करने का तरीका जानें.\n\n**ध्यान दें:** अगर कोई Wear OS ऐप्लिकेशन बनाया जा रहा है, तो ऐप्लिकेशन पर हस्ताक्षर करने की प्रोसेस, इस पेज पर बताई गई प्रोसेस से अलग हो सकती है. [Wear OS ऐप्लिकेशन को पैकेज करने और पब्लिश करने](https://developer.android.com/training/wearables/apps/packaging?hl=hi) के बारे में जानकारी देखें.\n\nPlay ऐप्लिकेशन साइनिंग की सुविधा\n--------------------------------\n\nPlay ऐप्लिकेशन साइनिंग की मदद से, Google आपके ऐप्लिकेशन के साइनिंग पासकोड को मैनेज करता है और उसे सुरक्षित रखता है. साथ ही, इसका इस्तेमाल डिस्ट्रिब्यूशन के लिए आपके APK को साइन करने के लिए करता है. साथ ही, ऐप्लिकेशन बंडल, Google Play Store पर APKs बनाने और उन पर हस्ताक्षर करने की प्रोसेस को बाद के लिए छोड़ देते हैं. इसलिए, आपको अपना ऐप्लिकेशन बंडल अपलोड करने से पहले, Play ऐप्लिकेशन साइनिंग को कॉन्फ़िगर करना होगा. ऐसा करने पर, आपको ये फ़ायदे मिलेंगे:\n\n*   Android ऐप्लिकेशन बंडल का इस्तेमाल करें और Google Play के बेहतर डिलीवरी मोड के साथ काम करें. Android ऐप्लिकेशन बंडल की मदद से, आपके ऐप्लिकेशन का साइज़ बहुत कम हो जाता है और रिलीज़ करना आसान हो जाता है. साथ ही, इससे सुविधा वाले मॉड्यूल का इस्तेमाल किया जा सकता है और उपयोगकर्ताओं को ऐप्लिकेशन का तुरंत इस्तेमाल करने का अनुभव दिया जा सकता है.\n*   अपने साइनिंग पासकोड की सुरक्षा बढ़ाएं. साथ ही, Google Play पर अपलोड किए जाने वाले ऐप्लिकेशन बंडल पर साइन करने के लिए, अलग अपलोड पासकोड का इस्तेमाल करें.\n*   कुंजी को अपग्रेड करने की सुविधा की मदद से, ऐप्लिकेशन साइनिंग कुंजी को बदला जा सकता है. ऐसा तब करना पड़ता है, जब आपकी मौजूदा कुंजी से छेड़छाड़ की गई हो या आपको क्रिप्टोग्राफ़िक तरीके से ज़्यादा सुरक्षित कुंजी पर माइग्रेट करना हो\n    \n    **ध्यान दें:** सुरक्षा को पक्का करने के लिए, अपने-आप जनरेट हुई कुंजी या आपके दी गई कुंजी से Play ऐप्लिकेशन साइनिंग को कॉन्फ़िगर करने के बाद, अपने ऐप्लिकेशन की साइनिंग कुंजी की कॉपी वापस नहीं पाई जा सकती. साथ ही, Google आपातकालीन स्थिति में ऐप्लिकेशन को वापस लाने के लिए, कुंजी की बैकअप कॉपी सेव रख सकता है.\n    \n\nPlay ऐप्लिकेशन साइनिंग में दो पासकोड का इस्तेमाल किया जाता है: _ऐप्लिकेशन साइनिंग पासकोड_ और _अपलोड पासकोड_. इनके बारे में ज़्यादा जानकारी, [पासकोड और पासकोड स्टोर](#certificates-keystores) सेक्शन में दी गई है. अपलोड पासकोड आपके पास रहता है. इसका इस्तेमाल, Google Play Store पर अपलोड करने के लिए, अपने ऐप्लिकेशन पर साइन करने के लिए किया जाता है. Google आपकी पहचान की पुष्टि करने के लिए, अपलोड सर्टिफ़िकेट का इस्तेमाल करता है. साथ ही, डिस्ट्रिब्यूशन के लिए आपके APK पर, ऐप्लिकेशन साइनिंग पासकोड से हस्ताक्षर करता है. इस बारे में पहली इमेज में बताया गया है. अगर आपका पासकोड कभी खो जाता है या उसके साथ छेड़छाड़ होती है, तो अलग अपलोड पासकोड का इस्तेमाल करके, [अपलोड पासकोड को रीसेट करने का अनुरोध](https://support.google.com/googleplay/android-developer/answer/7384423?hl=hi#reset) किया जा सकता है.\n\nइसकी तुलना में, Play ऐप्लिकेशन साइनिंग की सुविधा के लिए ऑप्ट इन न करने वाले ऐप्लिकेशन के लिए, अगर आपके ऐप्लिकेशन की साइनिंग पासकोड खो जाती है, तो आपके पास अपने ऐप्लिकेशन को अपडेट करने का विकल्प नहीं होगा.\n\n**अहम जानकारी:** अगर आपको एक ही साइनिंग पासकोड का इस्तेमाल कई स्टोर पर करना है, तो [Play ऐप्लिकेशन साइनिंग को कॉन्फ़िगर](#enroll) करते समय, Google से पासकोड जनरेट कराने के बजाय, खुद का पासकोड दें.\n\n![](https://developer.android.com/static/studio/images/publish/appsigning_googleplayappsigningdiagram_2x.png?hl=hi)\n\n**पहली इमेज**. Play ऐप्लिकेशन साइनिंग की मदद से ऐप्लिकेशन को साइन करना\n\nआपके पासकोड उसी इन्फ़्रास्ट्रक्चर पर सेव किए जाते हैं जिसका इस्तेमाल Google अपनी पासकोड सेव करने के लिए करता है. यहां उन्हें Google की 'क्रिप्टोग्राफ़िक पासकोड के लिए मैनेजमेंट सेवा' की मदद से सुरक्षित रखा जाता है. [Google Cloud की सुरक्षा से जुड़े व्हाइट पेपर](https://services.google.com/fh/files/misc/security_whitepapers_march2018.pdf?hl=hi) पढ़कर, Google के तकनीकी इन्फ़्रास्ट्रक्चर के बारे में ज़्यादा जानें.\n\n'Play ऐप्लिकेशन साइनिंग' का इस्तेमाल करने पर, अगर आपका अपलोड पासकोड खो जाता है या फिर उसके साथ छेड़छाड़ होती है, तो Play Console में जाकर अपलोड पासकोड को रीसेट करने का अनुरोध किया जा सकता है. आपके ऐप्लिकेशन साइनिंग पासकोड को Google सुरक्षित रखता है. इसलिए, अपलोड पासकोड बदलने के बाद भी, अपने ऐप्लिकेशन के नए वर्शन को ओरिजनल ऐप्लिकेशन के अपडेट के तौर पर अपलोड किया जा सकता है. ज़्यादा जानने के लिए, [खोए हुए या हैक किए गए निजी अपलोड पासकोड को रीसेट करना](#reset_upload_key) लेख पढ़ें.\n\nअगले सेक्शन में, ऐप्लिकेशन को साइन करने और उसकी सुरक्षा से जुड़े कुछ अहम शब्दों और कॉन्सेप्ट के बारे में बताया गया है. अगर आपको सीधे Google Play Store पर अपलोड करने के लिए, अपने ऐप्लिकेशन को तैयार करने का तरीका जानना है, तो [रिलीज़ के लिए अपने ऐप्लिकेशन पर हस्ताक्षर करें](#sign-apk) पर जाएं.\n\n### कीस्टोर, कुंजियां, और सर्टिफ़िकेट\n\nJava कीस्टोर (.jks या .keystore), बाइनरी फ़ाइलें होती हैं. ये सर्टिफ़िकेट और निजी पासकोड के डेटा स्टोर करने की जगह के तौर पर काम करती हैं.\n\n**सार्वजनिक पासकोड का सर्टिफ़िकेट** (`.der` या `.pem` फ़ाइलें), जिसे डिजिटल सर्टिफ़िकेट या पहचान सर्टिफ़िकेट भी कहा जाता है. इसमें सार्वजनिक/निजी पासकोड के जोड़े की सार्वजनिक पासकोड के साथ-साथ, उस निजी पासकोड के मालिक की पहचान करने वाला कुछ अन्य मेटाडेटा (उदाहरण के लिए, नाम और जगह) भी शामिल होता है.\n\nयहां अलग-अलग तरह की कुंजियों के बारे में बताया गया है:\n\n*   **ऐप्लिकेशन साइनिंग पासकोड:** इस पासकोड का इस्तेमाल, उपयोगकर्ता के डिवाइस पर इंस्टॉल किए गए APKs साइन करने के लिए किया जाता है. Android के सुरक्षित अपडेट मॉडल के तहत, आपके ऐप्लिकेशन के लाइफ़टाइम के दौरान साइनिंग पासकोड कभी नहीं बदलता. ऐप्लिकेशन साइनिंग पासकोड निजी होता है और इसे गुप्त रखना ज़रूरी है. हालांकि, ऐप्लिकेशन साइनिंग पासकोड का इस्तेमाल करके जनरेट किया गया सर्टिफ़िकेट शेयर किया जा सकता है.\n*   **अपलोड पासकोड:** इस पासकोड का इस्तेमाल, [Google Play की ऐप्लिकेशन साइनिंग](#app-signing-google-play) के लिए अपलोड करने से पहले, ऐप्लिकेशन बंडल या APK पर साइन करने के लिए किया जाता है. आपको 'अपलोड की कुंजी' को गुप्त रखना होगा. हालांकि, अपलोड पासकोड का इस्तेमाल करके जनरेट किया गया सर्टिफ़िकेट शेयर किया जा सकता है. अपलोड पासकोड जनरेट करने के लिए, इनमें से कोई एक तरीका अपनाएं:\n    \n    *   अगर आपने ऑप्ट इन करते समय, Google को ऐप्लिकेशन साइनिंग पासकोड जनरेट करने का विकल्प चुना है, तो [रिलीज़ के लिए अपने ऐप्लिकेशन पर हस्ताक्षर करने](#sign-apk) के लिए इस्तेमाल की गई कुंजी को अपलोड पासकोड के तौर पर सेट किया जाता है.\n    *   अगर आपने अपने नए या मौजूदा ऐप्लिकेशन के लिए ऑप्ट इन करते समय, Google को ऐप्लिकेशन साइनिंग पासकोड दिया है, तो आपके पास ज़्यादा सुरक्षा के लिए ऑप्ट इन करने के दौरान या उसके बाद, नया अपलोड पासकोड जनरेट करने का विकल्प होता है.\n    *   अगर आपने नया अपलोड पासकोड जनरेट नहीं किया है, तो हर रिलीज़ पर साइन करने के लिए, अपने ऐप्लिकेशन साइनिंग पासकोड का इस्तेमाल अपलोड पासकोड के तौर पर किया जाता रहेगा.\n    \n    **सलाह:** अपनी पासकोड को सुरक्षित रखने के लिए, यह पक्का करना अच्छा होता है कि आपका ऐप्लिकेशन साइनिंग पासकोड और अपलोड पासकोड अलग-अलग हों.\n    \n\n### एपीआई की सेवा देने वाली कंपनियों के साथ काम करना\n\n[Play Console](https://play.google.com/console/?hl=hi) में **रिलीज़ &gt; सेटअप &gt; ऐप्लिकेशन साइनिंग** पेज पर जाकर, ऐप्लिकेशन साइनिंग पासकोड और अपलोड पासकोड के लिए सर्टिफ़िकेट डाउनलोड किया जा सकता है. इसका इस्तेमाल, एपीआई की सेवा देने वाली कंपनियों के साथ सार्वजनिक कुंजी को रजिस्टर करने के लिए किया जाता है. इसे शेयर किया जा सकता है, क्योंकि इसमें आपकी निजी कुंजी शामिल नहीं होती.\n\n**सर्टिफ़िकेट फ़िंगरप्रिंट**, सर्टिफ़िकेट का छोटा और यूनीक वर्शन होता है. एपीआई सेवा देने वाली कंपनियां, अक्सर इसे पैकेज के नाम के साथ मांगती हैं, ताकि वे अपनी सेवाएं देने के लिए ऐप्लिकेशन को रजिस्टर कर सकें. अपलोड और ऐप्लिकेशन साइनिंग सर्टिफ़िकेट के एमडी5, SHA-1, और SHA-256 फ़िंगरप्रिंट देखने के लिए, Play Console के ऐप्लिकेशन साइनिंग पेज पर जाएं. ओरिजनल सर्टिफ़िकेट (`.der`) डाउनलोड करके, अन्य फ़िंगरप्रिंट भी साथ में इसी पेज पर देखे जा सकते हैं.\n\nडीबग बिल्ड पर हस्ताक्षर करना\n----------------------------\n\nआईडीई से अपने प्रोजेक्ट को चलाने या डीबग करने पर, Android Studio आपके ऐप्लिकेशन को अपने-आप डीबग सर्टिफ़िकेट से साइन करता है. यह सर्टिफ़िकेट, Android SDK टूल से जनरेट होता है. Android Studio में पहली बार प्रोजेक्ट को चलाने या डीबग करने पर, IDE अपने-आप `$HOME/.android/debug.keystore` में डीबग पासकोड और सर्टिफ़िकेट बनाता है. साथ ही, पासकोड और पासकोड की कुंजी सेट करता है.\n\n**अहम जानकारी:** ऐसा हो सकता है कि आपके प्रोजेक्ट का डिबग पासकोड, डिफ़ॉल्ट जगह पर न हो. Android Studio 2024.2.1 में, अपने प्रोजेक्ट के पासवर्ड वाले पासकोड की जगह की पुष्टि करने के लिए:\n\n1.  Gradle टूल विंडो खोलें.\n2.  अपना प्रोजेक्ट चुनें.\n3.  **app** ( **app** &gt; **tasks** &gt; **android** ) से शुरू करके, Gradle सेटिंग ट्री को बड़ा करें.\n4.  **android** में जाकर, **signingReport** को चुनें.  \n    ![बड़े किए गए प्रोजेक्ट Gradle कॉन्फ़िगरेशन ट्री का स्क्रीनशॉट](https://developer.android.com/static/studio/images/projects/project-gradle-configuration.png?hl=hi)\n5.  हस्ताक्षर करने की रिपोर्ट, सबसे नीचे मौजूद पैनल में दिखती है. **स्टोर** से शुरू होने वाली लाइन ढूंढें. इससे आपको `debug.keystore` फ़ाइल की जगह की जानकारी मिलती है.\n\nडीबग सर्टिफ़िकेट, बिल्ड टूल से बनाया जाता है और डिज़ाइन के हिसाब से यह असुरक्षित होता है. इसलिए, ज़्यादातर ऐप स्टोर (इनमें Google Play Store भी शामिल है) पब्लिश करने के लिए, डीबग सर्टिफ़िकेट से साइन किए गए ऐप्लिकेशन स्वीकार नहीं करते.\n\nAndroid Studio, डीबग साइनिंग की जानकारी को अपने-आप साइनिंग कॉन्फ़िगरेशन में सेव करता है, ताकि आपको हर बार डीबग करते समय इसे डालने की ज़रूरत न पड़े. हस्ताक्षर करने का कॉन्फ़िगरेशन एक ऐसा ऑब्जेक्ट होता है जिसमें आपके ऐप्लिकेशन पर हस्ताक्षर करने के लिए ज़रूरी सारी जानकारी होती है. इसमें कीस्टोर की जगह, कीस्टोर का पासवर्ड, कुंजी का नाम, और कुंजी का पासवर्ड शामिल होता है.\n\nडीबग करने के लिए ऐप्लिकेशन बनाने और चलाने के तरीके के बारे में ज़्यादा जानने के लिए, [अपना ऐप्लिकेशन बनाएं और चलाएं](https://developer.android.com/tools/building/building-studio?hl=hi) लेख पढ़ें.\n\n### डीबग सर्टिफ़िकेट की समयसीमा खत्म होना\n\nडीबग करने के लिए, अपने ऐप्लिकेशन पर साइन करने के लिए इस्तेमाल किए जाने वाले, खुद से हस्ताक्षर किए गए सर्टिफ़िकेट की समयसीमा, उसके बनाए जाने की तारीख से 30 साल बाद खत्म हो जाती है. सर्टिफ़िकेट की समयसीमा खत्म होने पर, आपको बिल्ड से जुड़ी गड़बड़ी का मैसेज मिलता है.\n\nइस समस्या को ठीक करने के लिए, इनमें से किसी एक जगह पर सेव की गई `debug.keystore` फ़ाइल को मिटाएं:\n\n*   `~/.android/` को OS X और Linux पर इस्तेमाल करना\n*   `C:\\Documents and Settings\\user\\.android\\` पर Windows XP\n*   `C:\\Users\\user\\.android\\` Windows Vista और Windows 7, 8, और 10 पर\n\nअगली बार जब अपने ऐप्लिकेशन का डीबग वर्शन _बनाया और चलाया_ जाएगा, तो Android Studio एक नया कीस्टोर और डीबग पासकोड फिर से जनरेट करेगा.\n\nGoogle Play पर रिलीज़ करने के लिए, अपने ऐप्लिकेशन पर हस्ताक्षर करना\n-------------------------------------------------------------------\n\nजब आपका ऐप्लिकेशन पब्लिश करने के लिए तैयार हो जाए, तो आपको अपने ऐप्लिकेशन पर हस्ताक्षर करना होगा और उसे Google Play जैसे ऐप्लिकेशन स्टोर पर अपलोड करना होगा. अपने ऐप्लिकेशन को पहली बार Google Play पर पब्लिश करते समय, आपको Play ऐप्लिकेशन साइनिंग की सुविधा को भी कॉन्फ़िगर करना होगा. अगस्त 2021 से पहले बनाए गए ऐप्लिकेशन के लिए, 'Play ऐप्लिकेशन साइनिंग' का इस्तेमाल करना ज़रूरी नहीं है. इस सेक्शन में, रिलीज़ के लिए अपने ऐप्लिकेशन को सही तरीके से साइन करने और Play ऐप्लिकेशन साइनिंग की सुविधा को कॉन्फ़िगर करने का तरीका बताया गया है.\n\n### अपलोड पासकोड और कीस्टोर जनरेट करना\n\nअगर आपके पास पहले से अपलोड पासकोड नहीं है, तो Android Studio का इस्तेमाल करके एक पासकोड जनरेट किया जा सकता है. यह पासकोड, 'Play ऐप्लिकेशन साइनिंग' को कॉन्फ़िगर करते समय काम आता है. इसके लिए, यह तरीका अपनाएं:\n\n1.  मेन्यू बार में, **बिल्ड &gt; हस्ताक्षर किया गया बंडल/APK जनरेट करें** पर क्लिक करें.\n2.  **साइन किया गया बंडल या APK जनरेट करें** डायलॉग में, **Android ऐप्लिकेशन बंडल** या **APK** चुनें और **आगे बढ़ें** पर क्लिक करें.\n3.  **की स्टोर का पाथ** फ़ील्ड के नीचे, **नया बनाएं** पर क्लिक करें.\n4.  **नया पासकोड स्टोर** विंडो में, अपने पासकोड स्टोर और पासकोड के लिए यह जानकारी दें, जैसा कि दूसरे चित्र में दिखाया गया है.\n    \n    ![](https://developer.android.com/static/studio/images/publish/keystore-wizard_2x.png?hl=hi)\n    \n    **दूसरी इमेज.** Android Studio में नया अपलोड पासकोड और कीस्टोर बनाएं.\n    \n5.  **कीस्टोर**\n    \n    *   **कीस्टोर का पाथ:** वह जगह चुनें जहां आपका कीस्टोर बनाया जाना चाहिए. साथ ही, जगह के पाथ के आखिर में फ़ाइल का नाम जोड़ा जाना चाहिए. साथ ही, उसमें `.jks` एक्सटेंशन होना चाहिए.\n    *   **पासवर्ड:** अपनी पासवर्ड स्टोर के लिए सुरक्षित पासवर्ड बनाएं और उसकी पुष्टि करें.\n6.  **कुंजी**\n    \n    *   **उपनाम:** अपनी कुंजी के लिए कोई ऐसा नाम डालें जिससे उसकी पहचान की जा सके.\n    *   **पासवर्ड:** अपनी कुंजी के लिए सुरक्षित पासवर्ड बनाएं और उसकी पुष्टि करें. यह पासवर्ड, आपके कीस्टोर के पासवर्ड से मेल खाना चाहिए. (ज़्यादा जानकारी के लिए, [पहचानी गई समस्या](https://developer.android.com/studio/known-issues?hl=hi#ki-key-keystore-warning) देखें)\n    *   **मान्य रहने की अवधि (साल):** यह सेट करें कि आपकी पासकोड कितने साल तक मान्य रहेगा. आपकी कुंजी कम से कम 25 साल तक मान्य होनी चाहिए, ताकि आप अपने ऐप्लिकेशन के पूरे जीवनकाल के दौरान, एक ही कुंजी से ऐप्लिकेशन के अपडेट साइन कर सकें.\n    *   **सर्टिफ़िकेट:** सर्टिफ़िकेट पाने के लिए, अपने बारे में कुछ जानकारी डालें. यह जानकारी आपके ऐप्लिकेशन में नहीं दिखती, लेकिन इसे APK के हिस्से के तौर पर आपके सर्टिफ़िकेट में शामिल किया जाता है.\n7.  फ़ॉर्म भरने के बाद, **ठीक है** पर क्लिक करें.\n    \n8.  अगर आपको अपने अपलोड पासकोड की मदद से ऐप्लिकेशन बनाना और उस पर हस्ताक्षर करना है, तो [अपने अपलोड पासकोड की मदद से ऐप्लिकेशन पर हस्ताक्षर करने](#sign_release) के तरीके के बारे में बताने वाले सेक्शन पर जाएं. अगर आपको सिर्फ़ पासकोड और पासकोड स्टोर जनरेट करना है, तो **रद्द करें** पर क्लिक करें.\n    \n\n### अपनी कुंजी से ऐप्लिकेशन को साइन करना\n\nअगर आपके पास पहले से ही कोई अपलोड पासकोड है, तो अपने ऐप्लिकेशन पर साइन करने के लिए उसका इस्तेमाल करें. अगर आपके ऐप्लिकेशन पर पहले से ही साइन किया गया है और उसे किसी मौजूदा ऐप्लिकेशन साइनिंग पासकोड की मदद से Google Play Store पर पब्लिश किया गया है, तो अपने ऐप्लिकेशन पर साइन करने के लिए उसका इस्तेमाल करें. बाद में, अपने ऐप्लिकेशन के अपडेट पर साइन करने और उन्हें अपलोड करने के लिए, Google Play पर [कोई अलग अपलोड पासकोड जनरेट और रजिस्टर](#register_upload_key) किया जा सकता है.\n\nAndroid Studio का इस्तेमाल करके अपने ऐप्लिकेशन पर हस्ताक्षर करने के लिए, यह तरीका अपनाएं:\n\n1.  अगर फ़िलहाल आपके पास **साइन किया गया बंडल या APK जनरेट करें** डायलॉग बॉक्स नहीं खुला है, तो **बिल्ड करें &gt; साइन किया गया बंडल/APK जनरेट करें** पर क्लिक करें.\n2.  **साइन किया गया बंडल या APK जनरेट करें** डायलॉग में, **Android ऐप्लिकेशन बंडल** या **APK** में से कोई एक चुनें और **आगे बढ़ें** पर क्लिक करें.\n3.  ड्रॉप-डाउन से कोई मॉड्यूल चुनें.\n4.  अपने कीस्टोर का पाथ और अपनी कुंजी का दूसरा नाम डालें. साथ ही, दोनों के लिए पासवर्ड डालें. अगर आपने अब तक अपलोड कीस्टोर और पासकोड तैयार नहीं किया है, तो पहले [अपलोड पासकोड और कीस्टोर जनरेट करें](#generate-key). इसके बाद, इस चरण को पूरा करने के लिए वापस आएं.\n    \n    ![](https://developer.android.com/static/studio/images/publish/generate-signed-apk-wizard_2x.png?hl=hi)\n    \n    **तीसरी इमेज**. अपने ऐप्लिकेशन पर अपलोड पासकोड से साइन करें.\n    \n    **ध्यान दें:** बेहतर सुरक्षा के लिए, Google Play साइनिंग पासकोड अपलोड करने की एक नई प्रोसेस शुरू कर रहा है. साथ ही, Android Studio में **एन्क्रिप्ट की गई कुंजी एक्सपोर्ट करें** विकल्प को बंद किया जा रहा है. अगर किसी ऐप्लिकेशन को किसी मौजूदा ऐप्लिकेशन साइनिंग पासकोड से साइन किया जा रहा है और आपको अपने ऐप्लिकेशन को Play ऐप्लिकेशन साइनिंग की सुविधा के लिए ऑप्ट-इन करना है, तो अपनी साइनिंग पासकोड को एन्क्रिप्ट और एक्सपोर्ट करने की प्रोसेस के लिए, [किसी मौजूदा ऐप्लिकेशन के लिए ऑप्ट-इन करें](#enroll_existing) लेख पढ़ें.\n    \n5.  **आगे बढ़ें** पर क्लिक करें.\n    \n6.  अगली विंडो (चित्र 4 में दिखाई गई) में, अपने हस्ताक्षर किए गए ऐप्लिकेशन के लिए कोई डेस्टिनेशन फ़ोल्डर चुनें. इसके बाद, बिल्ड टाइप चुनें और अगर लागू हो, तो प्रॉडक्ट फ़्लेवर चुनें.\n    \n7.  अगर कोई APK बनाया जा रहा है और उस पर हस्ताक्षर किए जा रहे हैं, तो आपको यह चुनना होगा कि आपके ऐप्लिकेशन में किन **साइनिंग वर्शन** का इस्तेमाल किया जाए. ज़्यादा जानने के लिए, [ऐप्लिकेशन साइनिंग स्कीम](https://source.android.com/security/apksigning?hl=hi) के बारे में पढ़ें\n    \n    **ध्यान दें:** Google Play, उन APK के लिए [APK सिग्नेचर स्कीम v3](https://source.android.com/security/apksigning/v3?hl=hi) का इस्तेमाल करता है जो पहले से ही किसी मौजूदा [साइनिंग सर्टिफ़िकेट के क्रम](https://developer.android.com/studio/command-line/apksigner?hl=hi#usage-rotate) के साथ पब्लिश नहीं किए गए हैं.\n    \n8.  **बनाएं** पर क्लिक करें.\n    \n    **ध्यान दें:** अगर आपके प्रोजेक्ट में प्रॉडक्ट फ़्लेवर का इस्तेमाल किया जाता है, तो Windows/Linux पर **Control** बटन या Mac OSX पर **Command** बटन को दबाकर, एक से ज़्यादा प्रॉडक्ट फ़्लेवर चुने जा सकते हैं. Android Studio, आपके चुने गए हर प्रॉडक्ट फ़्लेवर के लिए एक अलग APK या ऐप्लिकेशन बंडल जनरेट करेगा.\n    \n\n![](https://developer.android.com/static/studio/images/publish/generate_signed_bundle_popup-2x.png?hl=hi)\n\n**पांचवीं इमेज.** अपने ऐप्लिकेशन बंडल का विश्लेषण करने या उसकी जगह का पता लगाने के लिए, पॉप-अप में दिए गए लिंक पर क्लिक करें.\n\nAndroid Studio, आपके हस्ताक्षर किए गए ऐप्लिकेशन को बनाने के बाद, आपके पास अपने ऐप्लिकेशन को **ढूंढने** या **उसका विश्लेषण करने** का विकल्प होता है. इसके लिए, आपको पॉप-अप सूचना में दिए गए सही विकल्प पर क्लिक करना होगा, जैसा कि पांचवें चित्र में दिखाया गया है.\n\nअब आपके पास अपने ऐप्लिकेशन को Play ऐप्लिकेशन साइनिंग की सुविधा के लिए ऑप्ट इन करने और रिलीज़ के लिए अपलोड करने का विकल्प है. अगर आपने ऐप्लिकेशन पब्लिश करने की प्रोसेस पहले कभी नहीं की है, तो [लॉन्च की खास जानकारी](https://developer.android.com/distribute/best-practices/launch?hl=hi) पढ़ें. अगर ऐसा नहीं है, तो [Play Console पर ऐप्लिकेशन अपलोड करने](https://developer.android.com/studio/publish/upload-bundle?hl=hi) के तरीके के बारे में बताने वाले पेज पर जाएं.\n\nPlay ऐप्लिकेशन साइनिंग का इस्तेमाल करना\n---------------------------------------\n\nइस पेज पर पहले बताया गया है कि Google Play पर डिस्ट्रिब्यूशन के लिए, अपने ऐप्लिकेशन पर साइन करने के लिए, [Play ऐप्लिकेशन साइनिंग](#app-signing-google-play) को कॉन्फ़िगर करना ज़रूरी है. हालांकि, अगस्त 2021 से पहले बनाए गए ऐप्लिकेशन के लिए, ऐसा करना ज़रूरी नहीं है. ये ऐप्लिकेशन, खुद से साइन किए गए APKs को डिस्ट्रिब्यूट करना जारी रख सकते हैं. आपको कौनसे चरण पूरे करने होंगे, यह इस बात पर निर्भर करता है कि आपका ऐप्लिकेशन अब तक Google Play पर पब्लिश किया गया है या नहीं. इसके अलावा, यह भी ज़रूरी है कि आपके ऐप्लिकेशन पर पहले से ही हस्ताक्षर किया गया हो और उसे किसी मौजूदा ऐप्लिकेशन साइनिंग पासकोड का इस्तेमाल करके, अगस्त 2021 से पहले पब्लिश किया गया हो.\n\n### नए ऐप्लिकेशन को कॉन्फ़िगर करना\n\nऐसे ऐप्लिकेशन के लिए साइनिंग को कॉन्फ़िगर करने के लिए जिसे अब तक Google Play पर पब्लिश नहीं किया गया है, यह तरीका अपनाएं:\n\n1.  अगर आपने पहले ऐसा नहीं किया है, तो [अपलोड पासकोड जनरेट करें](#generate-key) और उस अपलोड पासकोड से [अपने ऐप्लिकेशन पर हस्ताक्षर करें](#sign_release).\n2.  अपने [Play Console](https://play.google.com/console/?hl=hi) में साइन इन करें.\n3.  नई रिलीज़ बनाने के लिए, [अपनी रिलीज़ तैयार करने और रोल आउट करने](https://support.google.com/googleplay/android-developer/answer/7159011?hl=hi) के लिए दिया गया तरीका अपनाएं.\n4.  रिलीज़ ट्रैक चुनने के बाद, **ऐप्लिकेशन साइनिंग** सेक्शन में जाकर, ऐप्लिकेशन साइनिंग को इस तरह कॉन्फ़िगर करें:\n    *   Google Play आपके लिए ऐप्लिकेशन साइनिंग पासकोड जनरेट कर सकता है और इसका इस्तेमाल आपके ऐप्लिकेशन को साइन करने के लिए कर सकता है. इसके लिए, आपको कुछ भी करने की ज़रूरत नहीं है. अपनी पहली रिलीज़ पर साइन करने के लिए इस्तेमाल की गई कुंजी, अपलोड पासकोड बन जाती है. आपको आने वाले समय में रिलीज़ करने के लिए, इसका इस्तेमाल करना चाहिए.\n    *   अपने डेवलपर खाते में, किसी दूसरे ऐप्लिकेशन के लिए इस्तेमाल की जा रही कुंजी का इस्तेमाल करने के लिए, **ऐप्लिकेशन साइनिंग पासकोड बदलें &gt; इस खाते में, किसी दूसरे ऐप्लिकेशन के लिए इस्तेमाल की जा रही कुंजी का इस्तेमाल करें** को चुनें. इसके बाद, कोई ऐप्लिकेशन चुनें और **जारी रखें** पर क्लिक करें.\n    *   Google को अपनी साइनिंग पासकोड उपलब्ध कराते समय, ऐप्लिकेशन पर साइन करते समय उसका इस्तेमाल करने के लिए, **ऐप्लिकेशन साइनिंग पासकोड बदलें** को चुनें. इसके बाद, **एक्सपोर्ट और अपलोड करें** में से कोई एक विकल्प चुनें. इससे, निजी पासकोड और उसका सार्वजनिक सर्टिफ़िकेट सुरक्षित तरीके से अपलोड किया जा सकता है.\n\n**ध्यान दें:** अगर आपने [सेवा की शर्तें](https://play.google.com/about/play-app-signing-terms.html?hl=hi) पहले ही स्वीकार नहीं की हैं, तो आपको शर्तें पढ़कर, **स्वीकार करें** को चुनना होगा. ऐसा करने के बाद ही, आगे की प्रोसेस जारी रखी जा सकेगी.\n\n**ऐप्लिकेशन बंडल** सेक्शन में, **फ़ाइलें ब्राउज़ करें** पर क्लिक करके, उस ऐप्लिकेशन को ढूंढें और अपलोड करें जिस पर आपने अपलोड पासकोड का इस्तेमाल करके साइन किया था. अपने ऐप्लिकेशन को रिलीज़ करने के बारे में ज़्यादा जानकारी के लिए, [रिलीज़ तैयार करना और उसे रोल आउट करना](https://support.google.com/googleplay/android-developer/answer/7159011?hl=hi) लेख पढ़ें. Play ऐप्लिकेशन साइनिंग की सुविधा को कॉन्फ़िगर करने के बाद ऐप्लिकेशन रिलीज़ करने पर, Google Play आपके ऐप्लिकेशन का साइनिंग पासकोड जनरेट करता है और उसे मैनेज करता है. हालांकि, ऐसा तब ही होता है, जब आपने कोई मौजूदा पासकोड अपलोड न किया हो. अपने ऐप्लिकेशन को Google Play पर अपलोड करने से पहले, उसके अपडेट पर साइन करें. इसके लिए, अपने ऐप्लिकेशन के अपलोड पासकोड का इस्तेमाल करें.\n\nअगर आपको अपने ऐप्लिकेशन के लिए नया अपलोड पासकोड बनाना है, तो [खोए हुए या हैक किए गए निजी अपलोड पासकोड को रीसेट करने](#reset_upload_key) के तरीके के बारे में बताने वाले सेक्शन पर जाएं.\n\n### किसी मौजूदा ऐप्लिकेशन के लिए ऑप्ट इन करना\n\nअगर किसी ऐसे ऐप्लिकेशन को अपडेट किया जा रहा है जिसे पहले से ही Google Play पर पब्लिश किया जा चुका है और इसके लिए किसी मौजूदा ऐप्लिकेशन साइनिंग पासकोड का इस्तेमाल किया जा रहा है, तो Play ऐप्लिकेशन साइनिंग की सुविधा के लिए इस तरह ऑप्ट-इन किया जा सकता है:\n\n1.  [Play Console](https://play.google.com/console/?hl=hi) में साइन इन करें और अपने ऐप्लिकेशन पर जाएं.\n2.  बाईं ओर दिए गए मेन्यू में, **रिलीज़ &gt; सेटअप &gt; ऐप्लिकेशन साइनिंग** पर क्लिक करें.\n3.  अगर लागू हो, तो सेवा की शर्तों की समीक्षा करें और **स्वीकार करें** चुनें.\n4.  वह विकल्प चुनें जो हस्ताक्षर करने के लिए इस्तेमाल की जाने वाली उस कुंजी के बारे में सबसे सही जानकारी देता हो जिसे आपको Google Play पर अपलोड करना है. इसके बाद, स्क्रीन पर दिए गए निर्देशों का पालन करें. उदाहरण के लिए, अगर साइनिंग पासकोड के लिए Java कीस्टोर का इस्तेमाल किया जा रहा है, तो **Java कीस्टोर से एक्सपोर्ट की गई, कोई नई ऐप्लिकेशन साइनिंग कुंजी अपलोड करें** को चुनें. इसके बाद, PEPK टूल को डाउनलोड और चलाने के लिए दिए गए निर्देशों का पालन करें. साथ ही, एन्क्रिप्ट (सुरक्षित) की गई कुंजी के साथ जनरेट की गई फ़ाइल अपलोड करें.\n5.  **नामांकन करें** पर क्लिक करें.\n\nअब आपको एक पेज दिखेगा, जिसमें आपके ऐप्लिकेशन के हस्ताक्षर और अपलोड किए गए सर्टिफ़िकेट की जानकारी होगी. Google Play अब उपयोगकर्ताओं के लिए आपके ऐप्लिकेशन को डिप्लॉय करते समय, आपके मौजूदा पासकोड से साइन करता है. हालांकि, 'Play ऐप्लिकेशन साइनिंग' का सबसे अहम फ़ायदा यह है कि Google Play पर अपलोड किए गए आर्टफ़ैक्ट पर साइन करने के लिए इस्तेमाल की जाने वाली पासकोड को, उपयोगकर्ताओं को डिस्ट्रिब्यूशन के लिए आपके ऐप्लिकेशन पर साइन करने के लिए इस्तेमाल की जाने वाली पासकोड से अलग किया जा सकता है. इसलिए, अगले सेक्शन में दिया गया तरीका अपनाकर, अलग अपलोड पासकोड जनरेट और रजिस्टर करें.\n\n#### अपलोड सर्टिफ़िकेट जनरेट और रजिस्टर करना\n\nअगर किसी ऐसे ऐप्लिकेशन को पब्लिश किया जा रहा है जिस पर अपलोड पासकोड से हस्ताक्षर नहीं किया गया है, तो Google Play Console में, ऐप्लिकेशन के आने वाले अपडेट के लिए एक पासकोड रजिस्टर करने का विकल्प मिलता है. हालांकि, यह चरण ज़रूरी नहीं है. हमारा सुझाव है कि आप अपने ऐप्लिकेशन को किसी ऐसे पासकोड से पब्लिश करें जो Google Play के इस्तेमाल किए जाने वाले पासकोड से अलग हो. Google Play, इस पासकोड का इस्तेमाल आपके ऐप्लिकेशन को उपयोगकर्ताओं तक पहुंचाने के लिए करता है. इस तरह, Google आपकी साइनिंग पासकोड को सुरक्षित रखता है. साथ ही, आपके पास [खोए हुए या हैक किए गए निजी अपलोड पासकोड को रीसेट करने](#reset_upload_key) का विकल्प होता है. इस सेक्शन में, अपलोड पासकोड बनाने, उससे अपलोड सर्टिफ़िकेट जनरेट करने, और अपने ऐप्लिकेशन के आने वाले अपडेट के लिए, उस सर्टिफ़िकेट को Google Play पर रजिस्टर करने का तरीका बताया गया है.\n\nयहां उन स्थितियों के बारे में बताया गया है जिनमें आपको Play Console में, अपलोड सर्टिफ़िकेट रजिस्टर करने का विकल्प दिखता है:\n\n*   जब कोई नया ऐप्लिकेशन पब्लिश किया जाता है, जिसे साइनिंग पासकोड से साइन किया गया हो और उसे 'Play ऐप्लिकेशन साइनिंग' में ऑप्ट इन किया गया हो.\n*   जब आपको कोई ऐसा मौजूदा ऐप्लिकेशन पब्लिश करना हो जो पहले से ही Play ऐप्लिकेशन साइनिंग की सुविधा के लिए ऑप्ट-इन हो, लेकिन जिसे साइनिंग पासकोड का इस्तेमाल करके साइन किया गया हो.\n\nअगर आपको किसी ऐसे मौजूदा ऐप्लिकेशन का अपडेट पब्लिश नहीं करना है जो पहले से ही 'Play ऐप्लिकेशन साइनिंग' में ऑप्ट इन है और आपको अपलोड सर्टिफ़िकेट रजिस्टर करना है, तो यहां दिया गया तरीका अपनाएं. इसके बाद, [खोए हुए या हैक किए गए निजी अपलोड पासकोड को रीसेट करने](#reset_upload_key) के तरीके के बारे में बताने वाले सेक्शन पर जाएं.\n\nअगर आपने पहले से ऐसा नहीं किया है, तो [अपलोड पासकोड और कीस्टोर जनरेट करें](#generate-key).\n\nअपलोड पासकोड और कीस्टोर बनाने के बाद, आपको [`keytool`](https://docs.oracle.com/javase/8/docs/technotes/tools/unix/keytool.html) का इस्तेमाल करके, अपलोड पासकोड से सार्वजनिक सर्टिफ़िकेट जनरेट करना होगा. इसके लिए, यह कमांड इस्तेमाल करें:\n\n$ keytool -export -rfc\n  -keystore your-upload-keystore.jks\n  -alias upload-alias\n  -file output\\_upload\\_certificate.pem\n\nअब आपके पास अपलोड सर्टिफ़िकेट है. Play Console में पूछे जाने पर या [अपलोड पासकोड को रीसेट करते समय](#reset_upload_key), इसे Google के साथ रजिस्टर करें.\n\n#### ऐप्लिकेशन साइनिंग पासकोड को अपग्रेड करना\n\nकुछ मामलों में, आपको अपने ऐप्लिकेशन की साइनिंग कुंजी बदलनी पड़ सकती है. उदाहरण के लिए, आपको क्रिप्टोग्राफ़िक तरीके से ज़्यादा सुरक्षित पासकोड चाहिए या आपके साइनिंग पासकोड से छेड़छाड़ की गई हो. हालांकि, उपयोगकर्ता आपके ऐप्लिकेशन को सिर्फ़ तब अपडेट कर सकते हैं, जब अपडेट पर उसी साइनिंग पासकोड से साइन किया गया हो जिससे ऐप्लिकेशन को साइन किया गया है. इसलिए, पहले से पब्लिश किए गए ऐप्लिकेशन के लिए साइनिंग पासकोड बदलना मुश्किल होता है.\n\nअगर आपने अपना ऐप्लिकेशन Google Play पर पब्लिश किया है, तो Play Console की मदद से, पब्लिश किए गए ऐप्लिकेशन के लिए साइनिंग पासकोड को अपग्रेड किया जा सकता है. आपकी नई 'की' का इस्तेमाल, Android 13 और उसके बाद के वर्शन पर ऐप्लिकेशन के इंस्टॉल और अपडेट को साइन करने के लिए किया जाता है. वहीं, ऐप्लिकेशन के पुराने साइनिंग पासकोड का इस्तेमाल, Android के पुराने वर्शन पर उपयोगकर्ताओं के लिए अपडेट को साइन करने के लिए किया जाता है.\n\nज़्यादा जानने के लिए, [अपने ऐप्लिकेशन साइनिंग पासकोड को अपग्रेड करना](https://support.google.com/googleplay/android-developer/answer/7384423?hl=hi#Upgrade) लेख पढ़ें.\n\n### खोए हुए या हैक किए गए निजी अपलोड पासकोड को रीसेट करना\n\nअगर आपका निजी अपलोड पासकोड खो गया है या उसके साथ छेड़छाड़ की गई है, तो नया पासकोड बनाया जा सकता है. साथ ही, Play Console में जाकर [अपलोड पासकोड रीसेट करने का अनुरोध](https://support.google.com/googleplay/android-developer/answer/7384423?hl=hi#reset) किया जा सकता है.\n\n**ध्यान दें:** अपलोड पासकोड को रीसेट करने से, उस ऐप्लिकेशन साइनिंग पासकोड पर असर नहीं पड़ेगा जिसका इस्तेमाल Google Play, लोगों को APKs डिलीवर करने से पहले, उन्हें फिर से साइन करने के लिए करता है.\n\n### अपने ऐप्लिकेशन को अपने-आप साइन करने के लिए, बिल्ड प्रोसेस को कॉन्फ़िगर करना\n\nAndroid Studio में, अपने प्रोजेक्ट को इस तरह कॉन्फ़िगर किया जा सकता है कि वह बाइल्ड करने की प्रोसेस के दौरान, अपने ऐप्लिकेशन के रिलीज़ वर्शन को अपने-आप साइन कर ले. इसके लिए, साइन करने का कॉन्फ़िगरेशन बनाएं और उसे अपने रिलीज़ बाइल्ड टाइप को असाइन करें. हस्ताक्षर करने के कॉन्फ़िगरेशन में, पासकोड की जगह, पासकोड, पासकोड का दूसरा नाम, और पासकोड शामिल होता है. Android Studio का इस्तेमाल करके, हस्ताक्षर करने का कॉन्फ़िगरेशन बनाने और उसे रिलीज़ के लिए बने बाइल्ड टाइप को असाइन करने के लिए, यह तरीका अपनाएं:\n\n1.  **प्रोजेक्ट** विंडो में, अपने ऐप्लिकेशन पर दायां क्लिक करें और **मॉड्यूल सेटिंग खोलें** पर क्लिक करें.\n2.  **प्रोजेक्ट स्ट्रक्चर** विंडो में, बाईं ओर मौजूद पैनल में **मॉड्यूल** में जाकर, उस मॉड्यूल पर क्लिक करें जिस पर आपको हस्ताक्षर करना है.\n3.  **हस्ताक्षर करना** टैब पर क्लिक करें. इसके बाद, **जोड़ें** ![](https://developer.android.com/static/studio/images/publish/add-signing-config_2-1_2x.png?hl=hi) पर क्लिक करें.\n4.  अपनी पासकोड फ़ाइल चुनें, हस्ताक्षर करने के इस कॉन्फ़िगरेशन के लिए कोई नाम डालें (क्योंकि एक से ज़्यादा बनाए जा सकते हैं) और ज़रूरी जानकारी डालें.\n    \n    ![](https://developer.android.com/static/studio/images/publish/project-structure-signing_2-1_2x.png?hl=hi)\n    \n    **सातवीं इमेज**. हस्ताक्षर करने का नया कॉन्फ़िगरेशन बनाने के लिए विंडो.\n    \n5.  **बिल्ड टाइप** टैब पर क्लिक करें.\n6.  **रिलीज़** बिल्ड पर क्लिक करें.\n7.  **साइनिंग कॉन्फ़िगरेशन** में जाकर, वह साइनिंग कॉन्फ़िगरेशन चुनें जो आपने अभी बनाया है.\n    \n    ![](https://developer.android.com/static/studio/images/publish/project-structure-build-types_2-1_2x.png?hl=hi)\n    \n    **आठवीं इमेज**. Android Studio में, साइनिंग कॉन्फ़िगरेशन चुनें.\n    \n8.  **ठीक है** पर क्लिक करें.\n\nअब जब भी Android Studio में **बिल्ड &gt; बंडल / APK बनाएं** में जाकर, रिलीज़ के लिए बंडल टाइप चुनकर उसे बनाया जाएगा, तो IDE आपके ऐप्लिकेशन को अपने-आप साइन कर देगा. इसके लिए, वह आपके बताए गए साइनिंग कॉन्फ़िगरेशन का इस्तेमाल करेगा. आपको साइन किया गया APK या ऐप्लिकेशन बंडल, प्रोजेक्ट डायरेक्ट्री में `build/outputs/` डायरेक्ट्री में मिलेगा. यह डायरेक्ट्री, उस मॉड्यूल के लिए होती है जिसे बिल्ड किया जा रहा है.\n\nहस्ताक्षर करने का कॉन्फ़िगरेशन बनाने पर, हस्ताक्षर करने की जानकारी को आपकी Gradle बिल्ड फ़ाइलों में सादे टेक्स्ट में शामिल किया जाता है. अगर किसी टीम के साथ काम किया जा रहा है या अपना कोड सार्वजनिक तौर पर शेयर किया जा रहा है, तो आपको साइन करने के लिए इस्तेमाल की जाने वाली जानकारी को सुरक्षित रखना चाहिए. इसके लिए, आपको उसे बिल्ड फ़ाइलों से हटाकर अलग से सेव करना होगा. [अपनी बिल्ड फ़ाइलों से हस्ताक्षर करने की जानकारी हटाना](#secure-shared-keystore) लेख में, अपनी बिल्ड फ़ाइलों से हस्ताक्षर करने की जानकारी हटाने के तरीके के बारे में ज़्यादा पढ़ें. हस्ताक्षर करने के लिए इस्तेमाल की जाने वाली जानकारी को सुरक्षित रखने के बारे में ज़्यादा जानने के लिए, नीचे [अपनी कुंजी को सुरक्षित रखें](#secure_key) लेख पढ़ें.\n\n### प्रॉडक्ट के हर फ़्लेवर को अलग-अलग साइन करें\n\nअगर आपका ऐप्लिकेशन प्रॉडक्ट फ़्लेवर का इस्तेमाल करता है और आपको हर फ़्लेवर को अलग-अलग साइन करना है, तो साइन करने के लिए अतिरिक्त कॉन्फ़िगरेशन बनाएं और उन्हें फ़्लेवर के हिसाब से असाइन करें:\n\n1.  **प्रोजेक्ट** विंडो में, अपने ऐप्लिकेशन पर दायां क्लिक करें और **मॉड्यूल सेटिंग खोलें** पर क्लिक करें.\n2.  **प्रोजेक्ट स्ट्रक्चर** विंडो में, बाईं ओर मौजूद पैनल में **मॉड्यूल** में जाकर, उस मॉड्यूल पर क्लिक करें जिस पर आपको हस्ताक्षर करना है.\n3.  **हस्ताक्षर करना** टैब पर क्लिक करें. इसके बाद, **जोड़ें** ![](https://developer.android.com/static/studio/images/publish/add-signing-config_2-1_2x.png?hl=hi) पर क्लिक करें.\n4.  अपनी पासकोड फ़ाइल चुनें, हस्ताक्षर करने के इस कॉन्फ़िगरेशन के लिए कोई नाम डालें (क्योंकि एक से ज़्यादा बनाए जा सकते हैं) और ज़रूरी जानकारी डालें.\n    \n    ![](https://developer.android.com/static/studio/images/publish/project-structure-signing_2-1_2x.png?hl=hi)\n    \n    **10वीं इमेज**. हस्ताक्षर करने का नया कॉन्फ़िगरेशन बनाने के लिए विंडो.\n    \n5.  तीसरे और चौथे चरण को ज़रूरत के मुताबिक दोहराएं, ताकि आप हस्ताक्षर करने के सभी कॉन्फ़िगरेशन बना सकें.\n6.  **स्वाद** टैब पर क्लिक करें.\n7.  आपको जिस फ़्लेवर को कॉन्फ़िगर करना है उस पर क्लिक करें. इसके बाद, **साइनिंग कॉन्फ़िगरेशन** ड्रॉपडाउन मेन्यू से सही साइनिंग कॉन्फ़िगरेशन चुनें. ![](https://developer.android.com/static/studio/images/publish/project-structure-flavors_2-1_2x.png?hl=hi)\n    \n    **11वीं इमेज**. प्रॉडक्ट फ़्लेवर के हिसाब से, हस्ताक्षर करने की सेटिंग कॉन्फ़िगर करें.\n    \n    प्रॉडक्ट के किसी अन्य फ़्लेवर को कॉन्फ़िगर करने के लिए, यह तरीका दोहराएं.\n    \n8.  **ठीक है** पर क्लिक करें.\n\nGradle कॉन्फ़िगरेशन फ़ाइलों में भी, साइन करने की सेटिंग तय की जा सकती हैं. ज़्यादा जानकारी के लिए, [हस्ताक्षर करने की सेटिंग कॉन्फ़िगर करना](https://developer.android.com/studio/build/build-variants?hl=hi#signing) लेख पढ़ें.\n\nहस्ताक्षर करने की रिपोर्ट चलाना\n-------------------------------\n\nअपने ऐप्लिकेशन के हर वैरिएंट के लिए, साइन इन करने की जानकारी पाने के लिए, Android Studio में Gradle `signingReport` टास्क चलाएं:\n\n1.  Gradle टूल विंडो खोलने के लिए, **व्यू &gt; टूल विंडो &gt; Gradle** चुनें\n2.  रिपोर्ट चलाने के लिए, **YourApp &gt; Tasks &gt; android &gt; signingReport** चुनें\n\n**ध्यान दें:** अगर आपको Gradle टास्क की सूची में `signingReport` नहीं दिखता है, तो **फ़ाइल &gt; सेटिंग** (macOS पर **Android Studio &gt; सेटिंग**) चुनकर, Android Studio की सेटिंग डायलॉग बॉक्स खोलें. इसके बाद, **प्रयोग के तौर पर उपलब्ध** चुनें. इसके बाद, Gradle के शीर्षक में जाकर, उन सभी चेकबॉक्स को हटाएं जिनसे Gradle टास्क की सूची में शामिल टास्क के टाइप सीमित होते हैं.\n\nअपनी साइनिंग पासकोड मैनेज करना\n------------------------------\n\nअगर आपने अगस्त 2021 से पहले बनाए गए ऐप्लिकेशन के लिए, 'Play ऐप्लिकेशन साइनिंग' में ऑप्ट इन नहीं किया है, तो आपके पास ऐप्लिकेशन साइनिंग पासकोड और पासकोड स्टोर को मैनेज करने का विकल्प होता है. ध्यान रखें कि **कुंजी और कीस्टोर को सुरक्षित रखने की ज़िम्मेदारी आपकी है**. इसके अलावा, आपका ऐप्लिकेशन Android ऐप्लिकेशन बंडल, Play Feature Delivery, और Play Asset Delivery के साथ काम नहीं करेगा.\n\nअपनी कुंजी और पासकोड बनाने के लिए, पहले अपने पासकोड के लिए एक मज़बूत पासवर्ड चुनें. साथ ही, पासकोड में सेव की गई हर निजी कुंजी के लिए, एक अलग मज़बूत पासवर्ड चुनें. आपको अपना पासकोड सुरक्षित जगह पर रखना चाहिए. अगर आपके पास ऐप्लिकेशन साइनिंग पासकोड का ऐक्सेस नहीं है या आपके पासकोड को हैक कर लिया गया है, तो Google आपके लिए ऐप्लिकेशन साइनिंग पासकोड वापस नहीं ला सकता. साथ ही, आपके पास उपयोगकर्ताओं के लिए अपने ऐप्लिकेशन के नए वर्शन को, ओरिजनल ऐप्लिकेशन के अपडेट के तौर पर रिलीज़ करने का विकल्प भी नहीं होगा. ज़्यादा जानकारी के लिए, नीचे [अपने पासकोड को सुरक्षित रखें](#secure_key) लेख पढ़ें.\n\nअगर आपने ऐप्लिकेशन साइनिंग कुंजी और पासकोड को खुद मैनेज किया है, तो APK पर साइन करने के लिए, आपको अपनी ऐप्लिकेशन साइनिंग कुंजी का इस्तेमाल करके, उसे स्थानीय तौर पर साइन करना होगा. इसके बाद, साइन किए गए APK को सीधे Google Play Store पर अपलोड करना होगा, ताकि उसे डिस्ट्रिब्यूट किया जा सके. इस बारे में ज़्यादा जानकारी के लिए, 12वीं इमेज देखें.\n\n![](https://developer.android.com/static/studio/images/publish/appsigning_selfmanagediagram_2x.png?hl=hi)\n\n**12वीं इमेज**. ऐप्लिकेशन साइनिंग पासकोड को खुद मैनेज करने पर, ऐप्लिकेशन को साइन करना\n\n[Play ऐप्लिकेशन साइनिंग](https://developer.android.com/studio/publish/app-signing?hl=hi#google-play-app-signing) का इस्तेमाल करने पर, Google आपकी साइनिंग पासकोड को सुरक्षित रखता है. साथ ही, यह पक्का करता है कि आपके ऐप्लिकेशन सही तरीके से साइन किए गए हों और उन्हें पूरे जीवनकाल के दौरान अपडेट मिलते रहें. हालांकि, अगर आपको ऐप्लिकेशन साइनिंग पासकोड खुद मैनेज करना है, तो आपको कुछ बातों का ध्यान रखना होगा.\n\nहस्ताक्षर करने से जुड़ी बातें\n-----------------------------\n\nआपको अपने ऐप्लिकेशन को, उसके पूरे जीवनकाल के दौरान एक ही सर्टिफ़िकेट से साइन करना चाहिए. ऐसा करने की कई वजहें हैं:\n\n*   **ऐप्लिकेशन अपग्रेड:** जब सिस्टम किसी ऐप्लिकेशन का अपडेट इंस्टॉल कर रहा होता है, तो वह नए वर्शन के सर्टिफ़िकेट की तुलना, मौजूदा वर्शन के सर्टिफ़िकेट से करता है. अगर सर्टिफ़िकेट मेल खाते हैं, तो सिस्टम अपडेट करने की अनुमति देता है. अगर नए वर्शन पर किसी दूसरे सर्टिफ़िकेट से हस्ताक्षर किया जाता है, तो आपको ऐप्लिकेशन के लिए कोई दूसरा पैकेज नाम असाइन करना होगा. इस मामले में, उपयोगकर्ता नए वर्शन को पूरी तरह से नए ऐप्लिकेशन के तौर पर इंस्टॉल करता है.\n*   **ऐप्लिकेशन को मॉड्यूल में बांटना:** Android, एक ही सर्टिफ़िकेट से साइन किए गए APK को एक ही प्रोसेस में चलाने की अनुमति देता है. ऐसा तब होता है, जब ऐप्लिकेशन ऐसा अनुरोध करते हैं. इससे सिस्टम उन्हें एक ही ऐप्लिकेशन के तौर पर इस्तेमाल करता है. इस तरह, अपने ऐप्लिकेशन को मॉड्यूल में डिप्लॉय किया जा सकता है. साथ ही, उपयोगकर्ता हर मॉड्यूल को अलग से अपडेट कर सकते हैं.\n*   **अनुमतियों की मदद से कोड/डेटा शेयर करना:** Android, सिग्नेचर के आधार पर अनुमतियां लागू करता है, ताकि कोई ऐप्लिकेशन किसी ऐसे दूसरे ऐप्लिकेशन के साथ फ़ंक्शन शेयर कर सके जिस पर किसी खास सर्टिफ़िकेट से हस्ताक्षर किया गया हो. एक ही सर्टिफ़िकेट का इस्तेमाल करके कई APK साइन करने और साइन वाले सर्टिफ़िकेट के आधार पर अनुमतियों की जांच करने की सुविधा का इस्तेमाल करके, आपके ऐप्लिकेशन सुरक्षित तरीके से कोड और डेटा शेयर कर सकते हैं.\n\nअगर आपको किसी ऐप्लिकेशन के लिए अपग्रेड की सुविधा देनी है, तो पक्का करें कि आपके ऐप्लिकेशन साइनिंग पासकोड की समयसीमा, उस ऐप्लिकेशन के अनुमानित जीवनकाल से ज़्यादा हो. हमारा सुझाव है कि आपके पासकोड की समयसीमा 25 साल या उससे ज़्यादा हो. कुंजी की समयसीमा खत्म होने के बाद, उपयोगकर्ता आपके ऐप्लिकेशन के नए वर्शन पर आसानी से अपग्रेड नहीं कर पाएंगे.\n\nअगर आपको अपने ऐप्लिकेशन Google Play पर पब्लिश करने हैं, तो ऐप्लिकेशन को साइन करने के लिए इस्तेमाल की जाने वाली कुंजी की समयसीमा 22 अक्टूबर, 2033 के बाद खत्म होनी चाहिए. Google Play इस शर्त को लागू करता है, ताकि नए वर्शन उपलब्ध होने पर, उपयोगकर्ता आसानी से ऐप्लिकेशन अपग्रेड कर सकें.\n\n### अपनी कुंजी को सुरक्षित रखना\n\nअगर आपने [Play ऐप्लिकेशन साइनिंग](#app-signing-google-play) के लिए ऑप्ट-इन करने के बजाय, अपनी ऐप्लिकेशन साइनिंग पासकोड और कीस्टोर को खुद मैनेज और सुरक्षित करने का विकल्प चुना है, तो ऐप्लिकेशन साइनिंग पासकोड को सुरक्षित रखना आपके और उपयोगकर्ता, दोनों के लिए ज़रूरी है. अगर आपने किसी को अपनी कुंजी इस्तेमाल करने की अनुमति दी है या आपने अपनी पासवर्ड और पासकोड को ऐसी जगह पर सेव किया है जहां तीसरे पक्ष के लोग उन्हें ढूंढकर इस्तेमाल कर सकते हैं, तो लेखक के तौर पर आपकी पहचान और उपयोगकर्ता का भरोसा कम हो जाता है.\n\n**ध्यान दें:** Play ऐप्लिकेशन साइनिंग का इस्तेमाल करने पर, आपके ऐप्लिकेशन साइनिंग पासकोड को Google के इन्फ़्रास्ट्रक्चर का इस्तेमाल करके सुरक्षित रखा जाता है. आपको अब भी अपना अपलोड पासकोड सुरक्षित रखना चाहिए, जैसा कि यहां बताया गया है. अगर आपके अपलोड पासकोड से छेड़छाड़ की गई है, तो Play Console में [अपलोड पासकोड को रीसेट करने का अनुरोध](#reset_upload_key) किया जा सकता है.\n\nअगर कोई तीसरा पक्ष आपकी जानकारी या अनुमति के बिना, आपके ऐप्लिकेशन की साइनिंग पासकोड हासिल कर लेता है, तो वह आपके ऐप्लिकेशन को साइन करके, उनकी जगह नुकसान पहुंचाने वाले ऐप्लिकेशन इंस्टॉल कर सकता है. वह आपके ऐप्लिकेशन को खराब भी कर सकता है. ऐसा व्यक्ति आपकी पहचान का इस्तेमाल करके, ऐप्लिकेशन को साइन भी कर सकता है और उन्हें दूसरे उपयोगकर्ताओं तक भी पहुंचा सकता है. ये ऐप्लिकेशन, दूसरे ऐप्लिकेशन या सिस्टम पर हमला कर सकते हैं. इसके अलावा, ये उपयोगकर्ता का डेटा चोरी कर सकते हैं या उसे खराब कर सकते हैं.\n\nआने वाले समय में आपके ऐप्लिकेशन के सभी वर्शन को साइन करने के लिए, आपकी निजी कुंजी ज़रूरी है. अगर आपकी कुंजी खो जाती है या कहीं खो जाती है, तो आपके पास अपने मौजूदा ऐप्लिकेशन के अपडेट पब्लिश करने का विकल्प नहीं होगा. पहले जनरेट की गई कुंजी को फिर से जनरेट नहीं किया जा सकता.\n\nडेवलपर के तौर पर आपकी साख इस बात पर निर्भर करती है कि आपने ऐप्लिकेशन साइनिंग पासकोड को हर समय सही तरीके से सुरक्षित रखा है या नहीं. ऐसा तब तक करना होगा, जब तक पासकोड की समयसीमा खत्म नहीं हो जाती. पासकोड को सुरक्षित रखने के लिए, यहां कुछ सलाह दी गई हैं:\n\n*   पासवर्ड और पासकोड के लिए मज़बूत पासवर्ड चुनें.\n*   अपनी निजी कुंजी किसी को न दें या न उधार दें. साथ ही, बिना अनुमति वाले लोगों को अपना कीस्टोर और पासवर्ड न बताएं.\n*   अपनी निजी कुंजी वाली कीस्टोर फ़ाइल को किसी सुरक्षित जगह पर रखें.\n\nआम तौर पर, अगर पासकोड जनरेट करने, इस्तेमाल करने, और सेव करने के दौरान सावधानी बरती जाती है, तो वह सुरक्षित रहेगा.\n\n#### अपनी बिल्ड फ़ाइलों से हस्ताक्षर करने की जानकारी हटाना\n\nहस्ताक्षर करने का कॉन्फ़िगरेशन बनाने पर, Android Studio, मॉड्यूल की `build.gradle` फ़ाइलों में हस्ताक्षर करने की जानकारी को सादा टेक्स्ट में जोड़ता है. अगर आप किसी टीम के साथ काम कर रहे हैं या अपना कोड ओपन सोर्स कर रहे हैं, तो आपको इस संवेदनशील जानकारी को बिल्ड फ़ाइलों से हटा देना चाहिए, ताकि कोई और इसे आसानी से ऐक्सेस न कर पाए. ऐसा करने के लिए, आपको सुरक्षित जानकारी सेव करने के लिए एक अलग प्रॉपर्टी फ़ाइल बनानी होगी. साथ ही, अपनी बिल्ड फ़ाइलों में उस फ़ाइल का रेफ़रंस इस तरह देना होगा:\n\n1.  साइनिंग कॉन्फ़िगरेशन बनाएं और उसे एक या उससे ज़्यादा बिल्ड टाइप को असाइन करें. इन निर्देशों में यह माना गया है कि आपने रिलीज़ के लिए बने बिल्ड टाइप के लिए, साइनिंग का एक कॉन्फ़िगरेशन कॉन्फ़िगर किया है. इस बारे में ऊपर [अपने ऐप्लिकेशन को अपने-आप साइन करने के लिए, बिल्ड प्रोसेस को कॉन्फ़िगर करना](#sign-auto) में बताया गया है.\n2.  अपने प्रोजेक्ट की रूट डायरेक्ट्री में, `keystore.properties` नाम की फ़ाइल बनाएं. इस फ़ाइल में, हस्ताक्षर करने से जुड़ी आपकी जानकारी इस तरह होनी चाहिए:\n    \n    storePassword=myStorePassword\n    keyPassword=mykeyPassword\n    keyAlias=myKeyAlias\n    storeFile=myStoreFileLocation\n    \n3.  अपने मॉड्यूल की `build.gradle` फ़ाइल में, `android {}` ब्लॉक से पहले अपनी `keystore.properties` फ़ाइल को लोड करने के लिए कोड जोड़ें.\n    \n    ### Groovy\n    \n    ...\n    \n    // Create a variable called keystorePropertiesFile, and initialize it to your\n    // keystore.properties file, in the rootProject folder.\n    def keystorePropertiesFile \\= rootProject.file(\&quot;keystore.properties\&quot;)\n    \n    // Initialize a new Properties() object called keystoreProperties.\n    def keystoreProperties \\= new Properties()\n    \n    // Load your keystore.properties file into the keystoreProperties object.\n    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))\n    \n    android {\n        ...\n    }\n    \n    ### Kotlin\n    \n    ...\n    import java.util.Properties\n    import java.io.FileInputStream\n    \n    // Create a variable called keystorePropertiesFile, and initialize it to your\n    // keystore.properties file, in the rootProject folder.\n    val keystorePropertiesFile \\= rootProject.file(\&quot;keystore.properties\&quot;)\n    \n    // Initialize a new Properties() object called keystoreProperties.\n    val keystoreProperties \\= Properties()\n    \n    // Load your keystore.properties file into the keystoreProperties object.\n    keystoreProperties.load(FileInputStream(keystorePropertiesFile))\n    \n    android {\n        ...\n    }\n    \n    **ध्यान दें:** अपनी `keystore.properties` फ़ाइल को किसी दूसरी जगह पर सेव किया जा सकता है. उदाहरण के लिए, प्रोजेक्ट के रूट फ़ोल्डर के बजाय मॉड्यूल फ़ोल्डर में या अगर लगातार इंटिग्रेशन टूल का इस्तेमाल किया जा रहा है, तो अपने बिल्ड सर्वर पर. ऐसे में, आपको ऊपर दिए गए कोड में बदलाव करना चाहिए, ताकि अपनी असल `keystore.properties` फ़ाइल की जगह का इस्तेमाल करके, `keystorePropertiesFile` को सही तरीके से शुरू किया जा सके.\n    \n4.  `keystoreProperties['propertyName']` सिंटैक्स का इस्तेमाल करके, `keystoreProperties` में सेव की गई प्रॉपर्टी देखी जा सकती हैं. इस सिंटैक्स का इस्तेमाल करके, `keystoreProperties` में सेव की गई हस्ताक्षर करने की जानकारी का रेफ़रंस देने के लिए, अपने मॉड्यूल की `build.gradle` फ़ाइल के `signingConfigs` ब्लॉक में बदलाव करें.\n    \n    ### Groovy\n    \n    android {\n        signingConfigs {\n            config {\n                keyAlias keystoreProperties\\['keyAlias'\\]\n                keyPassword keystoreProperties\\['keyPassword'\\]\n                storeFile file(keystoreProperties\\['storeFile'\\])\n                storePassword keystoreProperties\\['storePassword'\\]\n            }\n        }\n        ...\n      }\n    \n    ### Kotlin\n    \n    android {\n        signingConfigs {\n            create(\&quot;config\&quot;) {\n                keyAlias \\= keystoreProperties\\[\&quot;keyAlias\&quot;\\] as String\n                keyPassword \\= keystoreProperties\\[\&quot;keyPassword\&quot;\\] as String\n                storeFile \\= file(keystoreProperties\\[\&quot;storeFile\&quot;\\] as String)\n                storePassword \\= keystoreProperties\\[\&quot;storePassword\&quot;\\] as String\n            }\n        }\n        ...\n      }\n    \n5.  **बिल्ड वैरिएंट** टूल विंडो खोलें और पक्का करें कि रिलीज़ के लिए बिल्ड टाइप चुना गया हो.\n6.  अपनी रिलीज़ के बंडल का APK या ऐप्लिकेशन बंडल बनाने के लिए, **बिल्ड &gt; बंडल / APK बनाएं** में जाकर कोई विकल्प चुनें. आपको अपने मॉड्यूल के लिए, `build/outputs/` डायरेक्ट्री में बिल्ड आउटपुट दिखेगा.\n\nआपकी बिल्ड फ़ाइलों में अब संवेदनशील जानकारी नहीं है. इसलिए, अब इन्हें सोर्स कंट्रोल में शामिल किया जा सकता है या शेयर किए गए कोडबेस में अपलोड किया जा सकता है. `keystore.properties` फ़ाइल को सुरक्षित रखना न भूलें. इसमें, इसे अपने सोर्स कंट्रोल सिस्टम से हटाना भी शामिल है.\n\nइस पेज पर मौजूद कॉन्टेंट और कोड सैंपल [कॉन्टेंट के लाइसेंस](https://developer.android.com/license?hl=hi) में बताए गए लाइसेंस के हिसाब से हैं. Java और OpenJDK, Oracle और/या इससे जुड़ी हुई कंपनियों के ट्रेडमार्क या रजिस्टर किए हुए ट्रेडमार्क हैं.\n\nआखिरी बार 2025-01-24 (UTC) को अपडेट किया गया.\n\n  *     [![X](https://developer.android.com/_static/android/images/logo-x.svg?hl=hi)X](//x.com/AndroidDev)\n    \n    X पर @AndroidDev को फ़ॉलो करें\n    \n*     [![YouTube](//www.gstatic.com/images/icons/material/product/2x/youtube_48dp.png)YouTube](//www.youtube.com/user/androiddevelopers?hl=hi)\n    \n    YouTube पर Android डेवलपर को देखें\n    \n*     [![LinkedIn](https://developer.android.com/_static/android/images/logo-linkedin.svg?hl=hi)LinkedIn](//www.linkedin.com/showcase/androiddev)\n    \n    Connect with the Android Developers community on LinkedIn\n\n*   ### Android के बारे में ज़्यादा जानें\n    \n    *   [Android](//www.android.com)\n    *   [Android for Enterprise](//www.android.com/enterprise/)\n    *   [सुरक्षा](//www.android.com/security-center/)\n    *   [सोर्स](//source.android.com)\n    *   [समाचार](/news)\n    *   [ब्लॉग](//android-developers.googleblog.com/)\n    *   [पॉडकास्ट](/podcasts)\n*   ### खोजें\n    \n    *   [गेमिंग](/games)\n    *   [मशीन लर्निंग](/ml)\n    *   [सेहत और फ़िटनेस](/health-and-fitness)\n    *   [कैमरा और मीडिया](/media)\n    *   [निजता](/privacy)\n    *   [5G](/training/connectivity/5g)\n*   ### Android डिवाइस\n    \n    *   [बड़ी स्क्रीन](/large-screens)\n    *   [Wear OS](/wear)\n    *   [ChromeOS डिवाइस](/chrome-os)\n    *   [कार के लिए Android](/cars)\n    *   [Android TV](/tv)\n*   ### रिलीज़\n    \n    *   [Android 15](/about/versions/15)\n    *   [Android 14](/about/versions/14)\n    *   [Android 13](/about/versions/13)\n    *   [Android 12](/about/versions/12)\n    *   [Android 11](/about/versions/11)\n    *   [Android 10](/about/versions/10)\n    *   [Pie](/about/versions/pie)\n*   ### दस्तावेज़ और डाउनलोड\n    \n    *   [Android Studio गाइड](/studio/intro)\n    *   [डेवलपर गाइड](/guide)\n    *   [API (एपीआई) संदर्भ](/reference)\n    *   [Android Studio डाउनलोड करें](/studio)\n    *   [Android एनडीके (NDK)](/ndk)\n*   ### सहायता\n    \n    *   [प्लैटफ़ॉर्म गड़बड़ी की रिपोर्ट करें](//issuetracker.google.com/issues/new?component=190923&amp;template=841312)\n    *   [दस्तावेज़ गड़बड़ी की रिपोर्ट करें](//issuetracker.google.com/issues/new?component=192697)\n    *   [Google Play support](//support.google.com/googleplay/android-developer)\n    *   [रिसर्च स्टडी में शामिल हों](https://g.co/userresearch/androiddeveloperfooter)\n\n [![Google Developers](https://www.gstatic.com/devrel-devsite/prod/v46d043083f27fa7361aea8506dabbd161e0b84f5a7c6df8d5e3cfad447dd4376/android/images/lockup-google-for-developers.svg)](https://developers.google.com/?hl=hi)\n\n*   [Android](//developer.android.com?hl=hi)\n*   [Chrome](//developer.chrome.com/home?hl=hi)\n*   [Firebase](//firebase.google.com?hl=hi)\n*   [Google Cloud Platform](//cloud.google.com?hl=hi)\n*   [सारे प्रॉडक्ट](//developers.google.com/products/?hl=hi)\n\n*   [निजता](//policies.google.com/privacy?hl=hi)\n*   [लाइसेंस](https://developer.android.com/license?hl=hi)\n*   [ब्रैंड दिशानिर्देश](https://developer.android.com/distribute/marketing-tools/brand-guidelines?hl=hi)\n*   [Manage cookies](#)\n*   ईमेल से समाचार और सलाह पाएं [सदस्य बनें](https://developer.android.com/updates?hl=hi)\n\n*   English\n*   Deutsch\n*   Español – América Latina\n*   Français\n*   Indonesia\n*   Italiano\n*   Polski\n*   Português – Brasil\n*   Tiếng Việt\n*   Türkçe\n*   Русский\n*   עברית\n*   العربيّة\n*   فارسی\n*   हिंदी\n*   বাংলা\n*   ภาษาไทย\n*   中文 – 简体\n*   中文 – 繁體\n*   日本語\n*   한국어&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;72a9176d-9b71-4fbd-96e5-4398df9fc5d8;toolu_01TDZqcDSRitoBUWkp7VeVbq&quot;:{&quot;requestId&quot;:&quot;72a9176d-9b71-4fbd-96e5-4398df9fc5d8&quot;,&quot;toolUseId&quot;:&quot;toolu_01TDZqcDSRitoBUWkp7VeVbq&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;- [Google Play Upload: The private key was not properly encrypted or ...](https://www.b4x.com/android/forum/threads/google-play-upload-the-private-key-was-not-properly-encrypted-or-is-not-a-type-of-key-we-support.128077/)\n  Feb 26, 2021 ... Android Question Google Play Upload: The private key was not properly encrypted ... pepk tool the upload works fine and the key is accepted by ...\n\n- [android - .net maui Play app signing The private key was not ...](https://stackoverflow.com/questions/79289401/net-maui-play-app-signing-the-private-key-was-not-properly-encrypted-or-is-not)\n  Dec 17, 2024 ... net maui Play app signing The private key was not properly encrypted ... After I download the public key, download the PEPK tool, I run this ...\n\n- [Need help with signing update for Google Play android app : r ...](https://www.reddit.com/r/gamemaker/comments/1bcv5tc/need_help_with_signing_update_for_google_play/)\n  Mar 13, 2024 ... \&quot;The private key was not properly encrypted, or is not a type ... PEPK tool, and if so where and how, or do I need something else? The ...\n\n- [java - The private key was not properly encrypted, or is not a type of ...](https://stackoverflow.com/questions/76580388/the-private-key-was-not-properly-encrypted-or-is-not-a-type-of-key-we-support-w)\n  Jun 29, 2023 ... .net maui Play app signing The private key was not properly encrypted ... Having trouble with the encryption key for PEPK tool · 0 · To upload ...&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;4af0bc0c-c26a-46ff-87c2-7f9f5723ab74;toolu_01UHwZkMMAgQZ9jZe5s8YbUm&quot;:{&quot;requestId&quot;:&quot;4af0bc0c-c26a-46ff-87c2-7f9f5723ab74&quot;,&quot;toolUseId&quot;:&quot;toolu_01UHwZkMMAgQZ9jZe5s8YbUm&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Successfully edited the file signing/create_keys.sh.\nResult for str_replace for entry with index [1]:\nReplacement successful.\nnew_str starts at line 1 and ends at line 108.\n\nReview the changes and make sure they are as expected (correct indentation, no duplicate lines, etc).\nEdit the file again if necessary.\n&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;bd365a4b-f2ce-4da3-8d2e-1c544074ad8a;toolu_01DmsDb2njuCLzEQpBVF8sbz&quot;:{&quot;requestId&quot;:&quot;bd365a4b-f2ce-4da3-8d2e-1c544074ad8a&quot;,&quot;toolUseId&quot;:&quot;toolu_01DmsDb2njuCLzEQpBVF8sbz&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;File saved.  Saved file {signing/generate_upload_certificate.sh}&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;726292b9-ca71-4a7a-9305-488aa34c2013;toolu_01SLVA4itPQYjpyLe3DTdX7H&quot;:{&quot;requestId&quot;:&quot;726292b9-ca71-4a7a-9305-488aa34c2013&quot;,&quot;toolUseId&quot;:&quot;toolu_01SLVA4itPQYjpyLe3DTdX7H&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;Here are the results from executing the command.\n&lt;return-code&gt;\n0\n&lt;/return-code&gt;\n&lt;stdout&gt;\n\n&lt;/stdout&gt;\n&lt;stderr&gt;\n\n&lt;/stderr&gt;&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}},&quot;7eb11f9e-7b35-48c3-8863-313abba8942c;toolu_01Ti4ACYXrXBcaSYQSE3gdvS&quot;:{&quot;requestId&quot;:&quot;7eb11f9e-7b35-48c3-8863-313abba8942c&quot;,&quot;toolUseId&quot;:&quot;toolu_01Ti4ACYXrXBcaSYQSE3gdvS&quot;,&quot;phase&quot;:5,&quot;result&quot;:{&quot;text&quot;:&quot;File saved.  Saved file {signing/GOOGLE_PLAY_SIGNING_GUIDE.md}&quot;,&quot;isError&quot;:false,&quot;requestId&quot;:&quot;&quot;}}},&quot;draftExchange&quot;:{&quot;request_message&quot;:&quot;&quot;,&quot;rich_text_json_repr&quot;:{&quot;type&quot;:&quot;doc&quot;,&quot;content&quot;:[{&quot;type&quot;:&quot;paragraph&quot;}]},&quot;status&quot;:&quot;draft&quot;},&quot;requestIds&quot;:[],&quot;isPinned&quot;:false,&quot;isShareable&quot;:true,&quot;extraData&quot;:{&quot;isAgentConversation&quot;:true,&quot;baselineTimestamp&quot;:1751689363411,&quot;hasDirtyEdits&quot;:true},&quot;personaType&quot;:0,&quot;rootTaskUuid&quot;:&quot;13316e97-a255-4066-8b9a-f42cc3f46ebb&quot;}},&quot;agentExecutionMode&quot;:&quot;manual&quot;,&quot;isPanelCollapsed&quot;:true,&quot;displayedAnnouncements&quot;:[]}" />
      </map>
    </option>
  </component>
</project>